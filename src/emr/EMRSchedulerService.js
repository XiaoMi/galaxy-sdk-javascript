//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

EMRSchedulerService_createCluster_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
EMRSchedulerService_createCluster_args.prototype = {};
EMRSchedulerService_createCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cluster = new CreateClusterRequest();
        this.cluster.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_createCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_createCluster_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRUCT, 1);
    this.cluster.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_createCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_createCluster_result.prototype = {};
EMRSchedulerService_createCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CreateClusterResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_createCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_createCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroup_args = function(args) {
  this.instanceGroup = null;
  if (args) {
    if (args.instanceGroup !== undefined) {
      this.instanceGroup = args.instanceGroup;
    }
  }
};
EMRSchedulerService_addInstanceGroup_args.prototype = {};
EMRSchedulerService_addInstanceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.instanceGroup = new AddInstanceGroupRequest();
        this.instanceGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addInstanceGroup_args');
  if (this.instanceGroup !== null && this.instanceGroup !== undefined) {
    output.writeFieldBegin('instanceGroup', Thrift.Type.STRUCT, 1);
    this.instanceGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroup_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_addInstanceGroup_result.prototype = {};
EMRSchedulerService_addInstanceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AddInstanceGroupResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addInstanceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroups_args = function(args) {
  this.instanceGroups = null;
  if (args) {
    if (args.instanceGroups !== undefined) {
      this.instanceGroups = args.instanceGroups;
    }
  }
};
EMRSchedulerService_addInstanceGroups_args.prototype = {};
EMRSchedulerService_addInstanceGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size182 = 0;
        var _rtmp3186;
        this.instanceGroups = [];
        var _etype185 = 0;
        _rtmp3186 = input.readListBegin();
        _etype185 = _rtmp3186.etype;
        _size182 = _rtmp3186.size;
        for (var _i187 = 0; _i187 < _size182; ++_i187)
        {
          var elem188 = null;
          elem188 = new AddInstanceGroupRequest();
          elem188.read(input);
          this.instanceGroups.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroups_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addInstanceGroups_args');
  if (this.instanceGroups !== null && this.instanceGroups !== undefined) {
    output.writeFieldBegin('instanceGroups', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.instanceGroups.length);
    for (var iter189 in this.instanceGroups)
    {
      if (this.instanceGroups.hasOwnProperty(iter189))
      {
        iter189 = this.instanceGroups[iter189];
        iter189.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroups_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_addInstanceGroups_result.prototype = {};
EMRSchedulerService_addInstanceGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size190 = 0;
        var _rtmp3194;
        this.success = [];
        var _etype193 = 0;
        _rtmp3194 = input.readListBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = new AddInstanceGroupResponse();
          elem196.read(input);
          this.success.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroups_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addInstanceGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter197 in this.success)
    {
      if (this.success.hasOwnProperty(iter197))
      {
        iter197 = this.success[iter197];
        iter197.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_submitJob_args = function(args) {
  this.job = null;
  if (args) {
    if (args.job !== undefined) {
      this.job = args.job;
    }
  }
};
EMRSchedulerService_submitJob_args.prototype = {};
EMRSchedulerService_submitJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.job = new SubmitJobRequest();
        this.job.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_submitJob_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_submitJob_args');
  if (this.job !== null && this.job !== undefined) {
    output.writeFieldBegin('job', Thrift.Type.STRUCT, 1);
    this.job.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_submitJob_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_submitJob_result.prototype = {};
EMRSchedulerService_submitJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SubmitJobResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_submitJob_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_submitJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_submitJobs_args = function(args) {
  this.jobs = null;
  if (args) {
    if (args.jobs !== undefined) {
      this.jobs = args.jobs;
    }
  }
};
EMRSchedulerService_submitJobs_args.prototype = {};
EMRSchedulerService_submitJobs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size198 = 0;
        var _rtmp3202;
        this.jobs = [];
        var _etype201 = 0;
        _rtmp3202 = input.readListBegin();
        _etype201 = _rtmp3202.etype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var elem204 = null;
          elem204 = new SubmitJobRequest();
          elem204.read(input);
          this.jobs.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_submitJobs_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_submitJobs_args');
  if (this.jobs !== null && this.jobs !== undefined) {
    output.writeFieldBegin('jobs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.jobs.length);
    for (var iter205 in this.jobs)
    {
      if (this.jobs.hasOwnProperty(iter205))
      {
        iter205 = this.jobs[iter205];
        iter205.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_submitJobs_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_submitJobs_result.prototype = {};
EMRSchedulerService_submitJobs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size206 = 0;
        var _rtmp3210;
        this.success = [];
        var _etype209 = 0;
        _rtmp3210 = input.readListBegin();
        _etype209 = _rtmp3210.etype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var elem212 = null;
          elem212 = new SubmitJobResponse();
          elem212.read(input);
          this.success.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_submitJobs_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_submitJobs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter213 in this.success)
    {
      if (this.success.hasOwnProperty(iter213))
      {
        iter213 = this.success[iter213];
        iter213.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_terminateCluster_args = function(args) {
  this.terminateCluster = null;
  if (args) {
    if (args.terminateCluster !== undefined) {
      this.terminateCluster = args.terminateCluster;
    }
  }
};
EMRSchedulerService_terminateCluster_args.prototype = {};
EMRSchedulerService_terminateCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.terminateCluster = new TerminateClusterRequest();
        this.terminateCluster.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_terminateCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_terminateCluster_args');
  if (this.terminateCluster !== null && this.terminateCluster !== undefined) {
    output.writeFieldBegin('terminateCluster', Thrift.Type.STRUCT, 1);
    this.terminateCluster.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_terminateCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_terminateCluster_result.prototype = {};
EMRSchedulerService_terminateCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_terminateCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_terminateCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_modifyInstanceGroup_args = function(args) {
  this.instanceGroup = null;
  if (args) {
    if (args.instanceGroup !== undefined) {
      this.instanceGroup = args.instanceGroup;
    }
  }
};
EMRSchedulerService_modifyInstanceGroup_args.prototype = {};
EMRSchedulerService_modifyInstanceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.instanceGroup = new ModifyInstanceGroupRequest();
        this.instanceGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_modifyInstanceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_modifyInstanceGroup_args');
  if (this.instanceGroup !== null && this.instanceGroup !== undefined) {
    output.writeFieldBegin('instanceGroup', Thrift.Type.STRUCT, 1);
    this.instanceGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_modifyInstanceGroup_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_modifyInstanceGroup_result.prototype = {};
EMRSchedulerService_modifyInstanceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ModifyInstanceGroupResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_modifyInstanceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_modifyInstanceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeCluster_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
  }
};
EMRSchedulerService_describeCluster_args.prototype = {};
EMRSchedulerService_describeCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeCluster_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_describeCluster_result.prototype = {};
EMRSchedulerService_describeCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClusterDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeInstanceGroup_args = function(args) {
  this.instanceGroupId = null;
  if (args) {
    if (args.instanceGroupId !== undefined) {
      this.instanceGroupId = args.instanceGroupId;
    }
  }
};
EMRSchedulerService_describeInstanceGroup_args.prototype = {};
EMRSchedulerService_describeInstanceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeInstanceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeInstanceGroup_args');
  if (this.instanceGroupId !== null && this.instanceGroupId !== undefined) {
    output.writeFieldBegin('instanceGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeInstanceGroup_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_describeInstanceGroup_result.prototype = {};
EMRSchedulerService_describeInstanceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new InstanceGroupDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeInstanceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeInstanceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeInstance_args = function(args) {
  this.clusterId = null;
  this.instanceId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
    if (args.instanceId !== undefined) {
      this.instanceId = args.instanceId;
    }
  }
};
EMRSchedulerService_describeInstance_args.prototype = {};
EMRSchedulerService_describeInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeInstance_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeInstance_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 2);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeInstance_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_describeInstance_result.prototype = {};
EMRSchedulerService_describeInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new InstanceDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeInstance_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeInstance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeJob_args = function(args) {
  this.clusterId = null;
  this.jobId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
    if (args.jobId !== undefined) {
      this.jobId = args.jobId;
    }
  }
};
EMRSchedulerService_describeJob_args.prototype = {};
EMRSchedulerService_describeJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeJob_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeJob_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 2);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeJob_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_describeJob_result.prototype = {};
EMRSchedulerService_describeJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new JobDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeJob_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listClusters_args = function(args) {
  this.createdAfter = null;
  this.createdBefore = null;
  if (args) {
    if (args.createdAfter !== undefined) {
      this.createdAfter = args.createdAfter;
    }
    if (args.createdBefore !== undefined) {
      this.createdBefore = args.createdBefore;
    }
  }
};
EMRSchedulerService_listClusters_args.prototype = {};
EMRSchedulerService_listClusters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.createdAfter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createdBefore = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listClusters_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listClusters_args');
  if (this.createdAfter !== null && this.createdAfter !== undefined) {
    output.writeFieldBegin('createdAfter', Thrift.Type.I32, 1);
    output.writeI32(this.createdAfter);
    output.writeFieldEnd();
  }
  if (this.createdBefore !== null && this.createdBefore !== undefined) {
    output.writeFieldBegin('createdBefore', Thrift.Type.I32, 2);
    output.writeI32(this.createdBefore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listClusters_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listClusters_result.prototype = {};
EMRSchedulerService_listClusters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size214 = 0;
        var _rtmp3218;
        this.success = [];
        var _etype217 = 0;
        _rtmp3218 = input.readListBegin();
        _etype217 = _rtmp3218.etype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var elem220 = null;
          elem220 = new ClusterDetail();
          elem220.read(input);
          this.success.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listClusters_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listClusters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter221 in this.success)
    {
      if (this.success.hasOwnProperty(iter221))
      {
        iter221 = this.success[iter221];
        iter221.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listClustersWithPrefix_args = function(args) {
  this.prefix = null;
  if (args) {
    if (args.prefix !== undefined) {
      this.prefix = args.prefix;
    }
  }
};
EMRSchedulerService_listClustersWithPrefix_args.prototype = {};
EMRSchedulerService_listClustersWithPrefix_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listClustersWithPrefix_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listClustersWithPrefix_args');
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 1);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listClustersWithPrefix_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listClustersWithPrefix_result.prototype = {};
EMRSchedulerService_listClustersWithPrefix_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size222 = 0;
        var _rtmp3226;
        this.success = [];
        var _etype225 = 0;
        _rtmp3226 = input.readListBegin();
        _etype225 = _rtmp3226.etype;
        _size222 = _rtmp3226.size;
        for (var _i227 = 0; _i227 < _size222; ++_i227)
        {
          var elem228 = null;
          elem228 = new ClusterDetail();
          elem228.read(input);
          this.success.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listClustersWithPrefix_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listClustersWithPrefix_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter229 in this.success)
    {
      if (this.success.hasOwnProperty(iter229))
      {
        iter229 = this.success[iter229];
        iter229.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstanceGroups_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
  }
};
EMRSchedulerService_listInstanceGroups_args.prototype = {};
EMRSchedulerService_listInstanceGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstanceGroups_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstanceGroups_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstanceGroups_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listInstanceGroups_result.prototype = {};
EMRSchedulerService_listInstanceGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size230 = 0;
        var _rtmp3234;
        this.success = [];
        var _etype233 = 0;
        _rtmp3234 = input.readListBegin();
        _etype233 = _rtmp3234.etype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var elem236 = null;
          elem236 = new InstanceGroupDetail();
          elem236.read(input);
          this.success.push(elem236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstanceGroups_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstanceGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter237 in this.success)
    {
      if (this.success.hasOwnProperty(iter237))
      {
        iter237 = this.success[iter237];
        iter237.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstancesInCluster_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
  }
};
EMRSchedulerService_listInstancesInCluster_args.prototype = {};
EMRSchedulerService_listInstancesInCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstancesInCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstancesInCluster_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstancesInCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listInstancesInCluster_result.prototype = {};
EMRSchedulerService_listInstancesInCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size238 = 0;
        var _rtmp3242;
        this.success = [];
        var _etype241 = 0;
        _rtmp3242 = input.readListBegin();
        _etype241 = _rtmp3242.etype;
        _size238 = _rtmp3242.size;
        for (var _i243 = 0; _i243 < _size238; ++_i243)
        {
          var elem244 = null;
          elem244 = new InstanceDetail();
          elem244.read(input);
          this.success.push(elem244);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstancesInCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstancesInCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter245 in this.success)
    {
      if (this.success.hasOwnProperty(iter245))
      {
        iter245 = this.success[iter245];
        iter245.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstancesInGroup_args = function(args) {
  this.clusterId = null;
  this.groupId = null;
  this.groupRole = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
    if (args.groupRole !== undefined) {
      this.groupRole = args.groupRole;
    }
  }
};
EMRSchedulerService_listInstancesInGroup_args.prototype = {};
EMRSchedulerService_listInstancesInGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.groupRole = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstancesInGroup_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstancesInGroup_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.groupRole !== null && this.groupRole !== undefined) {
    output.writeFieldBegin('groupRole', Thrift.Type.I32, 3);
    output.writeI32(this.groupRole);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstancesInGroup_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listInstancesInGroup_result.prototype = {};
EMRSchedulerService_listInstancesInGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size246 = 0;
        var _rtmp3250;
        this.success = [];
        var _etype249 = 0;
        _rtmp3250 = input.readListBegin();
        _etype249 = _rtmp3250.etype;
        _size246 = _rtmp3250.size;
        for (var _i251 = 0; _i251 < _size246; ++_i251)
        {
          var elem252 = null;
          elem252 = new InstanceDetail();
          elem252.read(input);
          this.success.push(elem252);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstancesInGroup_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstancesInGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter253 in this.success)
    {
      if (this.success.hasOwnProperty(iter253))
      {
        iter253 = this.success[iter253];
        iter253.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listJobs_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
  }
};
EMRSchedulerService_listJobs_args.prototype = {};
EMRSchedulerService_listJobs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listJobs_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listJobs_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listJobs_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listJobs_result.prototype = {};
EMRSchedulerService_listJobs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size254 = 0;
        var _rtmp3258;
        this.success = [];
        var _etype257 = 0;
        _rtmp3258 = input.readListBegin();
        _etype257 = _rtmp3258.etype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var elem260 = null;
          elem260 = new JobDetail();
          elem260.read(input);
          this.success.push(elem260);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listJobs_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listJobs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter261 in this.success)
    {
      if (this.success.hasOwnProperty(iter261))
      {
        iter261 = this.success[iter261];
        iter261.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_setPermission_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_setPermission_args.prototype = {};
EMRSchedulerService_setPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new SetPermissionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_setPermission_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_setPermission_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_setPermission_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_setPermission_result.prototype = {};
EMRSchedulerService_setPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_setPermission_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_setPermission_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_revokePermission_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_revokePermission_args.prototype = {};
EMRSchedulerService_revokePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new RevokePermissionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_revokePermission_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_revokePermission_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_revokePermission_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_revokePermission_result.prototype = {};
EMRSchedulerService_revokePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_revokePermission_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_revokePermission_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_queryPermission_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_queryPermission_args.prototype = {};
EMRSchedulerService_queryPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new QueryPermissionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_queryPermission_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_queryPermission_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_queryPermission_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_queryPermission_result.prototype = {};
EMRSchedulerService_queryPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new QueryPermissionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_queryPermission_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_queryPermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listPermissions_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_listPermissions_args.prototype = {};
EMRSchedulerService_listPermissions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ListPermissionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listPermissions_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listPermissions_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listPermissions_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listPermissions_result.prototype = {};
EMRSchedulerService_listPermissions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ListPermissionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listPermissions_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listPermissions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getSSHPublicKeys_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_getSSHPublicKeys_args.prototype = {};
EMRSchedulerService_getSSHPublicKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new GetSSHPublicKeysRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getSSHPublicKeys_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getSSHPublicKeys_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getSSHPublicKeys_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_getSSHPublicKeys_result.prototype = {};
EMRSchedulerService_getSSHPublicKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetSSHPublicKeysResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getSSHPublicKeys_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getSSHPublicKeys_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addSSHPublicKeys_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_addSSHPublicKeys_args.prototype = {};
EMRSchedulerService_addSSHPublicKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new AddSSHPublicKeysRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addSSHPublicKeys_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addSSHPublicKeys_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addSSHPublicKeys_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_addSSHPublicKeys_result.prototype = {};
EMRSchedulerService_addSSHPublicKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addSSHPublicKeys_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addSSHPublicKeys_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_deleteSSHPublicKeys_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_deleteSSHPublicKeys_args.prototype = {};
EMRSchedulerService_deleteSSHPublicKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new DeleteSSHPublicKeysRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_deleteSSHPublicKeys_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_deleteSSHPublicKeys_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_deleteSSHPublicKeys_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_deleteSSHPublicKeys_result.prototype = {};
EMRSchedulerService_deleteSSHPublicKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_deleteSSHPublicKeys_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_deleteSSHPublicKeys_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getQuota_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_getQuota_args.prototype = {};
EMRSchedulerService_getQuota_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new GetQuotaRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getQuota_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getQuota_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getQuota_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_getQuota_result.prototype = {};
EMRSchedulerService_getQuota_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetQuotaResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getQuota_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getQuota_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_deleteCluster_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
EMRSchedulerService_deleteCluster_args.prototype = {};
EMRSchedulerService_deleteCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new DeleteClusterRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_deleteCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_deleteCluster_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_deleteCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_deleteCluster_result.prototype = {};
EMRSchedulerService_deleteCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeleteClusterResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_deleteCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_deleteCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getEMRBasicConfig_args = function(args) {
};
EMRSchedulerService_getEMRBasicConfig_args.prototype = {};
EMRSchedulerService_getEMRBasicConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getEMRBasicConfig_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getEMRBasicConfig_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getEMRBasicConfig_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_getEMRBasicConfig_result.prototype = {};
EMRSchedulerService_getEMRBasicConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetEMRBasicConfigResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getEMRBasicConfig_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getEMRBasicConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getSoftwareConfig_args = function(args) {
};
EMRSchedulerService_getSoftwareConfig_args.prototype = {};
EMRSchedulerService_getSoftwareConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getSoftwareConfig_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getSoftwareConfig_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getSoftwareConfig_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_getSoftwareConfig_result.prototype = {};
EMRSchedulerService_getSoftwareConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetSoftwareConfigResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getSoftwareConfig_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getSoftwareConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getHardwareConfig_args = function(args) {
};
EMRSchedulerService_getHardwareConfig_args.prototype = {};
EMRSchedulerService_getHardwareConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getHardwareConfig_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getHardwareConfig_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_getHardwareConfig_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_getHardwareConfig_result.prototype = {};
EMRSchedulerService_getHardwareConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetHardwareConfigResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_getHardwareConfig_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_getHardwareConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(EMRSchedulerServiceClient, BaseServiceClient);
EMRSchedulerServiceClient.prototype.createCluster = function(cluster, callback) {
  if (callback === undefined) {
    this.send_createCluster(cluster);
    return this.recv_createCluster();
  } else {
    var postData = this.send_createCluster(cluster, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createCluster);
  }
};

EMRSchedulerServiceClient.prototype.send_createCluster = function(cluster, callback) {
  this.output.writeMessageBegin('createCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_createCluster_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_createCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_createCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.addInstanceGroup = function(instanceGroup, callback) {
  if (callback === undefined) {
    this.send_addInstanceGroup(instanceGroup);
    return this.recv_addInstanceGroup();
  } else {
    var postData = this.send_addInstanceGroup(instanceGroup, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addInstanceGroup);
  }
};

EMRSchedulerServiceClient.prototype.send_addInstanceGroup = function(instanceGroup, callback) {
  this.output.writeMessageBegin('addInstanceGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_addInstanceGroup_args();
  args.instanceGroup = instanceGroup;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_addInstanceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_addInstanceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addInstanceGroup failed: unknown result';
};
EMRSchedulerServiceClient.prototype.addInstanceGroups = function(instanceGroups, callback) {
  if (callback === undefined) {
    this.send_addInstanceGroups(instanceGroups);
    return this.recv_addInstanceGroups();
  } else {
    var postData = this.send_addInstanceGroups(instanceGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addInstanceGroups);
  }
};

EMRSchedulerServiceClient.prototype.send_addInstanceGroups = function(instanceGroups, callback) {
  this.output.writeMessageBegin('addInstanceGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_addInstanceGroups_args();
  args.instanceGroups = instanceGroups;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_addInstanceGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_addInstanceGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addInstanceGroups failed: unknown result';
};
EMRSchedulerServiceClient.prototype.submitJob = function(job, callback) {
  if (callback === undefined) {
    this.send_submitJob(job);
    return this.recv_submitJob();
  } else {
    var postData = this.send_submitJob(job, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_submitJob);
  }
};

EMRSchedulerServiceClient.prototype.send_submitJob = function(job, callback) {
  this.output.writeMessageBegin('submitJob', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_submitJob_args();
  args.job = job;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_submitJob = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_submitJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'submitJob failed: unknown result';
};
EMRSchedulerServiceClient.prototype.submitJobs = function(jobs, callback) {
  if (callback === undefined) {
    this.send_submitJobs(jobs);
    return this.recv_submitJobs();
  } else {
    var postData = this.send_submitJobs(jobs, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_submitJobs);
  }
};

EMRSchedulerServiceClient.prototype.send_submitJobs = function(jobs, callback) {
  this.output.writeMessageBegin('submitJobs', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_submitJobs_args();
  args.jobs = jobs;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_submitJobs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_submitJobs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'submitJobs failed: unknown result';
};
EMRSchedulerServiceClient.prototype.terminateCluster = function(terminateCluster, callback) {
  if (callback === undefined) {
    this.send_terminateCluster(terminateCluster);
    return this.recv_terminateCluster();
  } else {
    var postData = this.send_terminateCluster(terminateCluster, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_terminateCluster);
  }
};

EMRSchedulerServiceClient.prototype.send_terminateCluster = function(terminateCluster, callback) {
  this.output.writeMessageBegin('terminateCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_terminateCluster_args();
  args.terminateCluster = terminateCluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_terminateCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_terminateCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terminateCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.modifyInstanceGroup = function(instanceGroup, callback) {
  if (callback === undefined) {
    this.send_modifyInstanceGroup(instanceGroup);
    return this.recv_modifyInstanceGroup();
  } else {
    var postData = this.send_modifyInstanceGroup(instanceGroup, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_modifyInstanceGroup);
  }
};

EMRSchedulerServiceClient.prototype.send_modifyInstanceGroup = function(instanceGroup, callback) {
  this.output.writeMessageBegin('modifyInstanceGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_modifyInstanceGroup_args();
  args.instanceGroup = instanceGroup;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_modifyInstanceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_modifyInstanceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'modifyInstanceGroup failed: unknown result';
};
EMRSchedulerServiceClient.prototype.describeCluster = function(clusterId, callback) {
  if (callback === undefined) {
    this.send_describeCluster(clusterId);
    return this.recv_describeCluster();
  } else {
    var postData = this.send_describeCluster(clusterId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_describeCluster);
  }
};

EMRSchedulerServiceClient.prototype.send_describeCluster = function(clusterId, callback) {
  this.output.writeMessageBegin('describeCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_describeCluster_args();
  args.clusterId = clusterId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_describeCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_describeCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.describeInstanceGroup = function(instanceGroupId, callback) {
  if (callback === undefined) {
    this.send_describeInstanceGroup(instanceGroupId);
    return this.recv_describeInstanceGroup();
  } else {
    var postData = this.send_describeInstanceGroup(instanceGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_describeInstanceGroup);
  }
};

EMRSchedulerServiceClient.prototype.send_describeInstanceGroup = function(instanceGroupId, callback) {
  this.output.writeMessageBegin('describeInstanceGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_describeInstanceGroup_args();
  args.instanceGroupId = instanceGroupId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_describeInstanceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_describeInstanceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeInstanceGroup failed: unknown result';
};
EMRSchedulerServiceClient.prototype.describeInstance = function(clusterId, instanceId, callback) {
  if (callback === undefined) {
    this.send_describeInstance(clusterId, instanceId);
    return this.recv_describeInstance();
  } else {
    var postData = this.send_describeInstance(clusterId, instanceId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_describeInstance);
  }
};

EMRSchedulerServiceClient.prototype.send_describeInstance = function(clusterId, instanceId, callback) {
  this.output.writeMessageBegin('describeInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_describeInstance_args();
  args.clusterId = clusterId;
  args.instanceId = instanceId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_describeInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_describeInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeInstance failed: unknown result';
};
EMRSchedulerServiceClient.prototype.describeJob = function(clusterId, jobId, callback) {
  if (callback === undefined) {
    this.send_describeJob(clusterId, jobId);
    return this.recv_describeJob();
  } else {
    var postData = this.send_describeJob(clusterId, jobId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_describeJob);
  }
};

EMRSchedulerServiceClient.prototype.send_describeJob = function(clusterId, jobId, callback) {
  this.output.writeMessageBegin('describeJob', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_describeJob_args();
  args.clusterId = clusterId;
  args.jobId = jobId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_describeJob = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_describeJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeJob failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listClusters = function(createdAfter, createdBefore, callback) {
  if (callback === undefined) {
    this.send_listClusters(createdAfter, createdBefore);
    return this.recv_listClusters();
  } else {
    var postData = this.send_listClusters(createdAfter, createdBefore, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listClusters);
  }
};

EMRSchedulerServiceClient.prototype.send_listClusters = function(createdAfter, createdBefore, callback) {
  this.output.writeMessageBegin('listClusters', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listClusters_args();
  args.createdAfter = createdAfter;
  args.createdBefore = createdBefore;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_listClusters = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listClusters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listClusters failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listClustersWithPrefix = function(prefix, callback) {
  if (callback === undefined) {
    this.send_listClustersWithPrefix(prefix);
    return this.recv_listClustersWithPrefix();
  } else {
    var postData = this.send_listClustersWithPrefix(prefix, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listClustersWithPrefix);
  }
};

EMRSchedulerServiceClient.prototype.send_listClustersWithPrefix = function(prefix, callback) {
  this.output.writeMessageBegin('listClustersWithPrefix', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listClustersWithPrefix_args();
  args.prefix = prefix;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_listClustersWithPrefix = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listClustersWithPrefix_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listClustersWithPrefix failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listInstanceGroups = function(clusterId, callback) {
  if (callback === undefined) {
    this.send_listInstanceGroups(clusterId);
    return this.recv_listInstanceGroups();
  } else {
    var postData = this.send_listInstanceGroups(clusterId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listInstanceGroups);
  }
};

EMRSchedulerServiceClient.prototype.send_listInstanceGroups = function(clusterId, callback) {
  this.output.writeMessageBegin('listInstanceGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listInstanceGroups_args();
  args.clusterId = clusterId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_listInstanceGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listInstanceGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstanceGroups failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listInstancesInCluster = function(clusterId, callback) {
  if (callback === undefined) {
    this.send_listInstancesInCluster(clusterId);
    return this.recv_listInstancesInCluster();
  } else {
    var postData = this.send_listInstancesInCluster(clusterId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listInstancesInCluster);
  }
};

EMRSchedulerServiceClient.prototype.send_listInstancesInCluster = function(clusterId, callback) {
  this.output.writeMessageBegin('listInstancesInCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listInstancesInCluster_args();
  args.clusterId = clusterId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_listInstancesInCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listInstancesInCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstancesInCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listInstancesInGroup = function(clusterId, groupId, groupRole, callback) {
  if (callback === undefined) {
    this.send_listInstancesInGroup(clusterId, groupId, groupRole);
    return this.recv_listInstancesInGroup();
  } else {
    var postData = this.send_listInstancesInGroup(clusterId, groupId, groupRole, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listInstancesInGroup);
  }
};

EMRSchedulerServiceClient.prototype.send_listInstancesInGroup = function(clusterId, groupId, groupRole, callback) {
  this.output.writeMessageBegin('listInstancesInGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listInstancesInGroup_args();
  args.clusterId = clusterId;
  args.groupId = groupId;
  args.groupRole = groupRole;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_listInstancesInGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listInstancesInGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstancesInGroup failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listJobs = function(clusterId, callback) {
  if (callback === undefined) {
    this.send_listJobs(clusterId);
    return this.recv_listJobs();
  } else {
    var postData = this.send_listJobs(clusterId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listJobs);
  }
};

EMRSchedulerServiceClient.prototype.send_listJobs = function(clusterId, callback) {
  this.output.writeMessageBegin('listJobs', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listJobs_args();
  args.clusterId = clusterId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_listJobs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listJobs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listJobs failed: unknown result';
};
EMRSchedulerServiceClient.prototype.setPermission = function(request, callback) {
  if (callback === undefined) {
    this.send_setPermission(request);
    this.recv_setPermission();
  } else {
    var postData = this.send_setPermission(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setPermission);
  }
};

EMRSchedulerServiceClient.prototype.send_setPermission = function(request, callback) {
  this.output.writeMessageBegin('setPermission', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_setPermission_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_setPermission = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_setPermission_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
EMRSchedulerServiceClient.prototype.revokePermission = function(request, callback) {
  if (callback === undefined) {
    this.send_revokePermission(request);
    this.recv_revokePermission();
  } else {
    var postData = this.send_revokePermission(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_revokePermission);
  }
};

EMRSchedulerServiceClient.prototype.send_revokePermission = function(request, callback) {
  this.output.writeMessageBegin('revokePermission', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_revokePermission_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_revokePermission = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_revokePermission_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
EMRSchedulerServiceClient.prototype.queryPermission = function(request, callback) {
  if (callback === undefined) {
    this.send_queryPermission(request);
    return this.recv_queryPermission();
  } else {
    var postData = this.send_queryPermission(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_queryPermission);
  }
};

EMRSchedulerServiceClient.prototype.send_queryPermission = function(request, callback) {
  this.output.writeMessageBegin('queryPermission', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_queryPermission_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_queryPermission = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_queryPermission_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryPermission failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listPermissions = function(request, callback) {
  if (callback === undefined) {
    this.send_listPermissions(request);
    return this.recv_listPermissions();
  } else {
    var postData = this.send_listPermissions(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listPermissions);
  }
};

EMRSchedulerServiceClient.prototype.send_listPermissions = function(request, callback) {
  this.output.writeMessageBegin('listPermissions', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listPermissions_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_listPermissions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listPermissions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listPermissions failed: unknown result';
};
EMRSchedulerServiceClient.prototype.getSSHPublicKeys = function(request, callback) {
  if (callback === undefined) {
    this.send_getSSHPublicKeys(request);
    return this.recv_getSSHPublicKeys();
  } else {
    var postData = this.send_getSSHPublicKeys(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSSHPublicKeys);
  }
};

EMRSchedulerServiceClient.prototype.send_getSSHPublicKeys = function(request, callback) {
  this.output.writeMessageBegin('getSSHPublicKeys', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_getSSHPublicKeys_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_getSSHPublicKeys = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_getSSHPublicKeys_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSSHPublicKeys failed: unknown result';
};
EMRSchedulerServiceClient.prototype.addSSHPublicKeys = function(request, callback) {
  if (callback === undefined) {
    this.send_addSSHPublicKeys(request);
    this.recv_addSSHPublicKeys();
  } else {
    var postData = this.send_addSSHPublicKeys(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addSSHPublicKeys);
  }
};

EMRSchedulerServiceClient.prototype.send_addSSHPublicKeys = function(request, callback) {
  this.output.writeMessageBegin('addSSHPublicKeys', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_addSSHPublicKeys_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_addSSHPublicKeys = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_addSSHPublicKeys_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
EMRSchedulerServiceClient.prototype.deleteSSHPublicKeys = function(request, callback) {
  if (callback === undefined) {
    this.send_deleteSSHPublicKeys(request);
    this.recv_deleteSSHPublicKeys();
  } else {
    var postData = this.send_deleteSSHPublicKeys(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteSSHPublicKeys);
  }
};

EMRSchedulerServiceClient.prototype.send_deleteSSHPublicKeys = function(request, callback) {
  this.output.writeMessageBegin('deleteSSHPublicKeys', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_deleteSSHPublicKeys_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_deleteSSHPublicKeys = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_deleteSSHPublicKeys_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
EMRSchedulerServiceClient.prototype.getQuota = function(request, callback) {
  if (callback === undefined) {
    this.send_getQuota(request);
    return this.recv_getQuota();
  } else {
    var postData = this.send_getQuota(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getQuota);
  }
};

EMRSchedulerServiceClient.prototype.send_getQuota = function(request, callback) {
  this.output.writeMessageBegin('getQuota', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_getQuota_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_getQuota = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_getQuota_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getQuota failed: unknown result';
};
EMRSchedulerServiceClient.prototype.deleteCluster = function(request, callback) {
  if (callback === undefined) {
    this.send_deleteCluster(request);
    return this.recv_deleteCluster();
  } else {
    var postData = this.send_deleteCluster(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteCluster);
  }
};

EMRSchedulerServiceClient.prototype.send_deleteCluster = function(request, callback) {
  this.output.writeMessageBegin('deleteCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_deleteCluster_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_deleteCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_deleteCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.getEMRBasicConfig = function(callback) {
  if (callback === undefined) {
    this.send_getEMRBasicConfig();
    return this.recv_getEMRBasicConfig();
  } else {
    var postData = this.send_getEMRBasicConfig(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getEMRBasicConfig);
  }
};

EMRSchedulerServiceClient.prototype.send_getEMRBasicConfig = function(callback) {
  this.output.writeMessageBegin('getEMRBasicConfig', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_getEMRBasicConfig_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_getEMRBasicConfig = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_getEMRBasicConfig_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getEMRBasicConfig failed: unknown result';
};
EMRSchedulerServiceClient.prototype.getSoftwareConfig = function(callback) {
  if (callback === undefined) {
    this.send_getSoftwareConfig();
    return this.recv_getSoftwareConfig();
  } else {
    var postData = this.send_getSoftwareConfig(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSoftwareConfig);
  }
};

EMRSchedulerServiceClient.prototype.send_getSoftwareConfig = function(callback) {
  this.output.writeMessageBegin('getSoftwareConfig', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_getSoftwareConfig_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_getSoftwareConfig = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_getSoftwareConfig_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSoftwareConfig failed: unknown result';
};
EMRSchedulerServiceClient.prototype.getHardwareConfig = function(callback) {
  if (callback === undefined) {
    this.send_getHardwareConfig();
    return this.recv_getHardwareConfig();
  } else {
    var postData = this.send_getHardwareConfig(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getHardwareConfig);
  }
};

EMRSchedulerServiceClient.prototype.send_getHardwareConfig = function(callback) {
  this.output.writeMessageBegin('getHardwareConfig', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_getHardwareConfig_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMRSchedulerServiceClient.prototype.recv_getHardwareConfig = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_getHardwareConfig_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getHardwareConfig failed: unknown result';
};
