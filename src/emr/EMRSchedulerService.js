//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

EMRSchedulerService_createCluster_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
EMRSchedulerService_createCluster_args.prototype = {};
EMRSchedulerService_createCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cluster = new CreateClusterRequest();
        this.cluster.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_createCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_createCluster_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRUCT, 1);
    this.cluster.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_createCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_createCluster_result.prototype = {};
EMRSchedulerService_createCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CreateClusterResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_createCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_createCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroup_args = function(args) {
  this.instanceGroup = null;
  if (args) {
    if (args.instanceGroup !== undefined) {
      this.instanceGroup = args.instanceGroup;
    }
  }
};
EMRSchedulerService_addInstanceGroup_args.prototype = {};
EMRSchedulerService_addInstanceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.instanceGroup = new AddInstanceGroupRequest();
        this.instanceGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addInstanceGroup_args');
  if (this.instanceGroup !== null && this.instanceGroup !== undefined) {
    output.writeFieldBegin('instanceGroup', Thrift.Type.STRUCT, 1);
    this.instanceGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroup_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_addInstanceGroup_result.prototype = {};
EMRSchedulerService_addInstanceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AddInstanceGroupResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addInstanceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroups_args = function(args) {
  this.instanceGroups = null;
  if (args) {
    if (args.instanceGroups !== undefined) {
      this.instanceGroups = args.instanceGroups;
    }
  }
};
EMRSchedulerService_addInstanceGroups_args.prototype = {};
EMRSchedulerService_addInstanceGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.instanceGroups = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = new AddInstanceGroupRequest();
          elem106.read(input);
          this.instanceGroups.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroups_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addInstanceGroups_args');
  if (this.instanceGroups !== null && this.instanceGroups !== undefined) {
    output.writeFieldBegin('instanceGroups', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.instanceGroups.length);
    for (var iter107 in this.instanceGroups)
    {
      if (this.instanceGroups.hasOwnProperty(iter107))
      {
        iter107 = this.instanceGroups[iter107];
        iter107.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroups_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_addInstanceGroups_result.prototype = {};
EMRSchedulerService_addInstanceGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.success = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = new AddInstanceGroupResponse();
          elem114.read(input);
          this.success.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_addInstanceGroups_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_addInstanceGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter115 in this.success)
    {
      if (this.success.hasOwnProperty(iter115))
      {
        iter115 = this.success[iter115];
        iter115.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_submitJob_args = function(args) {
  this.job = null;
  if (args) {
    if (args.job !== undefined) {
      this.job = args.job;
    }
  }
};
EMRSchedulerService_submitJob_args.prototype = {};
EMRSchedulerService_submitJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.job = new SubmitJobRequest();
        this.job.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_submitJob_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_submitJob_args');
  if (this.job !== null && this.job !== undefined) {
    output.writeFieldBegin('job', Thrift.Type.STRUCT, 1);
    this.job.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_submitJob_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_submitJob_result.prototype = {};
EMRSchedulerService_submitJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SubmitJobResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_submitJob_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_submitJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_submitJobs_args = function(args) {
  this.jobs = null;
  if (args) {
    if (args.jobs !== undefined) {
      this.jobs = args.jobs;
    }
  }
};
EMRSchedulerService_submitJobs_args.prototype = {};
EMRSchedulerService_submitJobs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.jobs = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = new SubmitJobRequest();
          elem122.read(input);
          this.jobs.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_submitJobs_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_submitJobs_args');
  if (this.jobs !== null && this.jobs !== undefined) {
    output.writeFieldBegin('jobs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.jobs.length);
    for (var iter123 in this.jobs)
    {
      if (this.jobs.hasOwnProperty(iter123))
      {
        iter123 = this.jobs[iter123];
        iter123.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_submitJobs_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_submitJobs_result.prototype = {};
EMRSchedulerService_submitJobs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.success = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new SubmitJobResponse();
          elem130.read(input);
          this.success.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_submitJobs_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_submitJobs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter131 in this.success)
    {
      if (this.success.hasOwnProperty(iter131))
      {
        iter131 = this.success[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_terminateCluster_args = function(args) {
  this.terminateCluster = null;
  if (args) {
    if (args.terminateCluster !== undefined) {
      this.terminateCluster = args.terminateCluster;
    }
  }
};
EMRSchedulerService_terminateCluster_args.prototype = {};
EMRSchedulerService_terminateCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.terminateCluster = new TerminateClusterRequest();
        this.terminateCluster.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_terminateCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_terminateCluster_args');
  if (this.terminateCluster !== null && this.terminateCluster !== undefined) {
    output.writeFieldBegin('terminateCluster', Thrift.Type.STRUCT, 1);
    this.terminateCluster.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_terminateCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_terminateCluster_result.prototype = {};
EMRSchedulerService_terminateCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_terminateCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_terminateCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_modifyInstanceGroup_args = function(args) {
  this.instanceGroup = null;
  if (args) {
    if (args.instanceGroup !== undefined) {
      this.instanceGroup = args.instanceGroup;
    }
  }
};
EMRSchedulerService_modifyInstanceGroup_args.prototype = {};
EMRSchedulerService_modifyInstanceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.instanceGroup = new ModifyInstanceGroupRequest();
        this.instanceGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_modifyInstanceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_modifyInstanceGroup_args');
  if (this.instanceGroup !== null && this.instanceGroup !== undefined) {
    output.writeFieldBegin('instanceGroup', Thrift.Type.STRUCT, 1);
    this.instanceGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_modifyInstanceGroup_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_modifyInstanceGroup_result.prototype = {};
EMRSchedulerService_modifyInstanceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ModifyInstanceGroupResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_modifyInstanceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_modifyInstanceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeCluster_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
  }
};
EMRSchedulerService_describeCluster_args.prototype = {};
EMRSchedulerService_describeCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeCluster_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_describeCluster_result.prototype = {};
EMRSchedulerService_describeCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClusterDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeInstanceGroup_args = function(args) {
  this.instanceGroupId = null;
  if (args) {
    if (args.instanceGroupId !== undefined) {
      this.instanceGroupId = args.instanceGroupId;
    }
  }
};
EMRSchedulerService_describeInstanceGroup_args.prototype = {};
EMRSchedulerService_describeInstanceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeInstanceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeInstanceGroup_args');
  if (this.instanceGroupId !== null && this.instanceGroupId !== undefined) {
    output.writeFieldBegin('instanceGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeInstanceGroup_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_describeInstanceGroup_result.prototype = {};
EMRSchedulerService_describeInstanceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new InstanceGroupDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeInstanceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeInstanceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeInstance_args = function(args) {
  this.clusterId = null;
  this.instanceId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
    if (args.instanceId !== undefined) {
      this.instanceId = args.instanceId;
    }
  }
};
EMRSchedulerService_describeInstance_args.prototype = {};
EMRSchedulerService_describeInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeInstance_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeInstance_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 2);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeInstance_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_describeInstance_result.prototype = {};
EMRSchedulerService_describeInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new InstanceDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeInstance_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeInstance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeJob_args = function(args) {
  this.clusterId = null;
  this.jobId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
    if (args.jobId !== undefined) {
      this.jobId = args.jobId;
    }
  }
};
EMRSchedulerService_describeJob_args.prototype = {};
EMRSchedulerService_describeJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeJob_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeJob_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 2);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_describeJob_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_describeJob_result.prototype = {};
EMRSchedulerService_describeJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new JobDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_describeJob_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_describeJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listClusters_args = function(args) {
  this.createdAfter = null;
  this.createdBefore = null;
  if (args) {
    if (args.createdAfter !== undefined) {
      this.createdAfter = args.createdAfter;
    }
    if (args.createdBefore !== undefined) {
      this.createdBefore = args.createdBefore;
    }
  }
};
EMRSchedulerService_listClusters_args.prototype = {};
EMRSchedulerService_listClusters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.createdAfter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createdBefore = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listClusters_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listClusters_args');
  if (this.createdAfter !== null && this.createdAfter !== undefined) {
    output.writeFieldBegin('createdAfter', Thrift.Type.I32, 1);
    output.writeI32(this.createdAfter);
    output.writeFieldEnd();
  }
  if (this.createdBefore !== null && this.createdBefore !== undefined) {
    output.writeFieldBegin('createdBefore', Thrift.Type.I32, 2);
    output.writeI32(this.createdBefore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listClusters_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listClusters_result.prototype = {};
EMRSchedulerService_listClusters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.success = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ClusterDetail();
          elem138.read(input);
          this.success.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listClusters_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listClusters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter139 in this.success)
    {
      if (this.success.hasOwnProperty(iter139))
      {
        iter139 = this.success[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstanceGroups_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
  }
};
EMRSchedulerService_listInstanceGroups_args.prototype = {};
EMRSchedulerService_listInstanceGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstanceGroups_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstanceGroups_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstanceGroups_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listInstanceGroups_result.prototype = {};
EMRSchedulerService_listInstanceGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.success = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new InstanceGroupDetail();
          elem146.read(input);
          this.success.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstanceGroups_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstanceGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter147 in this.success)
    {
      if (this.success.hasOwnProperty(iter147))
      {
        iter147 = this.success[iter147];
        iter147.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstancesInCluster_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
  }
};
EMRSchedulerService_listInstancesInCluster_args.prototype = {};
EMRSchedulerService_listInstancesInCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstancesInCluster_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstancesInCluster_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstancesInCluster_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listInstancesInCluster_result.prototype = {};
EMRSchedulerService_listInstancesInCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.success = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = new InstanceDetail();
          elem154.read(input);
          this.success.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstancesInCluster_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstancesInCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter155 in this.success)
    {
      if (this.success.hasOwnProperty(iter155))
      {
        iter155 = this.success[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstancesInGroup_args = function(args) {
  this.clusterId = null;
  this.groupId = null;
  this.groupRole = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
    if (args.groupRole !== undefined) {
      this.groupRole = args.groupRole;
    }
  }
};
EMRSchedulerService_listInstancesInGroup_args.prototype = {};
EMRSchedulerService_listInstancesInGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.groupRole = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstancesInGroup_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstancesInGroup_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.groupRole !== null && this.groupRole !== undefined) {
    output.writeFieldBegin('groupRole', Thrift.Type.I32, 3);
    output.writeI32(this.groupRole);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listInstancesInGroup_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listInstancesInGroup_result.prototype = {};
EMRSchedulerService_listInstancesInGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.success = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = new InstanceDetail();
          elem162.read(input);
          this.success.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listInstancesInGroup_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listInstancesInGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter163 in this.success)
    {
      if (this.success.hasOwnProperty(iter163))
      {
        iter163 = this.success[iter163];
        iter163.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listJobs_args = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
  }
};
EMRSchedulerService_listJobs_args.prototype = {};
EMRSchedulerService_listJobs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listJobs_args.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listJobs_args');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerService_listJobs_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
EMRSchedulerService_listJobs_result.prototype = {};
EMRSchedulerService_listJobs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.success = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = new JobDetail();
          elem170.read(input);
          this.success.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRSchedulerService_listJobs_result.prototype.write = function(output) {
  output.writeStructBegin('EMRSchedulerService_listJobs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter171 in this.success)
    {
      if (this.success.hasOwnProperty(iter171))
      {
        iter171 = this.success[iter171];
        iter171.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRSchedulerServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(EMRSchedulerServiceClient, BaseServiceClient);
EMRSchedulerServiceClient.prototype.createCluster = function(cluster, callback) {
  this.send_createCluster(cluster, callback); 
  if (!callback) {
    return this.recv_createCluster();
  }
};

EMRSchedulerServiceClient.prototype.send_createCluster = function(cluster, callback) {
  this.output.writeMessageBegin('createCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_createCluster_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createCluster();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_createCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_createCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.addInstanceGroup = function(instanceGroup, callback) {
  this.send_addInstanceGroup(instanceGroup, callback); 
  if (!callback) {
    return this.recv_addInstanceGroup();
  }
};

EMRSchedulerServiceClient.prototype.send_addInstanceGroup = function(instanceGroup, callback) {
  this.output.writeMessageBegin('addInstanceGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_addInstanceGroup_args();
  args.instanceGroup = instanceGroup;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addInstanceGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_addInstanceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_addInstanceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addInstanceGroup failed: unknown result';
};
EMRSchedulerServiceClient.prototype.addInstanceGroups = function(instanceGroups, callback) {
  this.send_addInstanceGroups(instanceGroups, callback); 
  if (!callback) {
    return this.recv_addInstanceGroups();
  }
};

EMRSchedulerServiceClient.prototype.send_addInstanceGroups = function(instanceGroups, callback) {
  this.output.writeMessageBegin('addInstanceGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_addInstanceGroups_args();
  args.instanceGroups = instanceGroups;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addInstanceGroups();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_addInstanceGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_addInstanceGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addInstanceGroups failed: unknown result';
};
EMRSchedulerServiceClient.prototype.submitJob = function(job, callback) {
  this.send_submitJob(job, callback); 
  if (!callback) {
    return this.recv_submitJob();
  }
};

EMRSchedulerServiceClient.prototype.send_submitJob = function(job, callback) {
  this.output.writeMessageBegin('submitJob', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_submitJob_args();
  args.job = job;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_submitJob();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_submitJob = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_submitJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'submitJob failed: unknown result';
};
EMRSchedulerServiceClient.prototype.submitJobs = function(jobs, callback) {
  this.send_submitJobs(jobs, callback); 
  if (!callback) {
    return this.recv_submitJobs();
  }
};

EMRSchedulerServiceClient.prototype.send_submitJobs = function(jobs, callback) {
  this.output.writeMessageBegin('submitJobs', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_submitJobs_args();
  args.jobs = jobs;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_submitJobs();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_submitJobs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_submitJobs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'submitJobs failed: unknown result';
};
EMRSchedulerServiceClient.prototype.terminateCluster = function(terminateCluster, callback) {
  this.send_terminateCluster(terminateCluster, callback); 
  if (!callback) {
    return this.recv_terminateCluster();
  }
};

EMRSchedulerServiceClient.prototype.send_terminateCluster = function(terminateCluster, callback) {
  this.output.writeMessageBegin('terminateCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_terminateCluster_args();
  args.terminateCluster = terminateCluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_terminateCluster();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_terminateCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_terminateCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terminateCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.modifyInstanceGroup = function(instanceGroup, callback) {
  this.send_modifyInstanceGroup(instanceGroup, callback); 
  if (!callback) {
    return this.recv_modifyInstanceGroup();
  }
};

EMRSchedulerServiceClient.prototype.send_modifyInstanceGroup = function(instanceGroup, callback) {
  this.output.writeMessageBegin('modifyInstanceGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_modifyInstanceGroup_args();
  args.instanceGroup = instanceGroup;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_modifyInstanceGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_modifyInstanceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_modifyInstanceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'modifyInstanceGroup failed: unknown result';
};
EMRSchedulerServiceClient.prototype.describeCluster = function(clusterId, callback) {
  this.send_describeCluster(clusterId, callback); 
  if (!callback) {
    return this.recv_describeCluster();
  }
};

EMRSchedulerServiceClient.prototype.send_describeCluster = function(clusterId, callback) {
  this.output.writeMessageBegin('describeCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_describeCluster_args();
  args.clusterId = clusterId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_describeCluster();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_describeCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_describeCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.describeInstanceGroup = function(instanceGroupId, callback) {
  this.send_describeInstanceGroup(instanceGroupId, callback); 
  if (!callback) {
    return this.recv_describeInstanceGroup();
  }
};

EMRSchedulerServiceClient.prototype.send_describeInstanceGroup = function(instanceGroupId, callback) {
  this.output.writeMessageBegin('describeInstanceGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_describeInstanceGroup_args();
  args.instanceGroupId = instanceGroupId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_describeInstanceGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_describeInstanceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_describeInstanceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeInstanceGroup failed: unknown result';
};
EMRSchedulerServiceClient.prototype.describeInstance = function(clusterId, instanceId, callback) {
  this.send_describeInstance(clusterId, instanceId, callback); 
  if (!callback) {
    return this.recv_describeInstance();
  }
};

EMRSchedulerServiceClient.prototype.send_describeInstance = function(clusterId, instanceId, callback) {
  this.output.writeMessageBegin('describeInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_describeInstance_args();
  args.clusterId = clusterId;
  args.instanceId = instanceId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_describeInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_describeInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_describeInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeInstance failed: unknown result';
};
EMRSchedulerServiceClient.prototype.describeJob = function(clusterId, jobId, callback) {
  this.send_describeJob(clusterId, jobId, callback); 
  if (!callback) {
    return this.recv_describeJob();
  }
};

EMRSchedulerServiceClient.prototype.send_describeJob = function(clusterId, jobId, callback) {
  this.output.writeMessageBegin('describeJob', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_describeJob_args();
  args.clusterId = clusterId;
  args.jobId = jobId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_describeJob();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_describeJob = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_describeJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeJob failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listClusters = function(createdAfter, createdBefore, callback) {
  this.send_listClusters(createdAfter, createdBefore, callback); 
  if (!callback) {
    return this.recv_listClusters();
  }
};

EMRSchedulerServiceClient.prototype.send_listClusters = function(createdAfter, createdBefore, callback) {
  this.output.writeMessageBegin('listClusters', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listClusters_args();
  args.createdAfter = createdAfter;
  args.createdBefore = createdBefore;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listClusters();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_listClusters = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listClusters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listClusters failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listInstanceGroups = function(clusterId, callback) {
  this.send_listInstanceGroups(clusterId, callback); 
  if (!callback) {
    return this.recv_listInstanceGroups();
  }
};

EMRSchedulerServiceClient.prototype.send_listInstanceGroups = function(clusterId, callback) {
  this.output.writeMessageBegin('listInstanceGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listInstanceGroups_args();
  args.clusterId = clusterId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listInstanceGroups();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_listInstanceGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listInstanceGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstanceGroups failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listInstancesInCluster = function(clusterId, callback) {
  this.send_listInstancesInCluster(clusterId, callback); 
  if (!callback) {
    return this.recv_listInstancesInCluster();
  }
};

EMRSchedulerServiceClient.prototype.send_listInstancesInCluster = function(clusterId, callback) {
  this.output.writeMessageBegin('listInstancesInCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listInstancesInCluster_args();
  args.clusterId = clusterId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listInstancesInCluster();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_listInstancesInCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listInstancesInCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstancesInCluster failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listInstancesInGroup = function(clusterId, groupId, groupRole, callback) {
  this.send_listInstancesInGroup(clusterId, groupId, groupRole, callback); 
  if (!callback) {
    return this.recv_listInstancesInGroup();
  }
};

EMRSchedulerServiceClient.prototype.send_listInstancesInGroup = function(clusterId, groupId, groupRole, callback) {
  this.output.writeMessageBegin('listInstancesInGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listInstancesInGroup_args();
  args.clusterId = clusterId;
  args.groupId = groupId;
  args.groupRole = groupRole;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listInstancesInGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_listInstancesInGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listInstancesInGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstancesInGroup failed: unknown result';
};
EMRSchedulerServiceClient.prototype.listJobs = function(clusterId, callback) {
  this.send_listJobs(clusterId, callback); 
  if (!callback) {
    return this.recv_listJobs();
  }
};

EMRSchedulerServiceClient.prototype.send_listJobs = function(clusterId, callback) {
  this.output.writeMessageBegin('listJobs', Thrift.MessageType.CALL, this.seqid);
  var args = new EMRSchedulerService_listJobs_args();
  args.clusterId = clusterId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listJobs();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

EMRSchedulerServiceClient.prototype.recv_listJobs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMRSchedulerService_listJobs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listJobs failed: unknown result';
};
