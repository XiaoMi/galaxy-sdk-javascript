//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


InstanceGroupRole = {
  'MASTER' : 1,
  'CONTROL' : 2,
  'CORE' : 3,
  'TASK' : 4
};
JobActionOnFailure = {
  'TERMINATE_JOB' : 1,
  'TERMINATE_CLUSTER' : 2,
  'CANCEL_AND_WAIT' : 3,
  'CONTINUE' : 4
};
StateCode = {
  'C_INITED' : 0,
  'C_PROCESSING' : 1,
  'C_STARTING' : 2,
  'C_BOOSTRAPPING' : 3,
  'C_RUNNING' : 4,
  'C_WAITING' : 5,
  'C_TERMINATING' : 6,
  'C_COMPLETED' : 7,
  'C_TERMINATED' : 8,
  'C_FAILED' : 9,
  'G_INITED' : 100,
  'G_PROCESSING' : 101,
  'G_STARTING' : 102,
  'G_RUNNING' : 103,
  'G_RESIZING' : 104,
  'G_TERMINATING' : 105,
  'G_TERMINATED' : 106,
  'I_INITED' : 200,
  'I_PROCESSING' : 201,
  'I_STARTING' : 202,
  'I_RUNNING' : 203,
  'I_TERMINATING' : 204,
  'I_TERMINATED' : 205,
  'J_INITED' : 300,
  'J_PROCESSING' : 301,
  'J_SUBMITTED' : 302,
  'J_RUNNGIN' : 303,
  'J_FINISHED' : 304,
  'J_KILLED' : 305,
  'J_FAILED' : 306
};
Timeline = function(args) {
  this.creationTime = 0;
  this.readyTime = 0;
  this.endTime = 0;
  if (args) {
    if (args.creationTime !== undefined) {
      this.creationTime = args.creationTime;
    }
    if (args.readyTime !== undefined) {
      this.readyTime = args.readyTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
Timeline.prototype = {};
Timeline.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.creationTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.readyTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.endTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Timeline.prototype.write = function(output) {
  output.writeStructBegin('Timeline');
  if (this.creationTime !== null && this.creationTime !== undefined) {
    output.writeFieldBegin('creationTime', Thrift.Type.I32, 1);
    output.writeI32(this.creationTime);
    output.writeFieldEnd();
  }
  if (this.readyTime !== null && this.readyTime !== undefined) {
    output.writeFieldBegin('readyTime', Thrift.Type.I32, 2);
    output.writeI32(this.readyTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I32, 3);
    output.writeI32(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Status = function(args) {
  this.state = null;
  this.stateChangeReason = null;
  this.timeline = null;
  if (args) {
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.stateChangeReason !== undefined) {
      this.stateChangeReason = args.stateChangeReason;
    }
    if (args.timeline !== undefined) {
      this.timeline = args.timeline;
    }
  }
};
Status.prototype = {};
Status.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stateChangeReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeline = new Timeline();
        this.timeline.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Status.prototype.write = function(output) {
  output.writeStructBegin('Status');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.stateChangeReason !== null && this.stateChangeReason !== undefined) {
    output.writeFieldBegin('stateChangeReason', Thrift.Type.STRING, 2);
    output.writeString(this.stateChangeReason);
    output.writeFieldEnd();
  }
  if (this.timeline !== null && this.timeline !== undefined) {
    output.writeFieldBegin('timeline', Thrift.Type.STRUCT, 3);
    this.timeline.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InstanceTypeInfo = function(args) {
  this.name = null;
  this.cpu = null;
  this.ram = null;
  this.disk = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.cpu !== undefined) {
      this.cpu = args.cpu;
    }
    if (args.ram !== undefined) {
      this.ram = args.ram;
    }
    if (args.disk !== undefined) {
      this.disk = args.disk;
    }
  }
};
InstanceTypeInfo.prototype = {};
InstanceTypeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.cpu = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ram = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.disk = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InstanceTypeInfo.prototype.write = function(output) {
  output.writeStructBegin('InstanceTypeInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.cpu !== null && this.cpu !== undefined) {
    output.writeFieldBegin('cpu', Thrift.Type.I32, 2);
    output.writeI32(this.cpu);
    output.writeFieldEnd();
  }
  if (this.ram !== null && this.ram !== undefined) {
    output.writeFieldBegin('ram', Thrift.Type.I32, 3);
    output.writeI32(this.ram);
    output.writeFieldEnd();
  }
  if (this.disk !== null && this.disk !== undefined) {
    output.writeFieldBegin('disk', Thrift.Type.I32, 4);
    output.writeI32(this.disk);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMRUser = function(args) {
  this.developerId = null;
  this.clusterIds = null;
  if (args) {
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
    if (args.clusterIds !== undefined) {
      this.clusterIds = args.clusterIds;
    }
  }
};
EMRUser.prototype = {};
EMRUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.clusterIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.clusterIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMRUser.prototype.write = function(output) {
  output.writeStructBegin('EMRUser');
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 1);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  if (this.clusterIds !== null && this.clusterIds !== undefined) {
    output.writeFieldBegin('clusterIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.clusterIds.length);
    for (var iter7 in this.clusterIds)
    {
      if (this.clusterIds.hasOwnProperty(iter7))
      {
        iter7 = this.clusterIds[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateClusterRequest = function(args) {
  this.name = null;
  this.autoTerminate = false;
  this.terminationProtected = true;
  this.region = null;
  this.purpose = null;
  this.keyPair = null;
  this.addInstanceGroupRequests = null;
  this.submitJobRequests = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.autoTerminate !== undefined) {
      this.autoTerminate = args.autoTerminate;
    }
    if (args.terminationProtected !== undefined) {
      this.terminationProtected = args.terminationProtected;
    }
    if (args.region !== undefined) {
      this.region = args.region;
    }
    if (args.purpose !== undefined) {
      this.purpose = args.purpose;
    }
    if (args.keyPair !== undefined) {
      this.keyPair = args.keyPair;
    }
    if (args.addInstanceGroupRequests !== undefined) {
      this.addInstanceGroupRequests = args.addInstanceGroupRequests;
    }
    if (args.submitJobRequests !== undefined) {
      this.submitJobRequests = args.submitJobRequests;
    }
  }
};
CreateClusterRequest.prototype = {};
CreateClusterRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.autoTerminate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.terminationProtected = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.purpose = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.keyPair = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.addInstanceGroupRequests = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new AddInstanceGroupRequest();
          elem14.read(input);
          this.addInstanceGroupRequests.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.submitJobRequests = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new SubmitJobRequest();
          elem21.read(input);
          this.submitJobRequests.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateClusterRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateClusterRequest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.autoTerminate !== null && this.autoTerminate !== undefined) {
    output.writeFieldBegin('autoTerminate', Thrift.Type.BOOL, 2);
    output.writeBool(this.autoTerminate);
    output.writeFieldEnd();
  }
  if (this.terminationProtected !== null && this.terminationProtected !== undefined) {
    output.writeFieldBegin('terminationProtected', Thrift.Type.BOOL, 3);
    output.writeBool(this.terminationProtected);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 4);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.purpose !== null && this.purpose !== undefined) {
    output.writeFieldBegin('purpose', Thrift.Type.STRING, 5);
    output.writeString(this.purpose);
    output.writeFieldEnd();
  }
  if (this.keyPair !== null && this.keyPair !== undefined) {
    output.writeFieldBegin('keyPair', Thrift.Type.STRING, 6);
    output.writeString(this.keyPair);
    output.writeFieldEnd();
  }
  if (this.addInstanceGroupRequests !== null && this.addInstanceGroupRequests !== undefined) {
    output.writeFieldBegin('addInstanceGroupRequests', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.addInstanceGroupRequests.length);
    for (var iter22 in this.addInstanceGroupRequests)
    {
      if (this.addInstanceGroupRequests.hasOwnProperty(iter22))
      {
        iter22 = this.addInstanceGroupRequests[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.submitJobRequests !== null && this.submitJobRequests !== undefined) {
    output.writeFieldBegin('submitJobRequests', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.submitJobRequests.length);
    for (var iter23 in this.submitJobRequests)
    {
      if (this.submitJobRequests.hasOwnProperty(iter23))
      {
        iter23 = this.submitJobRequests[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateClusterResponse = function(args) {
  this.clusterId = null;
  this.name = null;
  this.addInstanceGroupResponses = null;
  this.submitJobResponses = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clusterId is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.addInstanceGroupResponses !== undefined) {
      this.addInstanceGroupResponses = args.addInstanceGroupResponses;
    }
    if (args.submitJobResponses !== undefined) {
      this.submitJobResponses = args.submitJobResponses;
    }
  }
};
CreateClusterResponse.prototype = {};
CreateClusterResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.addInstanceGroupResponses = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new AddInstanceGroupResponse();
          elem30.read(input);
          this.addInstanceGroupResponses.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.submitJobResponses = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new SubmitJobResponse();
          elem37.read(input);
          this.submitJobResponses.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateClusterResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateClusterResponse');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.addInstanceGroupResponses !== null && this.addInstanceGroupResponses !== undefined) {
    output.writeFieldBegin('addInstanceGroupResponses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.addInstanceGroupResponses.length);
    for (var iter38 in this.addInstanceGroupResponses)
    {
      if (this.addInstanceGroupResponses.hasOwnProperty(iter38))
      {
        iter38 = this.addInstanceGroupResponses[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.submitJobResponses !== null && this.submitJobResponses !== undefined) {
    output.writeFieldBegin('submitJobResponses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.submitJobResponses.length);
    for (var iter39 in this.submitJobResponses)
    {
      if (this.submitJobResponses.hasOwnProperty(iter39))
      {
        iter39 = this.submitJobResponses[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddInstanceGroupRequest = function(args) {
  this.name = null;
  this.clusterId = null;
  this.role = null;
  this.instanceType = null;
  this.requestedInstanceCount = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
    if (args.role !== undefined) {
      this.role = args.role;
    }
    if (args.instanceType !== undefined) {
      this.instanceType = args.instanceType;
    }
    if (args.requestedInstanceCount !== undefined) {
      this.requestedInstanceCount = args.requestedInstanceCount;
    }
  }
};
AddInstanceGroupRequest.prototype = {};
AddInstanceGroupRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.instanceType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.requestedInstanceCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddInstanceGroupRequest.prototype.write = function(output) {
  output.writeStructBegin('AddInstanceGroupRequest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 2);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 3);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  if (this.instanceType !== null && this.instanceType !== undefined) {
    output.writeFieldBegin('instanceType', Thrift.Type.STRING, 4);
    output.writeString(this.instanceType);
    output.writeFieldEnd();
  }
  if (this.requestedInstanceCount !== null && this.requestedInstanceCount !== undefined) {
    output.writeFieldBegin('requestedInstanceCount', Thrift.Type.I32, 5);
    output.writeI32(this.requestedInstanceCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddInstanceGroupResponse = function(args) {
  this.instanceGroupId = null;
  this.name = null;
  this.clusterId = null;
  if (args) {
    if (args.instanceGroupId !== undefined) {
      this.instanceGroupId = args.instanceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field instanceGroupId is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clusterId is unset!');
    }
  }
};
AddInstanceGroupResponse.prototype = {};
AddInstanceGroupResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddInstanceGroupResponse.prototype.write = function(output) {
  output.writeStructBegin('AddInstanceGroupResponse');
  if (this.instanceGroupId !== null && this.instanceGroupId !== undefined) {
    output.writeFieldBegin('instanceGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceGroupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 3);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubmitJobRequest = function(args) {
  this.name = null;
  this.clusterId = null;
  this.jar = null;
  this.jarMainClass = null;
  this.jarArgs = null;
  this.jarProperties = null;
  this.actionOnFailure = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    }
    if (args.jar !== undefined) {
      this.jar = args.jar;
    }
    if (args.jarMainClass !== undefined) {
      this.jarMainClass = args.jarMainClass;
    }
    if (args.jarArgs !== undefined) {
      this.jarArgs = args.jarArgs;
    }
    if (args.jarProperties !== undefined) {
      this.jarProperties = args.jarProperties;
    }
    if (args.actionOnFailure !== undefined) {
      this.actionOnFailure = args.actionOnFailure;
    }
  }
};
SubmitJobRequest.prototype = {};
SubmitJobRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jar = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.jarMainClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.jarArgs = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString().value;
          this.jarArgs.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size47 = 0;
        var _rtmp351;
        this.jarProperties = {};
        var _ktype48 = 0;
        var _vtype49 = 0;
        _rtmp351 = input.readMapBegin();
        _ktype48 = _rtmp351.ktype;
        _vtype49 = _rtmp351.vtype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          if (_i52 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key53 = null;
          var val54 = null;
          key53 = input.readString().value;
          val54 = input.readString().value;
          this.jarProperties[key53] = val54;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.actionOnFailure = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubmitJobRequest.prototype.write = function(output) {
  output.writeStructBegin('SubmitJobRequest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 2);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.jar !== null && this.jar !== undefined) {
    output.writeFieldBegin('jar', Thrift.Type.STRING, 3);
    output.writeString(this.jar);
    output.writeFieldEnd();
  }
  if (this.jarMainClass !== null && this.jarMainClass !== undefined) {
    output.writeFieldBegin('jarMainClass', Thrift.Type.STRING, 4);
    output.writeString(this.jarMainClass);
    output.writeFieldEnd();
  }
  if (this.jarArgs !== null && this.jarArgs !== undefined) {
    output.writeFieldBegin('jarArgs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.jarArgs.length);
    for (var iter55 in this.jarArgs)
    {
      if (this.jarArgs.hasOwnProperty(iter55))
      {
        iter55 = this.jarArgs[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.jarProperties !== null && this.jarProperties !== undefined) {
    output.writeFieldBegin('jarProperties', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.jarProperties));
    for (var kiter56 in this.jarProperties)
    {
      if (this.jarProperties.hasOwnProperty(kiter56))
      {
        var viter57 = this.jarProperties[kiter56];
        output.writeString(kiter56);
        output.writeString(viter57);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.actionOnFailure !== null && this.actionOnFailure !== undefined) {
    output.writeFieldBegin('actionOnFailure', Thrift.Type.I32, 7);
    output.writeI32(this.actionOnFailure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubmitJobResponse = function(args) {
  this.jobId = null;
  this.name = null;
  this.clusterId = null;
  if (args) {
    if (args.jobId !== undefined) {
      this.jobId = args.jobId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field jobId is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clusterId is unset!');
    }
  }
};
SubmitJobResponse.prototype = {};
SubmitJobResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubmitJobResponse.prototype.write = function(output) {
  output.writeStructBegin('SubmitJobResponse');
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 1);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 3);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TerminateClusterRequest = function(args) {
  this.clusterId = null;
  this.force = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clusterId is unset!');
    }
    if (args.force !== undefined) {
      this.force = args.force;
    }
  }
};
TerminateClusterRequest.prototype = {};
TerminateClusterRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.force = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TerminateClusterRequest.prototype.write = function(output) {
  output.writeStructBegin('TerminateClusterRequest');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.force !== null && this.force !== undefined) {
    output.writeFieldBegin('force', Thrift.Type.BOOL, 2);
    output.writeBool(this.force);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModifyInstanceGroupRequest = function(args) {
  this.instanceGroupId = null;
  this.requestedInstanceCount = null;
  if (args) {
    if (args.instanceGroupId !== undefined) {
      this.instanceGroupId = args.instanceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field instanceGroupId is unset!');
    }
    if (args.requestedInstanceCount !== undefined) {
      this.requestedInstanceCount = args.requestedInstanceCount;
    }
  }
};
ModifyInstanceGroupRequest.prototype = {};
ModifyInstanceGroupRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.requestedInstanceCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyInstanceGroupRequest.prototype.write = function(output) {
  output.writeStructBegin('ModifyInstanceGroupRequest');
  if (this.instanceGroupId !== null && this.instanceGroupId !== undefined) {
    output.writeFieldBegin('instanceGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceGroupId);
    output.writeFieldEnd();
  }
  if (this.requestedInstanceCount !== null && this.requestedInstanceCount !== undefined) {
    output.writeFieldBegin('requestedInstanceCount', Thrift.Type.I32, 2);
    output.writeI32(this.requestedInstanceCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModifyInstanceGroupResponse = function(args) {
};
ModifyInstanceGroupResponse.prototype = {};
ModifyInstanceGroupResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyInstanceGroupResponse.prototype.write = function(output) {
  output.writeStructBegin('ModifyInstanceGroupResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KillJobRequest = function(args) {
  this.jobId = null;
  this.clusterId = null;
  if (args) {
    if (args.jobId !== undefined) {
      this.jobId = args.jobId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field jobId is unset!');
    }
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clusterId is unset!');
    }
  }
};
KillJobRequest.prototype = {};
KillJobRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KillJobRequest.prototype.write = function(output) {
  output.writeStructBegin('KillJobRequest');
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 1);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 2);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClusterDetail = function(args) {
  this.clusterId = null;
  this.name = null;
  this.region = null;
  this.purpose = null;
  this.keyPair = null;
  this.autoTerminate = null;
  this.terminationProtected = null;
  this.instanceGroups = null;
  this.masterPublicDnsName = null;
  this.clusterStatus = null;
  if (args) {
    if (args.clusterId !== undefined) {
      this.clusterId = args.clusterId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clusterId is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.region !== undefined) {
      this.region = args.region;
    }
    if (args.purpose !== undefined) {
      this.purpose = args.purpose;
    }
    if (args.keyPair !== undefined) {
      this.keyPair = args.keyPair;
    }
    if (args.autoTerminate !== undefined) {
      this.autoTerminate = args.autoTerminate;
    }
    if (args.terminationProtected !== undefined) {
      this.terminationProtected = args.terminationProtected;
    }
    if (args.instanceGroups !== undefined) {
      this.instanceGroups = args.instanceGroups;
    }
    if (args.masterPublicDnsName !== undefined) {
      this.masterPublicDnsName = args.masterPublicDnsName;
    }
    if (args.clusterStatus !== undefined) {
      this.clusterStatus = args.clusterStatus;
    }
  }
};
ClusterDetail.prototype = {};
ClusterDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.purpose = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.keyPair = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.autoTerminate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.terminationProtected = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.instanceGroups = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = new InstanceGroupDetail();
          elem64.read(input);
          this.instanceGroups.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.masterPublicDnsName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.clusterStatus = new Status();
        this.clusterStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClusterDetail.prototype.write = function(output) {
  output.writeStructBegin('ClusterDetail');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 3);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.purpose !== null && this.purpose !== undefined) {
    output.writeFieldBegin('purpose', Thrift.Type.STRING, 4);
    output.writeString(this.purpose);
    output.writeFieldEnd();
  }
  if (this.keyPair !== null && this.keyPair !== undefined) {
    output.writeFieldBegin('keyPair', Thrift.Type.STRING, 5);
    output.writeString(this.keyPair);
    output.writeFieldEnd();
  }
  if (this.autoTerminate !== null && this.autoTerminate !== undefined) {
    output.writeFieldBegin('autoTerminate', Thrift.Type.BOOL, 6);
    output.writeBool(this.autoTerminate);
    output.writeFieldEnd();
  }
  if (this.terminationProtected !== null && this.terminationProtected !== undefined) {
    output.writeFieldBegin('terminationProtected', Thrift.Type.BOOL, 7);
    output.writeBool(this.terminationProtected);
    output.writeFieldEnd();
  }
  if (this.instanceGroups !== null && this.instanceGroups !== undefined) {
    output.writeFieldBegin('instanceGroups', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.instanceGroups.length);
    for (var iter65 in this.instanceGroups)
    {
      if (this.instanceGroups.hasOwnProperty(iter65))
      {
        iter65 = this.instanceGroups[iter65];
        iter65.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.masterPublicDnsName !== null && this.masterPublicDnsName !== undefined) {
    output.writeFieldBegin('masterPublicDnsName', Thrift.Type.STRING, 9);
    output.writeString(this.masterPublicDnsName);
    output.writeFieldEnd();
  }
  if (this.clusterStatus !== null && this.clusterStatus !== undefined) {
    output.writeFieldBegin('clusterStatus', Thrift.Type.STRUCT, 10);
    this.clusterStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InstanceGroupDetail = function(args) {
  this.groupId = null;
  this.name = null;
  this.role = null;
  this.instanceType = null;
  this.requestedInstanceCount = null;
  this.runningInstanceCount = null;
  this.instanceStatus = null;
  if (args) {
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field groupId is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.role !== undefined) {
      this.role = args.role;
    }
    if (args.instanceType !== undefined) {
      this.instanceType = args.instanceType;
    }
    if (args.requestedInstanceCount !== undefined) {
      this.requestedInstanceCount = args.requestedInstanceCount;
    }
    if (args.runningInstanceCount !== undefined) {
      this.runningInstanceCount = args.runningInstanceCount;
    }
    if (args.instanceStatus !== undefined) {
      this.instanceStatus = args.instanceStatus;
    }
  }
};
InstanceGroupDetail.prototype = {};
InstanceGroupDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.instanceType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.requestedInstanceCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.runningInstanceCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.instanceStatus = new Status();
        this.instanceStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InstanceGroupDetail.prototype.write = function(output) {
  output.writeStructBegin('InstanceGroupDetail');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 3);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  if (this.instanceType !== null && this.instanceType !== undefined) {
    output.writeFieldBegin('instanceType', Thrift.Type.STRING, 4);
    output.writeString(this.instanceType);
    output.writeFieldEnd();
  }
  if (this.requestedInstanceCount !== null && this.requestedInstanceCount !== undefined) {
    output.writeFieldBegin('requestedInstanceCount', Thrift.Type.I32, 5);
    output.writeI32(this.requestedInstanceCount);
    output.writeFieldEnd();
  }
  if (this.runningInstanceCount !== null && this.runningInstanceCount !== undefined) {
    output.writeFieldBegin('runningInstanceCount', Thrift.Type.I32, 6);
    output.writeI32(this.runningInstanceCount);
    output.writeFieldEnd();
  }
  if (this.instanceStatus !== null && this.instanceStatus !== undefined) {
    output.writeFieldBegin('instanceStatus', Thrift.Type.STRUCT, 7);
    this.instanceStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InstanceDetail = function(args) {
  this.instanceId = null;
  this.osInstanceId = null;
  this.name = null;
  this.instanceType = null;
  this.privateIpAddress = null;
  this.publicIpAddress = null;
  this.privateDnsName = null;
  this.publicDnsName = null;
  this.instanceStatus = null;
  if (args) {
    if (args.instanceId !== undefined) {
      this.instanceId = args.instanceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field instanceId is unset!');
    }
    if (args.osInstanceId !== undefined) {
      this.osInstanceId = args.osInstanceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field osInstanceId is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.instanceType !== undefined) {
      this.instanceType = args.instanceType;
    }
    if (args.privateIpAddress !== undefined) {
      this.privateIpAddress = args.privateIpAddress;
    }
    if (args.publicIpAddress !== undefined) {
      this.publicIpAddress = args.publicIpAddress;
    }
    if (args.privateDnsName !== undefined) {
      this.privateDnsName = args.privateDnsName;
    }
    if (args.publicDnsName !== undefined) {
      this.publicDnsName = args.publicDnsName;
    }
    if (args.instanceStatus !== undefined) {
      this.instanceStatus = args.instanceStatus;
    }
  }
};
InstanceDetail.prototype = {};
InstanceDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.osInstanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.instanceType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.privateIpAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.publicIpAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.privateDnsName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.publicDnsName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.instanceStatus = new Status();
        this.instanceStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InstanceDetail.prototype.write = function(output) {
  output.writeStructBegin('InstanceDetail');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.osInstanceId !== null && this.osInstanceId !== undefined) {
    output.writeFieldBegin('osInstanceId', Thrift.Type.STRING, 2);
    output.writeString(this.osInstanceId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.instanceType !== null && this.instanceType !== undefined) {
    output.writeFieldBegin('instanceType', Thrift.Type.STRING, 4);
    output.writeString(this.instanceType);
    output.writeFieldEnd();
  }
  if (this.privateIpAddress !== null && this.privateIpAddress !== undefined) {
    output.writeFieldBegin('privateIpAddress', Thrift.Type.STRING, 5);
    output.writeString(this.privateIpAddress);
    output.writeFieldEnd();
  }
  if (this.publicIpAddress !== null && this.publicIpAddress !== undefined) {
    output.writeFieldBegin('publicIpAddress', Thrift.Type.STRING, 6);
    output.writeString(this.publicIpAddress);
    output.writeFieldEnd();
  }
  if (this.privateDnsName !== null && this.privateDnsName !== undefined) {
    output.writeFieldBegin('privateDnsName', Thrift.Type.STRING, 7);
    output.writeString(this.privateDnsName);
    output.writeFieldEnd();
  }
  if (this.publicDnsName !== null && this.publicDnsName !== undefined) {
    output.writeFieldBegin('publicDnsName', Thrift.Type.STRING, 8);
    output.writeString(this.publicDnsName);
    output.writeFieldEnd();
  }
  if (this.instanceStatus !== null && this.instanceStatus !== undefined) {
    output.writeFieldBegin('instanceStatus', Thrift.Type.STRUCT, 9);
    this.instanceStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JobDetail = function(args) {
  this.jobId = null;
  this.name = null;
  this.jar = null;
  this.jarMainClass = null;
  this.jarArgs = null;
  this.jarProperties = null;
  this.jobStatus = null;
  if (args) {
    if (args.jobId !== undefined) {
      this.jobId = args.jobId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field jobId is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.jar !== undefined) {
      this.jar = args.jar;
    }
    if (args.jarMainClass !== undefined) {
      this.jarMainClass = args.jarMainClass;
    }
    if (args.jarArgs !== undefined) {
      this.jarArgs = args.jarArgs;
    }
    if (args.jarProperties !== undefined) {
      this.jarProperties = args.jarProperties;
    }
    if (args.jobStatus !== undefined) {
      this.jobStatus = args.jobStatus;
    }
  }
};
JobDetail.prototype = {};
JobDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jar = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.jarMainClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.jarArgs = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = input.readString().value;
          this.jarArgs.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size73 = 0;
        var _rtmp377;
        this.jarProperties = {};
        var _ktype74 = 0;
        var _vtype75 = 0;
        _rtmp377 = input.readMapBegin();
        _ktype74 = _rtmp377.ktype;
        _vtype75 = _rtmp377.vtype;
        _size73 = _rtmp377.size;
        for (var _i78 = 0; _i78 < _size73; ++_i78)
        {
          if (_i78 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key79 = null;
          var val80 = null;
          key79 = input.readString().value;
          val80 = input.readString().value;
          this.jarProperties[key79] = val80;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.jobStatus = new Status();
        this.jobStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JobDetail.prototype.write = function(output) {
  output.writeStructBegin('JobDetail');
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 1);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.jar !== null && this.jar !== undefined) {
    output.writeFieldBegin('jar', Thrift.Type.STRING, 3);
    output.writeString(this.jar);
    output.writeFieldEnd();
  }
  if (this.jarMainClass !== null && this.jarMainClass !== undefined) {
    output.writeFieldBegin('jarMainClass', Thrift.Type.STRING, 4);
    output.writeString(this.jarMainClass);
    output.writeFieldEnd();
  }
  if (this.jarArgs !== null && this.jarArgs !== undefined) {
    output.writeFieldBegin('jarArgs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.jarArgs.length);
    for (var iter81 in this.jarArgs)
    {
      if (this.jarArgs.hasOwnProperty(iter81))
      {
        iter81 = this.jarArgs[iter81];
        output.writeString(iter81);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.jarProperties !== null && this.jarProperties !== undefined) {
    output.writeFieldBegin('jarProperties', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.jarProperties));
    for (var kiter82 in this.jarProperties)
    {
      if (this.jarProperties.hasOwnProperty(kiter82))
      {
        var viter83 = this.jarProperties[kiter82];
        output.writeString(kiter82);
        output.writeString(viter83);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.jobStatus !== null && this.jobStatus !== undefined) {
    output.writeFieldBegin('jobStatus', Thrift.Type.STRUCT, 7);
    this.jobStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetConfigRequest = function(args) {
  this.cluster = null;
  this.config = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
    if (args.config !== undefined) {
      this.config = args.config;
    }
  }
};
SetConfigRequest.prototype = {};
SetConfigRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.config = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetConfigRequest.prototype.write = function(output) {
  output.writeStructBegin('SetConfigRequest');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRING, 2);
    output.writeString(this.config);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetConfigResponse = function(args) {
  this.succeed = null;
  if (args) {
    if (args.succeed !== undefined) {
      this.succeed = args.succeed;
    }
  }
};
SetConfigResponse.prototype = {};
SetConfigResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.succeed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetConfigResponse.prototype.write = function(output) {
  output.writeStructBegin('SetConfigResponse');
  if (this.succeed !== null && this.succeed !== undefined) {
    output.writeFieldBegin('succeed', Thrift.Type.BOOL, 1);
    output.writeBool(this.succeed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StartServiceRequest = function(args) {
  this.cluster = null;
  this.services = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
    if (args.services !== undefined) {
      this.services = args.services;
    }
  }
};
StartServiceRequest.prototype = {};
StartServiceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.services = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readString().value;
          this.services.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartServiceRequest.prototype.write = function(output) {
  output.writeStructBegin('StartServiceRequest');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  if (this.services !== null && this.services !== undefined) {
    output.writeFieldBegin('services', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.services.length);
    for (var iter91 in this.services)
    {
      if (this.services.hasOwnProperty(iter91))
      {
        iter91 = this.services[iter91];
        output.writeString(iter91);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StartServiceResponse = function(args) {
  this.succeed = null;
  if (args) {
    if (args.succeed !== undefined) {
      this.succeed = args.succeed;
    }
  }
};
StartServiceResponse.prototype = {};
StartServiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.succeed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartServiceResponse.prototype.write = function(output) {
  output.writeStructBegin('StartServiceResponse');
  if (this.succeed !== null && this.succeed !== undefined) {
    output.writeFieldBegin('succeed', Thrift.Type.BOOL, 1);
    output.writeBool(this.succeed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StopServiceRequest = function(args) {
  this.cluster = null;
  this.services = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
    if (args.services !== undefined) {
      this.services = args.services;
    }
  }
};
StopServiceRequest.prototype = {};
StopServiceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.services = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = input.readString().value;
          this.services.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StopServiceRequest.prototype.write = function(output) {
  output.writeStructBegin('StopServiceRequest');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  if (this.services !== null && this.services !== undefined) {
    output.writeFieldBegin('services', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.services.length);
    for (var iter99 in this.services)
    {
      if (this.services.hasOwnProperty(iter99))
      {
        iter99 = this.services[iter99];
        output.writeString(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StopServiceResponse = function(args) {
  this.succeed = null;
  if (args) {
    if (args.succeed !== undefined) {
      this.succeed = args.succeed;
    }
  }
};
StopServiceResponse.prototype = {};
StopServiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.succeed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StopServiceResponse.prototype.write = function(output) {
  output.writeStructBegin('StopServiceResponse');
  if (this.succeed !== null && this.succeed !== undefined) {
    output.writeFieldBegin('succeed', Thrift.Type.BOOL, 1);
    output.writeBool(this.succeed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClusterState = function(args) {
  this.ready = null;
  this.timeline = null;
  this.hostReady = null;
  this.serviceReady = null;
  if (args) {
    if (args.ready !== undefined) {
      this.ready = args.ready;
    }
    if (args.timeline !== undefined) {
      this.timeline = args.timeline;
    }
    if (args.hostReady !== undefined) {
      this.hostReady = args.hostReady;
    }
    if (args.serviceReady !== undefined) {
      this.serviceReady = args.serviceReady;
    }
  }
};
ClusterState.prototype = {};
ClusterState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.ready = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeline = new Timeline();
        this.timeline.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.hostReady = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.serviceReady = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClusterState.prototype.write = function(output) {
  output.writeStructBegin('ClusterState');
  if (this.ready !== null && this.ready !== undefined) {
    output.writeFieldBegin('ready', Thrift.Type.BOOL, 1);
    output.writeBool(this.ready);
    output.writeFieldEnd();
  }
  if (this.timeline !== null && this.timeline !== undefined) {
    output.writeFieldBegin('timeline', Thrift.Type.STRUCT, 2);
    this.timeline.write(output);
    output.writeFieldEnd();
  }
  if (this.hostReady !== null && this.hostReady !== undefined) {
    output.writeFieldBegin('hostReady', Thrift.Type.BOOL, 3);
    output.writeBool(this.hostReady);
    output.writeFieldEnd();
  }
  if (this.serviceReady !== null && this.serviceReady !== undefined) {
    output.writeFieldBegin('serviceReady', Thrift.Type.BOOL, 4);
    output.writeBool(this.serviceReady);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DEFAULT_SERVICE_ENDPOINT = 'http://emr.api.xiaomi.com';
DEFAULT_SECURE_SERVICE_ENDPOINT = 'https://emr.api.xiaomi.com';
API_ROOT_PATH = '/v1/api';
SCHEDULER_SERVICE_PATH = '/v1/api/scheduler';
MASTER_SERVICE_PATH = '/v1/api/master';
