//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AdminService_saveAppInfo_args = function(args) {
  this.appInfo = null;
  if (args) {
    if (args.appInfo !== undefined) {
      this.appInfo = args.appInfo;
    }
  }
};
AdminService_saveAppInfo_args.prototype = {};
AdminService_saveAppInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.appInfo = new AppInfo();
        this.appInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_saveAppInfo_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_saveAppInfo_args');
  if (this.appInfo !== null && this.appInfo !== undefined) {
    output.writeFieldBegin('appInfo', Thrift.Type.STRUCT, 1);
    this.appInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_saveAppInfo_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_saveAppInfo_result.prototype = {};
AdminService_saveAppInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_saveAppInfo_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_saveAppInfo_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAppInfo_args = function(args) {
  this.appId = null;
  if (args) {
    if (args.appId !== undefined) {
      this.appId = args.appId;
    }
  }
};
AdminService_getAppInfo_args.prototype = {};
AdminService_getAppInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAppInfo_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAppInfo_args');
  if (this.appId !== null && this.appId !== undefined) {
    output.writeFieldBegin('appId', Thrift.Type.STRING, 1);
    output.writeString(this.appId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAppInfo_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getAppInfo_result.prototype = {};
AdminService_getAppInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AppInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAppInfo_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAppInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllApps_args = function(args) {
};
AdminService_findAllApps_args.prototype = {};
AdminService_findAllApps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllApps_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllApps_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllApps_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_findAllApps_result.prototype = {};
AdminService_findAllApps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.success = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = new AppInfo();
          elem36.read(input);
          this.success.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllApps_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllApps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter37 in this.success)
    {
      if (this.success.hasOwnProperty(iter37))
      {
        iter37 = this.success[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllTables_args = function(args) {
};
AdminService_findAllTables_args.prototype = {};
AdminService_findAllTables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllTables_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllTables_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllTables_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_findAllTables_result.prototype = {};
AdminService_findAllTables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.success = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new TableInfo();
          elem44.read(input);
          this.success.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllTables_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllTables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter45 in this.success)
    {
      if (this.success.hasOwnProperty(iter45))
      {
        iter45 = this.success[iter45];
        iter45.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createTable_args = function(args) {
  this.tableName = null;
  this.tableSpec = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableSpec !== undefined) {
      this.tableSpec = args.tableSpec;
    }
  }
};
AdminService_createTable_args.prototype = {};
AdminService_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableSpec = new TableSpec();
        this.tableSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableSpec !== null && this.tableSpec !== undefined) {
    output.writeFieldBegin('tableSpec', Thrift.Type.STRUCT, 2);
    this.tableSpec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createTable_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_createTable_result.prototype = {};
AdminService_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_dropTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_dropTable_args.prototype = {};
AdminService_dropTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_dropTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_dropTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_dropTable_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_dropTable_result.prototype = {};
AdminService_dropTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_dropTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_dropTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_lazyDropTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_lazyDropTable_args.prototype = {};
AdminService_lazyDropTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_lazyDropTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_lazyDropTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_lazyDropTable_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_lazyDropTable_result.prototype = {};
AdminService_lazyDropTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_lazyDropTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_lazyDropTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_alterTable_args = function(args) {
  this.tableName = null;
  this.tableSpec = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableSpec !== undefined) {
      this.tableSpec = args.tableSpec;
    }
  }
};
AdminService_alterTable_args.prototype = {};
AdminService_alterTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableSpec = new TableSpec();
        this.tableSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_alterTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_alterTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableSpec !== null && this.tableSpec !== undefined) {
    output.writeFieldBegin('tableSpec', Thrift.Type.STRUCT, 2);
    this.tableSpec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_alterTable_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_alterTable_result.prototype = {};
AdminService_alterTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_alterTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_alterTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_cloneTable_args = function(args) {
  this.srcName = null;
  this.destTable = null;
  this.flushTable = null;
  if (args) {
    if (args.srcName !== undefined) {
      this.srcName = args.srcName;
    }
    if (args.destTable !== undefined) {
      this.destTable = args.destTable;
    }
    if (args.flushTable !== undefined) {
      this.flushTable = args.flushTable;
    }
  }
};
AdminService_cloneTable_args.prototype = {};
AdminService_cloneTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.srcName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destTable = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.flushTable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_cloneTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_cloneTable_args');
  if (this.srcName !== null && this.srcName !== undefined) {
    output.writeFieldBegin('srcName', Thrift.Type.STRING, 1);
    output.writeString(this.srcName);
    output.writeFieldEnd();
  }
  if (this.destTable !== null && this.destTable !== undefined) {
    output.writeFieldBegin('destTable', Thrift.Type.STRING, 2);
    output.writeString(this.destTable);
    output.writeFieldEnd();
  }
  if (this.flushTable !== null && this.flushTable !== undefined) {
    output.writeFieldBegin('flushTable', Thrift.Type.BOOL, 3);
    output.writeBool(this.flushTable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_cloneTable_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_cloneTable_result.prototype = {};
AdminService_cloneTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_cloneTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_cloneTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_disableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_disableTable_args.prototype = {};
AdminService_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_disableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_disableTable_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_disableTable_result.prototype = {};
AdminService_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_disableTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_enableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_enableTable_args.prototype = {};
AdminService_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_enableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_enableTable_result = function(args) {
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_enableTable_result.prototype = {};
AdminService_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_enableTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_describeTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_describeTable_args.prototype = {};
AdminService_describeTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_describeTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_describeTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_describeTable_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_describeTable_result.prototype = {};
AdminService_describeTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableSpec();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_describeTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_describeTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableStatus_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_getTableStatus_args.prototype = {};
AdminService_getTableStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableStatus_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableStatus_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableStatus_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getTableStatus_result.prototype = {};
AdminService_getTableStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableStatus_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableState_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_getTableState_args.prototype = {};
AdminService_getTableState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableState_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableState_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableState_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getTableState_result.prototype = {};
AdminService_getTableState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableState_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableSplits_args = function(args) {
  this.tableName = null;
  this.startKey = null;
  this.stopKey = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
  }
};
AdminService_getTableSplits_args.prototype = {};
AdminService_getTableSplits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size46 = 0;
        var _rtmp350;
        this.startKey = {};
        var _ktype47 = 0;
        var _vtype48 = 0;
        _rtmp350 = input.readMapBegin();
        _ktype47 = _rtmp350.ktype;
        _vtype48 = _rtmp350.vtype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          if (_i51 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key52 = null;
          var val53 = null;
          key52 = input.readString().value;
          val53 = new Datum();
          val53.read(input);
          this.startKey[key52] = val53;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size54 = 0;
        var _rtmp358;
        this.stopKey = {};
        var _ktype55 = 0;
        var _vtype56 = 0;
        _rtmp358 = input.readMapBegin();
        _ktype55 = _rtmp358.ktype;
        _vtype56 = _rtmp358.vtype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          if (_i59 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key60 = null;
          var val61 = null;
          key60 = input.readString().value;
          val61 = new Datum();
          val61.read(input);
          this.stopKey[key60] = val61;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableSplits_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableSplits_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter62 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter62))
      {
        var viter63 = this.startKey[kiter62];
        output.writeString(kiter62);
        viter63.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter64 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter64))
      {
        var viter65 = this.stopKey[kiter64];
        output.writeString(kiter64);
        viter65.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableSplits_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getTableSplits_result.prototype = {};
AdminService_getTableSplits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.success = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = new TableSplit();
          elem72.read(input);
          this.success.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableSplits_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableSplits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter73 in this.success)
    {
      if (this.success.hasOwnProperty(iter73))
      {
        iter73 = this.success[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_queryMetric_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
AdminService_queryMetric_args.prototype = {};
AdminService_queryMetric_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new MetricQueryRequest();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_queryMetric_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_queryMetric_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_queryMetric_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_queryMetric_result.prototype = {};
AdminService_queryMetric_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimeSeriesData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_queryMetric_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_queryMetric_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_queryMetrics_args = function(args) {
  this.queries = null;
  if (args) {
    if (args.queries !== undefined) {
      this.queries = args.queries;
    }
  }
};
AdminService_queryMetrics_args.prototype = {};
AdminService_queryMetrics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.queries = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new MetricQueryRequest();
          elem80.read(input);
          this.queries.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_queryMetrics_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_queryMetrics_args');
  if (this.queries !== null && this.queries !== undefined) {
    output.writeFieldBegin('queries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.queries.length);
    for (var iter81 in this.queries)
    {
      if (this.queries.hasOwnProperty(iter81))
      {
        iter81 = this.queries[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_queryMetrics_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_queryMetrics_result.prototype = {};
AdminService_queryMetrics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.success = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = new TimeSeriesData();
          elem88.read(input);
          this.success.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_queryMetrics_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_queryMetrics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter89 in this.success)
    {
      if (this.success.hasOwnProperty(iter89))
      {
        iter89 = this.success[iter89];
        iter89.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(AdminServiceClient, BaseServiceClient);
AdminServiceClient.prototype.saveAppInfo = function(appInfo, callback) {
  if (callback === undefined) {
    this.send_saveAppInfo(appInfo);
    this.recv_saveAppInfo();
  } else {
    var postData = this.send_saveAppInfo(appInfo, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_saveAppInfo);
  }
};

AdminServiceClient.prototype.send_saveAppInfo = function(appInfo, callback) {
  this.output.writeMessageBegin('saveAppInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_saveAppInfo_args();
  args.appInfo = appInfo;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_saveAppInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_saveAppInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
AdminServiceClient.prototype.getAppInfo = function(appId, callback) {
  if (callback === undefined) {
    this.send_getAppInfo(appId);
    return this.recv_getAppInfo();
  } else {
    var postData = this.send_getAppInfo(appId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAppInfo);
  }
};

AdminServiceClient.prototype.send_getAppInfo = function(appId, callback) {
  this.output.writeMessageBegin('getAppInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_getAppInfo_args();
  args.appId = appId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAppInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAppInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAppInfo failed: unknown result';
};
AdminServiceClient.prototype.findAllApps = function(callback) {
  if (callback === undefined) {
    this.send_findAllApps();
    return this.recv_findAllApps();
  } else {
    var postData = this.send_findAllApps(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_findAllApps);
  }
};

AdminServiceClient.prototype.send_findAllApps = function(callback) {
  this.output.writeMessageBegin('findAllApps', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_findAllApps_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_findAllApps = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_findAllApps_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAllApps failed: unknown result';
};
AdminServiceClient.prototype.findAllTables = function(callback) {
  if (callback === undefined) {
    this.send_findAllTables();
    return this.recv_findAllTables();
  } else {
    var postData = this.send_findAllTables(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_findAllTables);
  }
};

AdminServiceClient.prototype.send_findAllTables = function(callback) {
  this.output.writeMessageBegin('findAllTables', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_findAllTables_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_findAllTables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_findAllTables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findAllTables failed: unknown result';
};
AdminServiceClient.prototype.createTable = function(tableName, tableSpec, callback) {
  if (callback === undefined) {
    this.send_createTable(tableName, tableSpec);
    return this.recv_createTable();
  } else {
    var postData = this.send_createTable(tableName, tableSpec, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createTable);
  }
};

AdminServiceClient.prototype.send_createTable = function(tableName, tableSpec, callback) {
  this.output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_createTable_args();
  args.tableName = tableName;
  args.tableSpec = tableSpec;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_createTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_createTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createTable failed: unknown result';
};
AdminServiceClient.prototype.dropTable = function(tableName, callback) {
  if (callback === undefined) {
    this.send_dropTable(tableName);
    this.recv_dropTable();
  } else {
    var postData = this.send_dropTable(tableName, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_dropTable);
  }
};

AdminServiceClient.prototype.send_dropTable = function(tableName, callback) {
  this.output.writeMessageBegin('dropTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_dropTable_args();
  args.tableName = tableName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_dropTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_dropTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
AdminServiceClient.prototype.lazyDropTable = function(tableName, callback) {
  if (callback === undefined) {
    this.send_lazyDropTable(tableName);
    this.recv_lazyDropTable();
  } else {
    var postData = this.send_lazyDropTable(tableName, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_lazyDropTable);
  }
};

AdminServiceClient.prototype.send_lazyDropTable = function(tableName, callback) {
  this.output.writeMessageBegin('lazyDropTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_lazyDropTable_args();
  args.tableName = tableName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_lazyDropTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_lazyDropTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
AdminServiceClient.prototype.alterTable = function(tableName, tableSpec, callback) {
  if (callback === undefined) {
    this.send_alterTable(tableName, tableSpec);
    this.recv_alterTable();
  } else {
    var postData = this.send_alterTable(tableName, tableSpec, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_alterTable);
  }
};

AdminServiceClient.prototype.send_alterTable = function(tableName, tableSpec, callback) {
  this.output.writeMessageBegin('alterTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_alterTable_args();
  args.tableName = tableName;
  args.tableSpec = tableSpec;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_alterTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_alterTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
AdminServiceClient.prototype.cloneTable = function(srcName, destTable, flushTable, callback) {
  if (callback === undefined) {
    this.send_cloneTable(srcName, destTable, flushTable);
    this.recv_cloneTable();
  } else {
    var postData = this.send_cloneTable(srcName, destTable, flushTable, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_cloneTable);
  }
};

AdminServiceClient.prototype.send_cloneTable = function(srcName, destTable, flushTable, callback) {
  this.output.writeMessageBegin('cloneTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_cloneTable_args();
  args.srcName = srcName;
  args.destTable = destTable;
  args.flushTable = flushTable;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_cloneTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_cloneTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
AdminServiceClient.prototype.disableTable = function(tableName, callback) {
  if (callback === undefined) {
    this.send_disableTable(tableName);
    this.recv_disableTable();
  } else {
    var postData = this.send_disableTable(tableName, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_disableTable);
  }
};

AdminServiceClient.prototype.send_disableTable = function(tableName, callback) {
  this.output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_disableTable_args();
  args.tableName = tableName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_disableTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_disableTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
AdminServiceClient.prototype.enableTable = function(tableName, callback) {
  if (callback === undefined) {
    this.send_enableTable(tableName);
    this.recv_enableTable();
  } else {
    var postData = this.send_enableTable(tableName, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_enableTable);
  }
};

AdminServiceClient.prototype.send_enableTable = function(tableName, callback) {
  this.output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_enableTable_args();
  args.tableName = tableName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_enableTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_enableTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};
AdminServiceClient.prototype.describeTable = function(tableName, callback) {
  if (callback === undefined) {
    this.send_describeTable(tableName);
    return this.recv_describeTable();
  } else {
    var postData = this.send_describeTable(tableName, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_describeTable);
  }
};

AdminServiceClient.prototype.send_describeTable = function(tableName, callback) {
  this.output.writeMessageBegin('describeTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_describeTable_args();
  args.tableName = tableName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_describeTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_describeTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describeTable failed: unknown result';
};
AdminServiceClient.prototype.getTableStatus = function(tableName, callback) {
  if (callback === undefined) {
    this.send_getTableStatus(tableName);
    return this.recv_getTableStatus();
  } else {
    var postData = this.send_getTableStatus(tableName, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTableStatus);
  }
};

AdminServiceClient.prototype.send_getTableStatus = function(tableName, callback) {
  this.output.writeMessageBegin('getTableStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_getTableStatus_args();
  args.tableName = tableName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getTableStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getTableStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTableStatus failed: unknown result';
};
AdminServiceClient.prototype.getTableState = function(tableName, callback) {
  if (callback === undefined) {
    this.send_getTableState(tableName);
    return this.recv_getTableState();
  } else {
    var postData = this.send_getTableState(tableName, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTableState);
  }
};

AdminServiceClient.prototype.send_getTableState = function(tableName, callback) {
  this.output.writeMessageBegin('getTableState', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_getTableState_args();
  args.tableName = tableName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getTableState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getTableState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTableState failed: unknown result';
};
AdminServiceClient.prototype.getTableSplits = function(tableName, startKey, stopKey, callback) {
  if (callback === undefined) {
    this.send_getTableSplits(tableName, startKey, stopKey);
    return this.recv_getTableSplits();
  } else {
    var postData = this.send_getTableSplits(tableName, startKey, stopKey, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTableSplits);
  }
};

AdminServiceClient.prototype.send_getTableSplits = function(tableName, startKey, stopKey, callback) {
  this.output.writeMessageBegin('getTableSplits', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_getTableSplits_args();
  args.tableName = tableName;
  args.startKey = startKey;
  args.stopKey = stopKey;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getTableSplits = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getTableSplits_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTableSplits failed: unknown result';
};
AdminServiceClient.prototype.queryMetric = function(query, callback) {
  if (callback === undefined) {
    this.send_queryMetric(query);
    return this.recv_queryMetric();
  } else {
    var postData = this.send_queryMetric(query, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_queryMetric);
  }
};

AdminServiceClient.prototype.send_queryMetric = function(query, callback) {
  this.output.writeMessageBegin('queryMetric', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_queryMetric_args();
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_queryMetric = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_queryMetric_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryMetric failed: unknown result';
};
AdminServiceClient.prototype.queryMetrics = function(queries, callback) {
  if (callback === undefined) {
    this.send_queryMetrics(queries);
    return this.recv_queryMetrics();
  } else {
    var postData = this.send_queryMetrics(queries, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_queryMetrics);
  }
};

AdminServiceClient.prototype.send_queryMetrics = function(queries, callback) {
  this.output.writeMessageBegin('queryMetrics', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_queryMetrics_args();
  args.queries = queries;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_queryMetrics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_queryMetrics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryMetrics failed: unknown result';
};
