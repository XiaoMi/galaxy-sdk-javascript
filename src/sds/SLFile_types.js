//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SLFileType = {
  'DATUM_MAP' : 1,
  'RC_BASIC' : 2
};
DatumMapMeta = function(args) {
  this.keyIdMap = null;
  if (args) {
    if (args.keyIdMap !== undefined) {
      this.keyIdMap = args.keyIdMap;
    }
  }
};
DatumMapMeta.prototype = {};
DatumMapMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.keyIdMap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readI16().value;
          val7 = input.readString().value;
          this.keyIdMap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DatumMapMeta.prototype.write = function(output) {
  output.writeStructBegin('DatumMapMeta');
  if (this.keyIdMap !== null && this.keyIdMap !== undefined) {
    output.writeFieldBegin('keyIdMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I16, Thrift.Type.STRING, Thrift.objectLength(this.keyIdMap));
    for (var kiter8 in this.keyIdMap)
    {
      if (this.keyIdMap.hasOwnProperty(kiter8))
      {
        var viter9 = this.keyIdMap[kiter8];
        output.writeI16(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RCBasicMeta = function(args) {
  this.keys = null;
  this.types = null;
  if (args) {
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.types !== undefined) {
      this.types = args.types;
    }
  }
};
RCBasicMeta.prototype = {};
RCBasicMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.keys = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString().value;
          this.keys.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size17 = 0;
        var _rtmp321;
        this.types = {};
        var _ktype18 = 0;
        var _vtype19 = 0;
        _rtmp321 = input.readMapBegin();
        _ktype18 = _rtmp321.ktype;
        _vtype19 = _rtmp321.vtype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          if (_i22 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key23 = null;
          var val24 = null;
          key23 = input.readString().value;
          val24 = input.readI32().value;
          this.types[key23] = val24;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RCBasicMeta.prototype.write = function(output) {
  output.writeStructBegin('RCBasicMeta');
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter25 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter25))
      {
        iter25 = this.keys[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.types));
    for (var kiter26 in this.types)
    {
      if (this.types.hasOwnProperty(kiter26))
      {
        var viter27 = this.types[kiter26];
        output.writeString(kiter26);
        output.writeI32(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RCBasicRowGroupHeader = function(args) {
  this.count = null;
  this.offset = null;
  if (args) {
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
  }
};
RCBasicRowGroupHeader.prototype = {};
RCBasicRowGroupHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.offset = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readI32().value;
          this.offset.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RCBasicRowGroupHeader.prototype.write = function(output) {
  output.writeStructBegin('RCBasicRowGroupHeader');
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 1);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.offset.length);
    for (var iter35 in this.offset)
    {
      if (this.offset.hasOwnProperty(iter35))
      {
        iter35 = this.offset[iter35];
        output.writeI32(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SLFileMeta = function(args) {
  this.type = null;
  this.datumMapMeta = null;
  this.rcBasicMeta = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.datumMapMeta !== undefined) {
      this.datumMapMeta = args.datumMapMeta;
    }
    if (args.rcBasicMeta !== undefined) {
      this.rcBasicMeta = args.rcBasicMeta;
    }
  }
};
SLFileMeta.prototype = {};
SLFileMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.datumMapMeta = new DatumMapMeta();
        this.datumMapMeta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.rcBasicMeta = new RCBasicMeta();
        this.rcBasicMeta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SLFileMeta.prototype.write = function(output) {
  output.writeStructBegin('SLFileMeta');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.datumMapMeta !== null && this.datumMapMeta !== undefined) {
    output.writeFieldBegin('datumMapMeta', Thrift.Type.STRUCT, 2);
    this.datumMapMeta.write(output);
    output.writeFieldEnd();
  }
  if (this.rcBasicMeta !== null && this.rcBasicMeta !== undefined) {
    output.writeFieldBegin('rcBasicMeta', Thrift.Type.STRUCT, 3);
    this.rcBasicMeta.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DatumMapRecord = function(args) {
  this.data = null;
  this.keyIdMap = null;
  if (args) {
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.keyIdMap !== undefined) {
      this.keyIdMap = args.keyIdMap;
    }
  }
};
DatumMapRecord.prototype = {};
DatumMapRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size36 = 0;
        var _rtmp340;
        this.data = {};
        var _ktype37 = 0;
        var _vtype38 = 0;
        _rtmp340 = input.readMapBegin();
        _ktype37 = _rtmp340.ktype;
        _vtype38 = _rtmp340.vtype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          if (_i41 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key42 = null;
          var val43 = null;
          key42 = input.readI16().value;
          val43 = new Datum();
          val43.read(input);
          this.data[key42] = val43;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size44 = 0;
        var _rtmp348;
        this.keyIdMap = {};
        var _ktype45 = 0;
        var _vtype46 = 0;
        _rtmp348 = input.readMapBegin();
        _ktype45 = _rtmp348.ktype;
        _vtype46 = _rtmp348.vtype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          if (_i49 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key50 = null;
          var val51 = null;
          key50 = input.readI16().value;
          val51 = input.readString().value;
          this.keyIdMap[key50] = val51;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DatumMapRecord.prototype.write = function(output) {
  output.writeStructBegin('DatumMapRecord');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I16, Thrift.Type.STRUCT, Thrift.objectLength(this.data));
    for (var kiter52 in this.data)
    {
      if (this.data.hasOwnProperty(kiter52))
      {
        var viter53 = this.data[kiter52];
        output.writeI16(kiter52);
        viter53.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.keyIdMap !== null && this.keyIdMap !== undefined) {
    output.writeFieldBegin('keyIdMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I16, Thrift.Type.STRING, Thrift.objectLength(this.keyIdMap));
    for (var kiter54 in this.keyIdMap)
    {
      if (this.keyIdMap.hasOwnProperty(kiter54))
      {
        var viter55 = this.keyIdMap[kiter54];
        output.writeI16(kiter54);
        output.writeString(viter55);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ValueList = function(args) {
  this.values = null;
  if (args) {
    if (args.values !== undefined) {
      this.values = args.values;
    }
  }
};
ValueList.prototype = {};
ValueList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.values = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new Value();
          elem62.read(input);
          this.values.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValueList.prototype.write = function(output) {
  output.writeStructBegin('ValueList');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter63 in this.values)
    {
      if (this.values.hasOwnProperty(iter63))
      {
        iter63 = this.values[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

