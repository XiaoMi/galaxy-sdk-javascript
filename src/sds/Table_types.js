//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


DataType = {
  'BOOL' : 1,
  'INT8' : 2,
  'INT16' : 3,
  'INT32' : 4,
  'INT64' : 5,
  'FLOAT' : 6,
  'DOUBLE' : 7,
  'STRING' : 8,
  'BINARY' : 9,
  'RAWBINARY' : 10,
  'BOOL_SET' : 100,
  'INT8_SET' : 101,
  'INT16_SET' : 102,
  'INT32_SET' : 103,
  'INT64_SET' : 104,
  'FLOAT_SET' : 105,
  'DOUBLE_SET' : 106,
  'STRING_SET' : 107,
  'BINARY_SET' : 108
};
OperatorType = {
  'EQUAL' : 1,
  'NOT_EQUAL' : 2,
  'GREATER' : 3,
  'GREATER_OR_EQUAL' : 4,
  'LESS' : 5,
  'LESS_OR_EQUAL' : 6
};
SecondaryIndexConsistencyMode = {
  'LAZY' : 0,
  'EAGER' : 1,
  'IMMUTABLE' : 2
};
CannedAcl = {
  'APP_SECRET_READ' : 1,
  'APP_SECRET_WRITE' : 2,
  'APP_USER_ENTITY_GROUP_READ' : 3,
  'APP_USER_ENTITY_GROUP_WRITE' : 4,
  'APP_USER_READ' : 5,
  'APP_USER_WRITE' : 6,
  'PUBLIC_READ' : 7,
  'PUBLIC_WRITE' : 8
};
TableState = {
  'CREATING' : 1,
  'ENABLING' : 2,
  'ENABLED' : 3,
  'DISABLING' : 4,
  'DISABLED' : 5,
  'DELETING' : 6,
  'DELETED' : 7,
  'LAZY_DELETE' : 8,
  'RENAMING' : 9
};
SnapshotState = {
  'ENABLED' : 1,
  'INPROGRESS' : 2
};
ScanOp = {
  'COUNT' : 0,
  'DELETE' : 1,
  'UPDATE' : 2
};
BatchOp = {
  'GET' : 1,
  'PUT' : 2,
  'INCREMENT' : 3,
  'REMOVE' : 4
};
EditType = {
  'PUT' : 1,
  'DELETE' : 2
};
Value = function(args) {
  this.boolValue = null;
  this.int8Value = null;
  this.int16Value = null;
  this.int32Value = null;
  this.int64Value = null;
  this.doubleValue = null;
  this.stringValue = null;
  this.binaryValue = null;
  this.boolSetValue = null;
  this.int8SetValue = null;
  this.int16SetValue = null;
  this.int32SetValue = null;
  this.int64SetValue = null;
  this.doubleSetValue = null;
  this.stringSetValue = null;
  this.binarySetValue = null;
  this.nullValue = null;
  if (args) {
    if (args.boolValue !== undefined) {
      this.boolValue = args.boolValue;
    }
    if (args.int8Value !== undefined) {
      this.int8Value = args.int8Value;
    }
    if (args.int16Value !== undefined) {
      this.int16Value = args.int16Value;
    }
    if (args.int32Value !== undefined) {
      this.int32Value = args.int32Value;
    }
    if (args.int64Value !== undefined) {
      this.int64Value = args.int64Value;
    }
    if (args.doubleValue !== undefined) {
      this.doubleValue = args.doubleValue;
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
    if (args.boolSetValue !== undefined) {
      this.boolSetValue = args.boolSetValue;
    }
    if (args.int8SetValue !== undefined) {
      this.int8SetValue = args.int8SetValue;
    }
    if (args.int16SetValue !== undefined) {
      this.int16SetValue = args.int16SetValue;
    }
    if (args.int32SetValue !== undefined) {
      this.int32SetValue = args.int32SetValue;
    }
    if (args.int64SetValue !== undefined) {
      this.int64SetValue = args.int64SetValue;
    }
    if (args.doubleSetValue !== undefined) {
      this.doubleSetValue = args.doubleSetValue;
    }
    if (args.stringSetValue !== undefined) {
      this.stringSetValue = args.stringSetValue;
    }
    if (args.binarySetValue !== undefined) {
      this.binarySetValue = args.binarySetValue;
    }
    if (args.nullValue !== undefined) {
      this.nullValue = args.nullValue;
    }
  }
};
Value.prototype = {};
Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.boolValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.int8Value = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.int16Value = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.int32Value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.int64Value = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.boolSetValue = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readBool().value;
          this.boolSetValue.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.int8SetValue = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readByte().value;
          this.int8SetValue.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.int16SetValue = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI16().value;
          this.int16SetValue.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.int32SetValue = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readI32().value;
          this.int32SetValue.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.int64SetValue = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readI64().value;
          this.int64SetValue.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.doubleSetValue = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readDouble().value;
          this.doubleSetValue.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.stringSetValue = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString().value;
          this.stringSetValue.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.binarySetValue = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = input.readBinary().value;
          this.binarySetValue.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.nullValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Value.prototype.write = function(output) {
  output.writeStructBegin('Value');
  if (this.boolValue !== null && this.boolValue !== undefined) {
    output.writeFieldBegin('boolValue', Thrift.Type.BOOL, 1);
    output.writeBool(this.boolValue);
    output.writeFieldEnd();
  }
  if (this.int8Value !== null && this.int8Value !== undefined) {
    output.writeFieldBegin('int8Value', Thrift.Type.BYTE, 2);
    output.writeByte(this.int8Value);
    output.writeFieldEnd();
  }
  if (this.int16Value !== null && this.int16Value !== undefined) {
    output.writeFieldBegin('int16Value', Thrift.Type.I16, 3);
    output.writeI16(this.int16Value);
    output.writeFieldEnd();
  }
  if (this.int32Value !== null && this.int32Value !== undefined) {
    output.writeFieldBegin('int32Value', Thrift.Type.I32, 4);
    output.writeI32(this.int32Value);
    output.writeFieldEnd();
  }
  if (this.int64Value !== null && this.int64Value !== undefined) {
    output.writeFieldBegin('int64Value', Thrift.Type.I64, 5);
    output.writeI64(this.int64Value);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 7);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 8);
    output.writeBinary(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.boolSetValue !== null && this.boolSetValue !== undefined) {
    output.writeFieldBegin('boolSetValue', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.BOOL, this.boolSetValue.length);
    for (var iter56 in this.boolSetValue)
    {
      if (this.boolSetValue.hasOwnProperty(iter56))
      {
        iter56 = this.boolSetValue[iter56];
        output.writeBool(iter56);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int8SetValue !== null && this.int8SetValue !== undefined) {
    output.writeFieldBegin('int8SetValue', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.BYTE, this.int8SetValue.length);
    for (var iter57 in this.int8SetValue)
    {
      if (this.int8SetValue.hasOwnProperty(iter57))
      {
        iter57 = this.int8SetValue[iter57];
        output.writeByte(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int16SetValue !== null && this.int16SetValue !== undefined) {
    output.writeFieldBegin('int16SetValue', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.I16, this.int16SetValue.length);
    for (var iter58 in this.int16SetValue)
    {
      if (this.int16SetValue.hasOwnProperty(iter58))
      {
        iter58 = this.int16SetValue[iter58];
        output.writeI16(iter58);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int32SetValue !== null && this.int32SetValue !== undefined) {
    output.writeFieldBegin('int32SetValue', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.I32, this.int32SetValue.length);
    for (var iter59 in this.int32SetValue)
    {
      if (this.int32SetValue.hasOwnProperty(iter59))
      {
        iter59 = this.int32SetValue[iter59];
        output.writeI32(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int64SetValue !== null && this.int64SetValue !== undefined) {
    output.writeFieldBegin('int64SetValue', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.I64, this.int64SetValue.length);
    for (var iter60 in this.int64SetValue)
    {
      if (this.int64SetValue.hasOwnProperty(iter60))
      {
        iter60 = this.int64SetValue[iter60];
        output.writeI64(iter60);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.doubleSetValue !== null && this.doubleSetValue !== undefined) {
    output.writeFieldBegin('doubleSetValue', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.DOUBLE, this.doubleSetValue.length);
    for (var iter61 in this.doubleSetValue)
    {
      if (this.doubleSetValue.hasOwnProperty(iter61))
      {
        iter61 = this.doubleSetValue[iter61];
        output.writeDouble(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stringSetValue !== null && this.stringSetValue !== undefined) {
    output.writeFieldBegin('stringSetValue', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.stringSetValue.length);
    for (var iter62 in this.stringSetValue)
    {
      if (this.stringSetValue.hasOwnProperty(iter62))
      {
        iter62 = this.stringSetValue[iter62];
        output.writeString(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.binarySetValue !== null && this.binarySetValue !== undefined) {
    output.writeFieldBegin('binarySetValue', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.binarySetValue.length);
    for (var iter63 in this.binarySetValue)
    {
      if (this.binarySetValue.hasOwnProperty(iter63))
      {
        iter63 = this.binarySetValue[iter63];
        output.writeBinary(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nullValue !== null && this.nullValue !== undefined) {
    output.writeFieldBegin('nullValue', Thrift.Type.BOOL, 20);
    output.writeBool(this.nullValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Datum = function(args) {
  this.type = null;
  this.value = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Datum.prototype = {};
Datum.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new Value();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Datum.prototype.write = function(output) {
  output.writeStructBegin('Datum');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProvisionThroughput = function(args) {
  this.readCapacity = null;
  this.writeCapacity = null;
  if (args) {
    if (args.readCapacity !== undefined) {
      this.readCapacity = args.readCapacity;
    }
    if (args.writeCapacity !== undefined) {
      this.writeCapacity = args.writeCapacity;
    }
  }
};
ProvisionThroughput.prototype = {};
ProvisionThroughput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.readCapacity = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.writeCapacity = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProvisionThroughput.prototype.write = function(output) {
  output.writeStructBegin('ProvisionThroughput');
  if (this.readCapacity !== null && this.readCapacity !== undefined) {
    output.writeFieldBegin('readCapacity', Thrift.Type.I64, 1);
    output.writeI64(this.readCapacity);
    output.writeFieldEnd();
  }
  if (this.writeCapacity !== null && this.writeCapacity !== undefined) {
    output.writeFieldBegin('writeCapacity', Thrift.Type.I64, 2);
    output.writeI64(this.writeCapacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableQuota = function(args) {
  this.size = null;
  if (args) {
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
TableQuota.prototype = {};
TableQuota.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableQuota.prototype.write = function(output) {
  output.writeStructBegin('TableQuota');
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 1);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeySpec = function(args) {
  this.attribute = null;
  this.asc = true;
  if (args) {
    if (args.attribute !== undefined) {
      this.attribute = args.attribute;
    }
    if (args.asc !== undefined) {
      this.asc = args.asc;
    }
  }
};
KeySpec.prototype = {};
KeySpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.asc = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeySpec.prototype.write = function(output) {
  output.writeStructBegin('KeySpec');
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 1);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  if (this.asc !== null && this.asc !== undefined) {
    output.writeFieldBegin('asc', Thrift.Type.BOOL, 2);
    output.writeBool(this.asc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocalSecondaryIndexSpec = function(args) {
  this.indexSchema = null;
  this.projections = null;
  this.consistencyMode = 0;
  this.unique = false;
  if (args) {
    if (args.indexSchema !== undefined) {
      this.indexSchema = args.indexSchema;
    }
    if (args.projections !== undefined) {
      this.projections = args.projections;
    }
    if (args.consistencyMode !== undefined) {
      this.consistencyMode = args.consistencyMode;
    }
    if (args.unique !== undefined) {
      this.unique = args.unique;
    }
  }
};
LocalSecondaryIndexSpec.prototype = {};
LocalSecondaryIndexSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.indexSchema = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new KeySpec();
          elem70.read(input);
          this.indexSchema.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.projections = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString().value;
          this.projections.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.consistencyMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.unique = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocalSecondaryIndexSpec.prototype.write = function(output) {
  output.writeStructBegin('LocalSecondaryIndexSpec');
  if (this.indexSchema !== null && this.indexSchema !== undefined) {
    output.writeFieldBegin('indexSchema', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.indexSchema.length);
    for (var iter78 in this.indexSchema)
    {
      if (this.indexSchema.hasOwnProperty(iter78))
      {
        iter78 = this.indexSchema[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.projections !== null && this.projections !== undefined) {
    output.writeFieldBegin('projections', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.projections.length);
    for (var iter79 in this.projections)
    {
      if (this.projections.hasOwnProperty(iter79))
      {
        iter79 = this.projections[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.consistencyMode !== null && this.consistencyMode !== undefined) {
    output.writeFieldBegin('consistencyMode', Thrift.Type.I32, 3);
    output.writeI32(this.consistencyMode);
    output.writeFieldEnd();
  }
  if (this.unique !== null && this.unique !== undefined) {
    output.writeFieldBegin('unique', Thrift.Type.BOOL, 4);
    output.writeBool(this.unique);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntityGroupSpec = function(args) {
  this.attributes = null;
  this.enableHash = true;
  if (args) {
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.enableHash !== undefined) {
      this.enableHash = args.enableHash;
    }
  }
};
EntityGroupSpec.prototype = {};
EntityGroupSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.attributes = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new KeySpec();
          elem86.read(input);
          this.attributes.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enableHash = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityGroupSpec.prototype.write = function(output) {
  output.writeStructBegin('EntityGroupSpec');
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter87 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter87))
      {
        iter87 = this.attributes[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.enableHash !== null && this.enableHash !== undefined) {
    output.writeFieldBegin('enableHash', Thrift.Type.BOOL, 2);
    output.writeBool(this.enableHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSchema = function(args) {
  this.version = null;
  this.entityGroup = null;
  this.primaryIndex = null;
  this.secondaryIndexes = null;
  this.attributes = null;
  this.ttl = -1;
  this.preSplits = 1;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.entityGroup !== undefined) {
      this.entityGroup = args.entityGroup;
    }
    if (args.primaryIndex !== undefined) {
      this.primaryIndex = args.primaryIndex;
    }
    if (args.secondaryIndexes !== undefined) {
      this.secondaryIndexes = args.secondaryIndexes;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.ttl !== undefined) {
      this.ttl = args.ttl;
    }
    if (args.preSplits !== undefined) {
      this.preSplits = args.preSplits;
    }
  }
};
TableSchema.prototype = {};
TableSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityGroup = new EntityGroupSpec();
        this.entityGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.primaryIndex = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new KeySpec();
          elem94.read(input);
          this.primaryIndex.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size95 = 0;
        var _rtmp399;
        this.secondaryIndexes = {};
        var _ktype96 = 0;
        var _vtype97 = 0;
        _rtmp399 = input.readMapBegin();
        _ktype96 = _rtmp399.ktype;
        _vtype97 = _rtmp399.vtype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          if (_i100 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key101 = null;
          var val102 = null;
          key101 = input.readString().value;
          val102 = new LocalSecondaryIndexSpec();
          val102.read(input);
          this.secondaryIndexes[key101] = val102;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size103 = 0;
        var _rtmp3107;
        this.attributes = {};
        var _ktype104 = 0;
        var _vtype105 = 0;
        _rtmp3107 = input.readMapBegin();
        _ktype104 = _rtmp3107.ktype;
        _vtype105 = _rtmp3107.vtype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          if (_i108 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key109 = null;
          var val110 = null;
          key109 = input.readString().value;
          val110 = input.readI32().value;
          this.attributes[key109] = val110;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.ttl = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.preSplits = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSchema.prototype.write = function(output) {
  output.writeStructBegin('TableSchema');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.entityGroup !== null && this.entityGroup !== undefined) {
    output.writeFieldBegin('entityGroup', Thrift.Type.STRUCT, 2);
    this.entityGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.primaryIndex !== null && this.primaryIndex !== undefined) {
    output.writeFieldBegin('primaryIndex', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.primaryIndex.length);
    for (var iter111 in this.primaryIndex)
    {
      if (this.primaryIndex.hasOwnProperty(iter111))
      {
        iter111 = this.primaryIndex[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.secondaryIndexes !== null && this.secondaryIndexes !== undefined) {
    output.writeFieldBegin('secondaryIndexes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.secondaryIndexes));
    for (var kiter112 in this.secondaryIndexes)
    {
      if (this.secondaryIndexes.hasOwnProperty(kiter112))
      {
        var viter113 = this.secondaryIndexes[kiter112];
        output.writeString(kiter112);
        viter113.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.attributes));
    for (var kiter114 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter114))
      {
        var viter115 = this.attributes[kiter114];
        output.writeString(kiter114);
        output.writeI32(viter115);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ttl !== null && this.ttl !== undefined) {
    output.writeFieldBegin('ttl', Thrift.Type.I32, 6);
    output.writeI32(this.ttl);
    output.writeFieldEnd();
  }
  if (this.preSplits !== null && this.preSplits !== undefined) {
    output.writeFieldBegin('preSplits', Thrift.Type.I32, 7);
    output.writeI32(this.preSplits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReplicationProvisionThroughput = function(args) {
  this.consumeCapacity = null;
  this.commitCapacity = null;
  if (args) {
    if (args.consumeCapacity !== undefined) {
      this.consumeCapacity = args.consumeCapacity;
    }
    if (args.commitCapacity !== undefined) {
      this.commitCapacity = args.commitCapacity;
    }
  }
};
ReplicationProvisionThroughput.prototype = {};
ReplicationProvisionThroughput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.consumeCapacity = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.commitCapacity = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReplicationProvisionThroughput.prototype.write = function(output) {
  output.writeStructBegin('ReplicationProvisionThroughput');
  if (this.consumeCapacity !== null && this.consumeCapacity !== undefined) {
    output.writeFieldBegin('consumeCapacity', Thrift.Type.I64, 1);
    output.writeI64(this.consumeCapacity);
    output.writeFieldEnd();
  }
  if (this.commitCapacity !== null && this.commitCapacity !== undefined) {
    output.writeFieldBegin('commitCapacity', Thrift.Type.I64, 2);
    output.writeI64(this.commitCapacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReplicationSpec = function(args) {
  this.enableReplication = null;
  this.throughput = null;
  this.maxSubscribers = null;
  if (args) {
    if (args.enableReplication !== undefined) {
      this.enableReplication = args.enableReplication;
    }
    if (args.throughput !== undefined) {
      this.throughput = args.throughput;
    }
    if (args.maxSubscribers !== undefined) {
      this.maxSubscribers = args.maxSubscribers;
    }
  }
};
ReplicationSpec.prototype = {};
ReplicationSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enableReplication = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.throughput = new ReplicationProvisionThroughput();
        this.throughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxSubscribers = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReplicationSpec.prototype.write = function(output) {
  output.writeStructBegin('ReplicationSpec');
  if (this.enableReplication !== null && this.enableReplication !== undefined) {
    output.writeFieldBegin('enableReplication', Thrift.Type.BOOL, 1);
    output.writeBool(this.enableReplication);
    output.writeFieldEnd();
  }
  if (this.throughput !== null && this.throughput !== undefined) {
    output.writeFieldBegin('throughput', Thrift.Type.STRUCT, 2);
    this.throughput.write(output);
    output.writeFieldEnd();
  }
  if (this.maxSubscribers !== null && this.maxSubscribers !== undefined) {
    output.writeFieldBegin('maxSubscribers', Thrift.Type.I32, 3);
    output.writeI32(this.maxSubscribers);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableMetadata = function(args) {
  this.tableId = null;
  this.developerId = null;
  this.appAcl = null;
  this.quota = null;
  this.throughput = null;
  this.description = null;
  this.enableScanInGlobalOrder = null;
  this.replication = null;
  this.enableSysSnapshot = null;
  if (args) {
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    }
    if (args.appAcl !== undefined) {
      this.appAcl = args.appAcl;
    }
    if (args.quota !== undefined) {
      this.quota = args.quota;
    }
    if (args.throughput !== undefined) {
      this.throughput = args.throughput;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.enableScanInGlobalOrder !== undefined) {
      this.enableScanInGlobalOrder = args.enableScanInGlobalOrder;
    }
    if (args.replication !== undefined) {
      this.replication = args.replication;
    }
    if (args.enableSysSnapshot !== undefined) {
      this.enableSysSnapshot = args.enableSysSnapshot;
    }
  }
};
TableMetadata.prototype = {};
TableMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size116 = 0;
        var _rtmp3120;
        this.appAcl = {};
        var _ktype117 = 0;
        var _vtype118 = 0;
        _rtmp3120 = input.readMapBegin();
        _ktype117 = _rtmp3120.ktype;
        _vtype118 = _rtmp3120.vtype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          if (_i121 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key122 = null;
          var val123 = null;
          key122 = input.readString().value;
          var _size124 = 0;
          var _rtmp3128;
          val123 = [];
          var _etype127 = 0;
          _rtmp3128 = input.readListBegin();
          _etype127 = _rtmp3128.etype;
          _size124 = _rtmp3128.size;
          for (var _i129 = 0; _i129 < _size124; ++_i129)
          {
            var elem130 = null;
            elem130 = input.readI32().value;
            val123.push(elem130);
          }
          input.readListEnd();
          this.appAcl[key122] = val123;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.quota = new TableQuota();
        this.quota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.throughput = new ProvisionThroughput();
        this.throughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.enableScanInGlobalOrder = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.replication = new ReplicationSpec();
        this.replication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.enableSysSnapshot = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableMetadata.prototype.write = function(output) {
  output.writeStructBegin('TableMetadata');
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 1);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  if (this.appAcl !== null && this.appAcl !== undefined) {
    output.writeFieldBegin('appAcl', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.appAcl));
    for (var kiter131 in this.appAcl)
    {
      if (this.appAcl.hasOwnProperty(kiter131))
      {
        var viter132 = this.appAcl[kiter131];
        output.writeString(kiter131);
        output.writeListBegin(Thrift.Type.I32, viter132.length);
        for (var iter133 in viter132)
        {
          if (viter132.hasOwnProperty(iter133))
          {
            iter133 = viter132[iter133];
            output.writeI32(iter133);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.quota !== null && this.quota !== undefined) {
    output.writeFieldBegin('quota', Thrift.Type.STRUCT, 4);
    this.quota.write(output);
    output.writeFieldEnd();
  }
  if (this.throughput !== null && this.throughput !== undefined) {
    output.writeFieldBegin('throughput', Thrift.Type.STRUCT, 5);
    this.throughput.write(output);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.enableScanInGlobalOrder !== null && this.enableScanInGlobalOrder !== undefined) {
    output.writeFieldBegin('enableScanInGlobalOrder', Thrift.Type.BOOL, 7);
    output.writeBool(this.enableScanInGlobalOrder);
    output.writeFieldEnd();
  }
  if (this.replication !== null && this.replication !== undefined) {
    output.writeFieldBegin('replication', Thrift.Type.STRUCT, 8);
    this.replication.write(output);
    output.writeFieldEnd();
  }
  if (this.enableSysSnapshot !== null && this.enableSysSnapshot !== undefined) {
    output.writeFieldBegin('enableSysSnapshot', Thrift.Type.BOOL, 9);
    output.writeBool(this.enableSysSnapshot);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSpec = function(args) {
  this.schema = null;
  this.metadata = null;
  if (args) {
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
  }
};
TableSpec.prototype = {};
TableSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new TableSchema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new TableMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSpec.prototype.write = function(output) {
  output.writeStructBegin('TableSpec');
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 1);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Subscriber = function(args) {
  this.tableName = null;
  this.subscriberName = null;
  this.subscriberId = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.subscriberName !== undefined) {
      this.subscriberName = args.subscriberName;
    }
    if (args.subscriberId !== undefined) {
      this.subscriberId = args.subscriberId;
    }
  }
};
Subscriber.prototype = {};
Subscriber.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.subscriberName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subscriberId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Subscriber.prototype.write = function(output) {
  output.writeStructBegin('Subscriber');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.subscriberName !== null && this.subscriberName !== undefined) {
    output.writeFieldBegin('subscriberName', Thrift.Type.STRING, 2);
    output.writeString(this.subscriberName);
    output.writeFieldEnd();
  }
  if (this.subscriberId !== null && this.subscriberId !== undefined) {
    output.writeFieldBegin('subscriberId', Thrift.Type.STRING, 3);
    output.writeString(this.subscriberId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sinker = function(args) {
  this.subscribedTableName = null;
  this.subscriberName = null;
  this.endpoint = null;
  this.sinkedTableName = null;
  if (args) {
    if (args.subscribedTableName !== undefined) {
      this.subscribedTableName = args.subscribedTableName;
    }
    if (args.subscriberName !== undefined) {
      this.subscriberName = args.subscriberName;
    }
    if (args.endpoint !== undefined) {
      this.endpoint = args.endpoint;
    }
    if (args.sinkedTableName !== undefined) {
      this.sinkedTableName = args.sinkedTableName;
    }
  }
};
Sinker.prototype = {};
Sinker.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.subscribedTableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.subscriberName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endpoint = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sinkedTableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sinker.prototype.write = function(output) {
  output.writeStructBegin('Sinker');
  if (this.subscribedTableName !== null && this.subscribedTableName !== undefined) {
    output.writeFieldBegin('subscribedTableName', Thrift.Type.STRING, 1);
    output.writeString(this.subscribedTableName);
    output.writeFieldEnd();
  }
  if (this.subscriberName !== null && this.subscriberName !== undefined) {
    output.writeFieldBegin('subscriberName', Thrift.Type.STRING, 2);
    output.writeString(this.subscriberName);
    output.writeFieldEnd();
  }
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRING, 3);
    output.writeString(this.endpoint);
    output.writeFieldEnd();
  }
  if (this.sinkedTableName !== null && this.sinkedTableName !== undefined) {
    output.writeFieldBegin('sinkedTableName', Thrift.Type.STRING, 4);
    output.writeString(this.sinkedTableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableStatus = function(args) {
  this.state = null;
  this.createTime = null;
  this.alterTime = null;
  this.statTime = null;
  this.size = null;
  this.rowCount = null;
  if (args) {
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.alterTime !== undefined) {
      this.alterTime = args.alterTime;
    }
    if (args.statTime !== undefined) {
      this.statTime = args.statTime;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.rowCount !== undefined) {
      this.rowCount = args.rowCount;
    }
  }
};
TableStatus.prototype = {};
TableStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.alterTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.statTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableStatus.prototype.write = function(output) {
  output.writeStructBegin('TableStatus');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 2);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.alterTime !== null && this.alterTime !== undefined) {
    output.writeFieldBegin('alterTime', Thrift.Type.I64, 3);
    output.writeI64(this.alterTime);
    output.writeFieldEnd();
  }
  if (this.statTime !== null && this.statTime !== undefined) {
    output.writeFieldBegin('statTime', Thrift.Type.I64, 4);
    output.writeI64(this.statTime);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 5);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 6);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableInfo = function(args) {
  this.name = null;
  this.spec = null;
  this.status = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.spec !== undefined) {
      this.spec = args.spec;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
TableInfo.prototype = {};
TableInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new TableSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new TableStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableInfo.prototype.write = function(output) {
  output.writeStructBegin('TableInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 3);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleCondition = function(args) {
  this.operator = null;
  this.field = null;
  this.value = null;
  this.rowExist = null;
  if (args) {
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
    if (args.field !== undefined) {
      this.field = args.field;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.rowExist !== undefined) {
      this.rowExist = args.rowExist;
    }
  }
};
SimpleCondition.prototype = {};
SimpleCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.operator = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new Datum();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.rowExist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleCondition.prototype.write = function(output) {
  output.writeStructBegin('SimpleCondition');
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.I32, 1);
    output.writeI32(this.operator);
    output.writeFieldEnd();
  }
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 2);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 3);
    this.value.write(output);
    output.writeFieldEnd();
  }
  if (this.rowExist !== null && this.rowExist !== undefined) {
    output.writeFieldBegin('rowExist', Thrift.Type.BOOL, 4);
    output.writeBool(this.rowExist);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSplit = function(args) {
  this.startKey = null;
  this.stopKey = null;
  if (args) {
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
  }
};
TableSplit.prototype = {};
TableSplit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size134 = 0;
        var _rtmp3138;
        this.startKey = {};
        var _ktype135 = 0;
        var _vtype136 = 0;
        _rtmp3138 = input.readMapBegin();
        _ktype135 = _rtmp3138.ktype;
        _vtype136 = _rtmp3138.vtype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          if (_i139 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key140 = null;
          var val141 = null;
          key140 = input.readString().value;
          val141 = new Datum();
          val141.read(input);
          this.startKey[key140] = val141;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size142 = 0;
        var _rtmp3146;
        this.stopKey = {};
        var _ktype143 = 0;
        var _vtype144 = 0;
        _rtmp3146 = input.readMapBegin();
        _ktype143 = _rtmp3146.ktype;
        _vtype144 = _rtmp3146.vtype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          if (_i147 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key148 = null;
          var val149 = null;
          key148 = input.readString().value;
          val149 = new Datum();
          val149.read(input);
          this.stopKey[key148] = val149;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSplit.prototype.write = function(output) {
  output.writeStructBegin('TableSplit');
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter150 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter150))
      {
        var viter151 = this.startKey[kiter150];
        output.writeString(kiter150);
        viter151.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter152 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter152))
      {
        var viter153 = this.stopKey[kiter152];
        output.writeString(kiter152);
        viter153.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Partition = function(args) {
  this.partitionId = null;
  this.startKey = null;
  this.stopKey = null;
  if (args) {
    if (args.partitionId !== undefined) {
      this.partitionId = args.partitionId;
    }
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
  }
};
Partition.prototype = {};
Partition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.partitionId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size154 = 0;
        var _rtmp3158;
        this.startKey = {};
        var _ktype155 = 0;
        var _vtype156 = 0;
        _rtmp3158 = input.readMapBegin();
        _ktype155 = _rtmp3158.ktype;
        _vtype156 = _rtmp3158.vtype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          if (_i159 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key160 = null;
          var val161 = null;
          key160 = input.readString().value;
          val161 = new Datum();
          val161.read(input);
          this.startKey[key160] = val161;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size162 = 0;
        var _rtmp3166;
        this.stopKey = {};
        var _ktype163 = 0;
        var _vtype164 = 0;
        _rtmp3166 = input.readMapBegin();
        _ktype163 = _rtmp3166.ktype;
        _vtype164 = _rtmp3166.vtype;
        _size162 = _rtmp3166.size;
        for (var _i167 = 0; _i167 < _size162; ++_i167)
        {
          if (_i167 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key168 = null;
          var val169 = null;
          key168 = input.readString().value;
          val169 = new Datum();
          val169.read(input);
          this.stopKey[key168] = val169;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Partition.prototype.write = function(output) {
  output.writeStructBegin('Partition');
  if (this.partitionId !== null && this.partitionId !== undefined) {
    output.writeFieldBegin('partitionId', Thrift.Type.I32, 1);
    output.writeI32(this.partitionId);
    output.writeFieldEnd();
  }
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter170 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter170))
      {
        var viter171 = this.startKey[kiter170];
        output.writeString(kiter170);
        viter171.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter172 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter172))
      {
        var viter173 = this.stopKey[kiter172];
        output.writeString(kiter172);
        viter173.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PartitionStatistics = function(args) {
  this.collectedEditNumber = null;
  this.retrievedEditNumber = null;
  if (args) {
    if (args.collectedEditNumber !== undefined) {
      this.collectedEditNumber = args.collectedEditNumber;
    }
    if (args.retrievedEditNumber !== undefined) {
      this.retrievedEditNumber = args.retrievedEditNumber;
    }
  }
};
PartitionStatistics.prototype = {};
PartitionStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.collectedEditNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.retrievedEditNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionStatistics.prototype.write = function(output) {
  output.writeStructBegin('PartitionStatistics');
  if (this.collectedEditNumber !== null && this.collectedEditNumber !== undefined) {
    output.writeFieldBegin('collectedEditNumber', Thrift.Type.I64, 1);
    output.writeI64(this.collectedEditNumber);
    output.writeFieldEnd();
  }
  if (this.retrievedEditNumber !== null && this.retrievedEditNumber !== undefined) {
    output.writeFieldBegin('retrievedEditNumber', Thrift.Type.I64, 2);
    output.writeI64(this.retrievedEditNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscriberStatistics = function(args) {
  this.consumedDataNumber = null;
  this.committedDataNumber = null;
  this.consumedEditNumber = null;
  this.committedEditNumber = null;
  if (args) {
    if (args.consumedDataNumber !== undefined) {
      this.consumedDataNumber = args.consumedDataNumber;
    }
    if (args.committedDataNumber !== undefined) {
      this.committedDataNumber = args.committedDataNumber;
    }
    if (args.consumedEditNumber !== undefined) {
      this.consumedEditNumber = args.consumedEditNumber;
    }
    if (args.committedEditNumber !== undefined) {
      this.committedEditNumber = args.committedEditNumber;
    }
  }
};
SubscriberStatistics.prototype = {};
SubscriberStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.consumedDataNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.committedDataNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.consumedEditNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.committedEditNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscriberStatistics.prototype.write = function(output) {
  output.writeStructBegin('SubscriberStatistics');
  if (this.consumedDataNumber !== null && this.consumedDataNumber !== undefined) {
    output.writeFieldBegin('consumedDataNumber', Thrift.Type.I64, 1);
    output.writeI64(this.consumedDataNumber);
    output.writeFieldEnd();
  }
  if (this.committedDataNumber !== null && this.committedDataNumber !== undefined) {
    output.writeFieldBegin('committedDataNumber', Thrift.Type.I64, 2);
    output.writeI64(this.committedDataNumber);
    output.writeFieldEnd();
  }
  if (this.consumedEditNumber !== null && this.consumedEditNumber !== undefined) {
    output.writeFieldBegin('consumedEditNumber', Thrift.Type.I64, 3);
    output.writeI64(this.consumedEditNumber);
    output.writeFieldEnd();
  }
  if (this.committedEditNumber !== null && this.committedEditNumber !== undefined) {
    output.writeFieldBegin('committedEditNumber', Thrift.Type.I64, 4);
    output.writeI64(this.committedEditNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
GetRequest.prototype = {};
GetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size174 = 0;
        var _rtmp3178;
        this.keys = {};
        var _ktype175 = 0;
        var _vtype176 = 0;
        _rtmp3178 = input.readMapBegin();
        _ktype175 = _rtmp3178.ktype;
        _vtype176 = _rtmp3178.vtype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          if (_i179 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key180 = null;
          var val181 = null;
          key180 = input.readString().value;
          val181 = new Datum();
          val181.read(input);
          this.keys[key180] = val181;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size182 = 0;
        var _rtmp3186;
        this.attributes = [];
        var _etype185 = 0;
        _rtmp3186 = input.readListBegin();
        _etype185 = _rtmp3186.etype;
        _size182 = _rtmp3186.size;
        for (var _i187 = 0; _i187 < _size182; ++_i187)
        {
          var elem188 = null;
          elem188 = input.readString().value;
          this.attributes.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter189 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter189))
      {
        var viter190 = this.keys[kiter189];
        output.writeString(kiter189);
        viter190.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter191 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter191))
      {
        iter191 = this.attributes[iter191];
        output.writeString(iter191);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetResult = function(args) {
  this.item = null;
  if (args) {
    if (args.item !== undefined) {
      this.item = args.item;
    }
  }
};
GetResult.prototype = {};
GetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size192 = 0;
        var _rtmp3196;
        this.item = {};
        var _ktype193 = 0;
        var _vtype194 = 0;
        _rtmp3196 = input.readMapBegin();
        _ktype193 = _rtmp3196.ktype;
        _vtype194 = _rtmp3196.vtype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          if (_i197 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key198 = null;
          var val199 = null;
          key198 = input.readString().value;
          val199 = new Datum();
          val199.read(input);
          this.item[key198] = val199;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetResult.prototype.write = function(output) {
  output.writeStructBegin('GetResult');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.item));
    for (var kiter200 in this.item)
    {
      if (this.item.hasOwnProperty(kiter200))
      {
        var viter201 = this.item[kiter200];
        output.writeString(kiter200);
        viter201.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PutRequest = function(args) {
  this.tableName = null;
  this.record = null;
  this.condition = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
  }
};
PutRequest.prototype = {};
PutRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size202 = 0;
        var _rtmp3206;
        this.record = {};
        var _ktype203 = 0;
        var _vtype204 = 0;
        _rtmp3206 = input.readMapBegin();
        _ktype203 = _rtmp3206.ktype;
        _vtype204 = _rtmp3206.vtype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          if (_i207 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key208 = null;
          var val209 = null;
          key208 = input.readString().value;
          val209 = new Datum();
          val209.read(input);
          this.record[key208] = val209;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new SimpleCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutRequest.prototype.write = function(output) {
  output.writeStructBegin('PutRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.record));
    for (var kiter210 in this.record)
    {
      if (this.record.hasOwnProperty(kiter210))
      {
        var viter211 = this.record[kiter210];
        output.writeString(kiter210);
        viter211.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 3);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PutResult = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PutResult.prototype = {};
PutResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutResult.prototype.write = function(output) {
  output.writeStructBegin('PutResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IncrementRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.amounts = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.amounts !== undefined) {
      this.amounts = args.amounts;
    }
  }
};
IncrementRequest.prototype = {};
IncrementRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size212 = 0;
        var _rtmp3216;
        this.keys = {};
        var _ktype213 = 0;
        var _vtype214 = 0;
        _rtmp3216 = input.readMapBegin();
        _ktype213 = _rtmp3216.ktype;
        _vtype214 = _rtmp3216.vtype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          if (_i217 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key218 = null;
          var val219 = null;
          key218 = input.readString().value;
          val219 = new Datum();
          val219.read(input);
          this.keys[key218] = val219;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size220 = 0;
        var _rtmp3224;
        this.amounts = {};
        var _ktype221 = 0;
        var _vtype222 = 0;
        _rtmp3224 = input.readMapBegin();
        _ktype221 = _rtmp3224.ktype;
        _vtype222 = _rtmp3224.vtype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          if (_i225 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key226 = null;
          var val227 = null;
          key226 = input.readString().value;
          val227 = new Datum();
          val227.read(input);
          this.amounts[key226] = val227;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IncrementRequest.prototype.write = function(output) {
  output.writeStructBegin('IncrementRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter228 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter228))
      {
        var viter229 = this.keys[kiter228];
        output.writeString(kiter228);
        viter229.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.amounts !== null && this.amounts !== undefined) {
    output.writeFieldBegin('amounts', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.amounts));
    for (var kiter230 in this.amounts)
    {
      if (this.amounts.hasOwnProperty(kiter230))
      {
        var viter231 = this.amounts[kiter230];
        output.writeString(kiter230);
        viter231.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IncrementResult = function(args) {
  this.amounts = null;
  if (args) {
    if (args.amounts !== undefined) {
      this.amounts = args.amounts;
    }
  }
};
IncrementResult.prototype = {};
IncrementResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size232 = 0;
        var _rtmp3236;
        this.amounts = {};
        var _ktype233 = 0;
        var _vtype234 = 0;
        _rtmp3236 = input.readMapBegin();
        _ktype233 = _rtmp3236.ktype;
        _vtype234 = _rtmp3236.vtype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          if (_i237 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key238 = null;
          var val239 = null;
          key238 = input.readString().value;
          val239 = new Datum();
          val239.read(input);
          this.amounts[key238] = val239;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IncrementResult.prototype.write = function(output) {
  output.writeStructBegin('IncrementResult');
  if (this.amounts !== null && this.amounts !== undefined) {
    output.writeFieldBegin('amounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.amounts));
    for (var kiter240 in this.amounts)
    {
      if (this.amounts.hasOwnProperty(kiter240))
      {
        var viter241 = this.amounts[kiter240];
        output.writeString(kiter240);
        viter241.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.attributes = null;
  this.condition = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
  }
};
RemoveRequest.prototype = {};
RemoveRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size242 = 0;
        var _rtmp3246;
        this.keys = {};
        var _ktype243 = 0;
        var _vtype244 = 0;
        _rtmp3246 = input.readMapBegin();
        _ktype243 = _rtmp3246.ktype;
        _vtype244 = _rtmp3246.vtype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          if (_i247 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key248 = null;
          var val249 = null;
          key248 = input.readString().value;
          val249 = new Datum();
          val249.read(input);
          this.keys[key248] = val249;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size250 = 0;
        var _rtmp3254;
        this.attributes = [];
        var _etype253 = 0;
        _rtmp3254 = input.readListBegin();
        _etype253 = _rtmp3254.etype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var elem256 = null;
          elem256 = input.readString().value;
          this.attributes.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new SimpleCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveRequest.prototype.write = function(output) {
  output.writeStructBegin('RemoveRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter257 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter257))
      {
        var viter258 = this.keys[kiter257];
        output.writeString(kiter257);
        viter258.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter259 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter259))
      {
        iter259 = this.attributes[iter259];
        output.writeString(iter259);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 4);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveResult = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RemoveResult.prototype = {};
RemoveResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveResult.prototype.write = function(output) {
  output.writeStructBegin('RemoveResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Request = function(args) {
  this.getRequest = null;
  this.putRequest = null;
  this.incrementRequest = null;
  this.removeRequest = null;
  if (args) {
    if (args.getRequest !== undefined) {
      this.getRequest = args.getRequest;
    }
    if (args.putRequest !== undefined) {
      this.putRequest = args.putRequest;
    }
    if (args.incrementRequest !== undefined) {
      this.incrementRequest = args.incrementRequest;
    }
    if (args.removeRequest !== undefined) {
      this.removeRequest = args.removeRequest;
    }
  }
};
Request.prototype = {};
Request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRequest = new GetRequest();
        this.getRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.putRequest = new PutRequest();
        this.putRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.incrementRequest = new IncrementRequest();
        this.incrementRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeRequest = new RemoveRequest();
        this.removeRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Request.prototype.write = function(output) {
  output.writeStructBegin('Request');
  if (this.getRequest !== null && this.getRequest !== undefined) {
    output.writeFieldBegin('getRequest', Thrift.Type.STRUCT, 1);
    this.getRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.putRequest !== null && this.putRequest !== undefined) {
    output.writeFieldBegin('putRequest', Thrift.Type.STRUCT, 2);
    this.putRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.incrementRequest !== null && this.incrementRequest !== undefined) {
    output.writeFieldBegin('incrementRequest', Thrift.Type.STRUCT, 3);
    this.incrementRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.removeRequest !== null && this.removeRequest !== undefined) {
    output.writeFieldBegin('removeRequest', Thrift.Type.STRUCT, 4);
    this.removeRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanAction = function(args) {
  this.action = null;
  this.request = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ScanAction.prototype = {};
ScanAction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new Request();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanAction.prototype.write = function(output) {
  output.writeStructBegin('ScanAction');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanRequest = function(args) {
  this.tableName = null;
  this.indexName = null;
  this.startKey = null;
  this.stopKey = null;
  this.attributes = null;
  this.condition = null;
  this.limit = 10;
  this.reverse = false;
  this.inGlobalOrder = false;
  this.cacheResult = true;
  this.lookAheadStep = 0;
  this.action = null;
  this.splitIndex = -1;
  this.initialStartKey = null;
  this.scanInOneSplit = false;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.indexName !== undefined) {
      this.indexName = args.indexName;
    }
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
    if (args.reverse !== undefined) {
      this.reverse = args.reverse;
    }
    if (args.inGlobalOrder !== undefined) {
      this.inGlobalOrder = args.inGlobalOrder;
    }
    if (args.cacheResult !== undefined) {
      this.cacheResult = args.cacheResult;
    }
    if (args.lookAheadStep !== undefined) {
      this.lookAheadStep = args.lookAheadStep;
    }
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.splitIndex !== undefined) {
      this.splitIndex = args.splitIndex;
    }
    if (args.initialStartKey !== undefined) {
      this.initialStartKey = args.initialStartKey;
    }
    if (args.scanInOneSplit !== undefined) {
      this.scanInOneSplit = args.scanInOneSplit;
    }
  }
};
ScanRequest.prototype = {};
ScanRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size260 = 0;
        var _rtmp3264;
        this.startKey = {};
        var _ktype261 = 0;
        var _vtype262 = 0;
        _rtmp3264 = input.readMapBegin();
        _ktype261 = _rtmp3264.ktype;
        _vtype262 = _rtmp3264.vtype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          if (_i265 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key266 = null;
          var val267 = null;
          key266 = input.readString().value;
          val267 = new Datum();
          val267.read(input);
          this.startKey[key266] = val267;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size268 = 0;
        var _rtmp3272;
        this.stopKey = {};
        var _ktype269 = 0;
        var _vtype270 = 0;
        _rtmp3272 = input.readMapBegin();
        _ktype269 = _rtmp3272.ktype;
        _vtype270 = _rtmp3272.vtype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          if (_i273 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key274 = null;
          var val275 = null;
          key274 = input.readString().value;
          val275 = new Datum();
          val275.read(input);
          this.stopKey[key274] = val275;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size276 = 0;
        var _rtmp3280;
        this.attributes = [];
        var _etype279 = 0;
        _rtmp3280 = input.readListBegin();
        _etype279 = _rtmp3280.etype;
        _size276 = _rtmp3280.size;
        for (var _i281 = 0; _i281 < _size276; ++_i281)
        {
          var elem282 = null;
          elem282 = input.readString().value;
          this.attributes.push(elem282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.condition = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.reverse = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.inGlobalOrder = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheResult = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.lookAheadStep = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.action = new ScanAction();
        this.action.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.splitIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.MAP) {
        var _size283 = 0;
        var _rtmp3287;
        this.initialStartKey = {};
        var _ktype284 = 0;
        var _vtype285 = 0;
        _rtmp3287 = input.readMapBegin();
        _ktype284 = _rtmp3287.ktype;
        _vtype285 = _rtmp3287.vtype;
        _size283 = _rtmp3287.size;
        for (var _i288 = 0; _i288 < _size283; ++_i288)
        {
          if (_i288 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key289 = null;
          var val290 = null;
          key289 = input.readString().value;
          val290 = new Datum();
          val290.read(input);
          this.initialStartKey[key289] = val290;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.scanInOneSplit = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanRequest.prototype.write = function(output) {
  output.writeStructBegin('ScanRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 2);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter291 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter291))
      {
        var viter292 = this.startKey[kiter291];
        output.writeString(kiter291);
        viter292.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter293 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter293))
      {
        var viter294 = this.stopKey[kiter293];
        output.writeString(kiter293);
        viter294.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter295 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter295))
      {
        iter295 = this.attributes[iter295];
        output.writeString(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRING, 6);
    output.writeString(this.condition);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 7);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.reverse !== null && this.reverse !== undefined) {
    output.writeFieldBegin('reverse', Thrift.Type.BOOL, 8);
    output.writeBool(this.reverse);
    output.writeFieldEnd();
  }
  if (this.inGlobalOrder !== null && this.inGlobalOrder !== undefined) {
    output.writeFieldBegin('inGlobalOrder', Thrift.Type.BOOL, 9);
    output.writeBool(this.inGlobalOrder);
    output.writeFieldEnd();
  }
  if (this.cacheResult !== null && this.cacheResult !== undefined) {
    output.writeFieldBegin('cacheResult', Thrift.Type.BOOL, 10);
    output.writeBool(this.cacheResult);
    output.writeFieldEnd();
  }
  if (this.lookAheadStep !== null && this.lookAheadStep !== undefined) {
    output.writeFieldBegin('lookAheadStep', Thrift.Type.I32, 11);
    output.writeI32(this.lookAheadStep);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.STRUCT, 12);
    this.action.write(output);
    output.writeFieldEnd();
  }
  if (this.splitIndex !== null && this.splitIndex !== undefined) {
    output.writeFieldBegin('splitIndex', Thrift.Type.I32, 13);
    output.writeI32(this.splitIndex);
    output.writeFieldEnd();
  }
  if (this.initialStartKey !== null && this.initialStartKey !== undefined) {
    output.writeFieldBegin('initialStartKey', Thrift.Type.MAP, 14);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.initialStartKey));
    for (var kiter296 in this.initialStartKey)
    {
      if (this.initialStartKey.hasOwnProperty(kiter296))
      {
        var viter297 = this.initialStartKey[kiter296];
        output.writeString(kiter296);
        viter297.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.scanInOneSplit !== null && this.scanInOneSplit !== undefined) {
    output.writeFieldBegin('scanInOneSplit', Thrift.Type.BOOL, 15);
    output.writeBool(this.scanInOneSplit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanResult = function(args) {
  this.nextStartKey = null;
  this.records = null;
  this.throttled = null;
  this.nextSplitIndex = -1;
  if (args) {
    if (args.nextStartKey !== undefined) {
      this.nextStartKey = args.nextStartKey;
    }
    if (args.records !== undefined) {
      this.records = args.records;
    }
    if (args.throttled !== undefined) {
      this.throttled = args.throttled;
    }
    if (args.nextSplitIndex !== undefined) {
      this.nextSplitIndex = args.nextSplitIndex;
    }
  }
};
ScanResult.prototype = {};
ScanResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size298 = 0;
        var _rtmp3302;
        this.nextStartKey = {};
        var _ktype299 = 0;
        var _vtype300 = 0;
        _rtmp3302 = input.readMapBegin();
        _ktype299 = _rtmp3302.ktype;
        _vtype300 = _rtmp3302.vtype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          if (_i303 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key304 = null;
          var val305 = null;
          key304 = input.readString().value;
          val305 = new Datum();
          val305.read(input);
          this.nextStartKey[key304] = val305;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size306 = 0;
        var _rtmp3310;
        this.records = [];
        var _etype309 = 0;
        _rtmp3310 = input.readListBegin();
        _etype309 = _rtmp3310.etype;
        _size306 = _rtmp3310.size;
        for (var _i311 = 0; _i311 < _size306; ++_i311)
        {
          var elem312 = null;
          var _size313 = 0;
          var _rtmp3317;
          elem312 = {};
          var _ktype314 = 0;
          var _vtype315 = 0;
          _rtmp3317 = input.readMapBegin();
          _ktype314 = _rtmp3317.ktype;
          _vtype315 = _rtmp3317.vtype;
          _size313 = _rtmp3317.size;
          for (var _i318 = 0; _i318 < _size313; ++_i318)
          {
            if (_i318 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key319 = null;
            var val320 = null;
            key319 = input.readString().value;
            val320 = new Datum();
            val320.read(input);
            elem312[key319] = val320;
          }
          input.readMapEnd();
          this.records.push(elem312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.throttled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.nextSplitIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResult.prototype.write = function(output) {
  output.writeStructBegin('ScanResult');
  if (this.nextStartKey !== null && this.nextStartKey !== undefined) {
    output.writeFieldBegin('nextStartKey', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.nextStartKey));
    for (var kiter321 in this.nextStartKey)
    {
      if (this.nextStartKey.hasOwnProperty(kiter321))
      {
        var viter322 = this.nextStartKey[kiter321];
        output.writeString(kiter321);
        viter322.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.MAP, this.records.length);
    for (var iter323 in this.records)
    {
      if (this.records.hasOwnProperty(iter323))
      {
        iter323 = this.records[iter323];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(iter323));
        for (var kiter324 in iter323)
        {
          if (iter323.hasOwnProperty(kiter324))
          {
            var viter325 = iter323[kiter324];
            output.writeString(kiter324);
            viter325.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.throttled !== null && this.throttled !== undefined) {
    output.writeFieldBegin('throttled', Thrift.Type.BOOL, 3);
    output.writeBool(this.throttled);
    output.writeFieldEnd();
  }
  if (this.nextSplitIndex !== null && this.nextSplitIndex !== undefined) {
    output.writeFieldBegin('nextSplitIndex', Thrift.Type.I32, 4);
    output.writeI32(this.nextSplitIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchRequestItem = function(args) {
  this.action = null;
  this.request = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
BatchRequestItem.prototype = {};
BatchRequestItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new Request();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchRequestItem.prototype.write = function(output) {
  output.writeStructBegin('BatchRequestItem');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = function(args) {
  this.getResult = null;
  this.putResult = null;
  this.incrementResult = null;
  this.removeResult = null;
  if (args) {
    if (args.getResult !== undefined) {
      this.getResult = args.getResult;
    }
    if (args.putResult !== undefined) {
      this.putResult = args.putResult;
    }
    if (args.incrementResult !== undefined) {
      this.incrementResult = args.incrementResult;
    }
    if (args.removeResult !== undefined) {
      this.removeResult = args.removeResult;
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getResult = new GetResult();
        this.getResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.putResult = new PutResult();
        this.putResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.incrementResult = new IncrementResult();
        this.incrementResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeResult = new RemoveResult();
        this.removeResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.getResult !== null && this.getResult !== undefined) {
    output.writeFieldBegin('getResult', Thrift.Type.STRUCT, 1);
    this.getResult.write(output);
    output.writeFieldEnd();
  }
  if (this.putResult !== null && this.putResult !== undefined) {
    output.writeFieldBegin('putResult', Thrift.Type.STRUCT, 2);
    this.putResult.write(output);
    output.writeFieldEnd();
  }
  if (this.incrementResult !== null && this.incrementResult !== undefined) {
    output.writeFieldBegin('incrementResult', Thrift.Type.STRUCT, 3);
    this.incrementResult.write(output);
    output.writeFieldEnd();
  }
  if (this.removeResult !== null && this.removeResult !== undefined) {
    output.writeFieldBegin('removeResult', Thrift.Type.STRUCT, 4);
    this.removeResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchResultItem = function(args) {
  this.action = null;
  this.success = null;
  this.result = null;
  this.serviceException = null;
  if (args instanceof ServiceException) {
    this.serviceException = args;
    return;
  }
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.serviceException !== undefined) {
      this.serviceException = args.serviceException;
    }
  }
};
BatchResultItem.prototype = {};
BatchResultItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceException = new ServiceException();
        this.serviceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchResultItem.prototype.write = function(output) {
  output.writeStructBegin('BatchResultItem');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 3);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceException !== null && this.serviceException !== undefined) {
    output.writeFieldBegin('serviceException', Thrift.Type.STRUCT, 4);
    this.serviceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchRequest = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
BatchRequest.prototype = {};
BatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size326 = 0;
        var _rtmp3330;
        this.items = [];
        var _etype329 = 0;
        _rtmp3330 = input.readListBegin();
        _etype329 = _rtmp3330.etype;
        _size326 = _rtmp3330.size;
        for (var _i331 = 0; _i331 < _size326; ++_i331)
        {
          var elem332 = null;
          elem332 = new BatchRequestItem();
          elem332.read(input);
          this.items.push(elem332);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchRequest.prototype.write = function(output) {
  output.writeStructBegin('BatchRequest');
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter333 in this.items)
    {
      if (this.items.hasOwnProperty(iter333))
      {
        iter333 = this.items[iter333];
        iter333.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchResult = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
BatchResult.prototype = {};
BatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size334 = 0;
        var _rtmp3338;
        this.items = [];
        var _etype337 = 0;
        _rtmp3338 = input.readListBegin();
        _etype337 = _rtmp3338.etype;
        _size334 = _rtmp3338.size;
        for (var _i339 = 0; _i339 < _size334; ++_i339)
        {
          var elem340 = null;
          elem340 = new BatchResultItem();
          elem340.read(input);
          this.items.push(elem340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchResult.prototype.write = function(output) {
  output.writeStructBegin('BatchResult');
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter341 in this.items)
    {
      if (this.items.hasOwnProperty(iter341))
      {
        iter341 = this.items[iter341];
        iter341.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EditDatum = function(args) {
  this.editType = null;
  this.datum = null;
  if (args) {
    if (args.editType !== undefined) {
      this.editType = args.editType;
    }
    if (args.datum !== undefined) {
      this.datum = args.datum;
    }
  }
};
EditDatum.prototype = {};
EditDatum.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.editType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.datum = new Datum();
        this.datum.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditDatum.prototype.write = function(output) {
  output.writeStructBegin('EditDatum');
  if (this.editType !== null && this.editType !== undefined) {
    output.writeFieldBegin('editType', Thrift.Type.I32, 1);
    output.writeI32(this.editType);
    output.writeFieldEnd();
  }
  if (this.datum !== null && this.datum !== undefined) {
    output.writeFieldBegin('datum', Thrift.Type.STRUCT, 2);
    this.datum.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RowEdit = function(args) {
  this.keys = null;
  this.edits = null;
  this.consumeOffset = null;
  this.deleteRow = null;
  if (args) {
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.edits !== undefined) {
      this.edits = args.edits;
    }
    if (args.consumeOffset !== undefined) {
      this.consumeOffset = args.consumeOffset;
    }
    if (args.deleteRow !== undefined) {
      this.deleteRow = args.deleteRow;
    }
  }
};
RowEdit.prototype = {};
RowEdit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size342 = 0;
        var _rtmp3346;
        this.keys = {};
        var _ktype343 = 0;
        var _vtype344 = 0;
        _rtmp3346 = input.readMapBegin();
        _ktype343 = _rtmp3346.ktype;
        _vtype344 = _rtmp3346.vtype;
        _size342 = _rtmp3346.size;
        for (var _i347 = 0; _i347 < _size342; ++_i347)
        {
          if (_i347 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key348 = null;
          var val349 = null;
          key348 = input.readString().value;
          val349 = new Datum();
          val349.read(input);
          this.keys[key348] = val349;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size350 = 0;
        var _rtmp3354;
        this.edits = {};
        var _ktype351 = 0;
        var _vtype352 = 0;
        _rtmp3354 = input.readMapBegin();
        _ktype351 = _rtmp3354.ktype;
        _vtype352 = _rtmp3354.vtype;
        _size350 = _rtmp3354.size;
        for (var _i355 = 0; _i355 < _size350; ++_i355)
        {
          if (_i355 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key356 = null;
          var val357 = null;
          key356 = input.readString().value;
          val357 = new EditDatum();
          val357.read(input);
          this.edits[key356] = val357;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.consumeOffset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteRow = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RowEdit.prototype.write = function(output) {
  output.writeStructBegin('RowEdit');
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter358 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter358))
      {
        var viter359 = this.keys[kiter358];
        output.writeString(kiter358);
        viter359.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.edits !== null && this.edits !== undefined) {
    output.writeFieldBegin('edits', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.edits));
    for (var kiter360 in this.edits)
    {
      if (this.edits.hasOwnProperty(kiter360))
      {
        var viter361 = this.edits[kiter360];
        output.writeString(kiter360);
        viter361.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.consumeOffset !== null && this.consumeOffset !== undefined) {
    output.writeFieldBegin('consumeOffset', Thrift.Type.I64, 3);
    output.writeI64(this.consumeOffset);
    output.writeFieldEnd();
  }
  if (this.deleteRow !== null && this.deleteRow !== undefined) {
    output.writeFieldBegin('deleteRow', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteRow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataConsumeRequest = function(args) {
  this.tableName = null;
  this.partitionId = null;
  this.subscriberName = null;
  this.consumeNumber = null;
  this.consumeOffset = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.partitionId !== undefined) {
      this.partitionId = args.partitionId;
    }
    if (args.subscriberName !== undefined) {
      this.subscriberName = args.subscriberName;
    }
    if (args.consumeNumber !== undefined) {
      this.consumeNumber = args.consumeNumber;
    }
    if (args.consumeOffset !== undefined) {
      this.consumeOffset = args.consumeOffset;
    }
  }
};
DataConsumeRequest.prototype = {};
DataConsumeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.partitionId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subscriberName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consumeNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size362 = 0;
        var _rtmp3366;
        this.consumeOffset = {};
        var _ktype363 = 0;
        var _vtype364 = 0;
        _rtmp3366 = input.readMapBegin();
        _ktype363 = _rtmp3366.ktype;
        _vtype364 = _rtmp3366.vtype;
        _size362 = _rtmp3366.size;
        for (var _i367 = 0; _i367 < _size362; ++_i367)
        {
          if (_i367 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key368 = null;
          var val369 = null;
          key368 = input.readString().value;
          val369 = new Datum();
          val369.read(input);
          this.consumeOffset[key368] = val369;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataConsumeRequest.prototype.write = function(output) {
  output.writeStructBegin('DataConsumeRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.partitionId !== null && this.partitionId !== undefined) {
    output.writeFieldBegin('partitionId', Thrift.Type.I32, 2);
    output.writeI32(this.partitionId);
    output.writeFieldEnd();
  }
  if (this.subscriberName !== null && this.subscriberName !== undefined) {
    output.writeFieldBegin('subscriberName', Thrift.Type.STRING, 3);
    output.writeString(this.subscriberName);
    output.writeFieldEnd();
  }
  if (this.consumeNumber !== null && this.consumeNumber !== undefined) {
    output.writeFieldBegin('consumeNumber', Thrift.Type.I32, 4);
    output.writeI32(this.consumeNumber);
    output.writeFieldEnd();
  }
  if (this.consumeOffset !== null && this.consumeOffset !== undefined) {
    output.writeFieldBegin('consumeOffset', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.consumeOffset));
    for (var kiter370 in this.consumeOffset)
    {
      if (this.consumeOffset.hasOwnProperty(kiter370))
      {
        var viter371 = this.consumeOffset[kiter370];
        output.writeString(kiter370);
        viter371.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataConsumeResult = function(args) {
  this.nextConsumeOffset = null;
  this.records = null;
  this.keys = null;
  this.throttled = null;
  if (args) {
    if (args.nextConsumeOffset !== undefined) {
      this.nextConsumeOffset = args.nextConsumeOffset;
    }
    if (args.records !== undefined) {
      this.records = args.records;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.throttled !== undefined) {
      this.throttled = args.throttled;
    }
  }
};
DataConsumeResult.prototype = {};
DataConsumeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size372 = 0;
        var _rtmp3376;
        this.nextConsumeOffset = {};
        var _ktype373 = 0;
        var _vtype374 = 0;
        _rtmp3376 = input.readMapBegin();
        _ktype373 = _rtmp3376.ktype;
        _vtype374 = _rtmp3376.vtype;
        _size372 = _rtmp3376.size;
        for (var _i377 = 0; _i377 < _size372; ++_i377)
        {
          if (_i377 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key378 = null;
          var val379 = null;
          key378 = input.readString().value;
          val379 = new Datum();
          val379.read(input);
          this.nextConsumeOffset[key378] = val379;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size380 = 0;
        var _rtmp3384;
        this.records = [];
        var _etype383 = 0;
        _rtmp3384 = input.readListBegin();
        _etype383 = _rtmp3384.etype;
        _size380 = _rtmp3384.size;
        for (var _i385 = 0; _i385 < _size380; ++_i385)
        {
          var elem386 = null;
          var _size387 = 0;
          var _rtmp3391;
          elem386 = {};
          var _ktype388 = 0;
          var _vtype389 = 0;
          _rtmp3391 = input.readMapBegin();
          _ktype388 = _rtmp3391.ktype;
          _vtype389 = _rtmp3391.vtype;
          _size387 = _rtmp3391.size;
          for (var _i392 = 0; _i392 < _size387; ++_i392)
          {
            if (_i392 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key393 = null;
            var val394 = null;
            key393 = input.readString().value;
            val394 = new Datum();
            val394.read(input);
            elem386[key393] = val394;
          }
          input.readMapEnd();
          this.records.push(elem386);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size395 = 0;
        var _rtmp3399;
        this.keys = [];
        var _etype398 = 0;
        _rtmp3399 = input.readListBegin();
        _etype398 = _rtmp3399.etype;
        _size395 = _rtmp3399.size;
        for (var _i400 = 0; _i400 < _size395; ++_i400)
        {
          var elem401 = null;
          elem401 = input.readString().value;
          this.keys.push(elem401);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.throttled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataConsumeResult.prototype.write = function(output) {
  output.writeStructBegin('DataConsumeResult');
  if (this.nextConsumeOffset !== null && this.nextConsumeOffset !== undefined) {
    output.writeFieldBegin('nextConsumeOffset', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.nextConsumeOffset));
    for (var kiter402 in this.nextConsumeOffset)
    {
      if (this.nextConsumeOffset.hasOwnProperty(kiter402))
      {
        var viter403 = this.nextConsumeOffset[kiter402];
        output.writeString(kiter402);
        viter403.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.MAP, this.records.length);
    for (var iter404 in this.records)
    {
      if (this.records.hasOwnProperty(iter404))
      {
        iter404 = this.records[iter404];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(iter404));
        for (var kiter405 in iter404)
        {
          if (iter404.hasOwnProperty(kiter405))
          {
            var viter406 = iter404[kiter405];
            output.writeString(kiter405);
            viter406.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter407 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter407))
      {
        iter407 = this.keys[iter407];
        output.writeString(iter407);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.throttled !== null && this.throttled !== undefined) {
    output.writeFieldBegin('throttled', Thrift.Type.BOOL, 4);
    output.writeBool(this.throttled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EditConsumeRequest = function(args) {
  this.tableName = null;
  this.partitionId = null;
  this.subscriberName = null;
  this.consumeNumber = null;
  this.consumeOffset = -1;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.partitionId !== undefined) {
      this.partitionId = args.partitionId;
    }
    if (args.subscriberName !== undefined) {
      this.subscriberName = args.subscriberName;
    }
    if (args.consumeNumber !== undefined) {
      this.consumeNumber = args.consumeNumber;
    }
    if (args.consumeOffset !== undefined) {
      this.consumeOffset = args.consumeOffset;
    }
  }
};
EditConsumeRequest.prototype = {};
EditConsumeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.partitionId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subscriberName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consumeNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.consumeOffset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditConsumeRequest.prototype.write = function(output) {
  output.writeStructBegin('EditConsumeRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.partitionId !== null && this.partitionId !== undefined) {
    output.writeFieldBegin('partitionId', Thrift.Type.I32, 2);
    output.writeI32(this.partitionId);
    output.writeFieldEnd();
  }
  if (this.subscriberName !== null && this.subscriberName !== undefined) {
    output.writeFieldBegin('subscriberName', Thrift.Type.STRING, 3);
    output.writeString(this.subscriberName);
    output.writeFieldEnd();
  }
  if (this.consumeNumber !== null && this.consumeNumber !== undefined) {
    output.writeFieldBegin('consumeNumber', Thrift.Type.I32, 4);
    output.writeI32(this.consumeNumber);
    output.writeFieldEnd();
  }
  if (this.consumeOffset !== null && this.consumeOffset !== undefined) {
    output.writeFieldBegin('consumeOffset', Thrift.Type.I64, 5);
    output.writeI64(this.consumeOffset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EditConsumeResult = function(args) {
  this.nextConsumeOffset = null;
  this.rowEdits = null;
  this.throttled = null;
  if (args) {
    if (args.nextConsumeOffset !== undefined) {
      this.nextConsumeOffset = args.nextConsumeOffset;
    }
    if (args.rowEdits !== undefined) {
      this.rowEdits = args.rowEdits;
    }
    if (args.throttled !== undefined) {
      this.throttled = args.throttled;
    }
  }
};
EditConsumeResult.prototype = {};
EditConsumeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nextConsumeOffset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size408 = 0;
        var _rtmp3412;
        this.rowEdits = [];
        var _etype411 = 0;
        _rtmp3412 = input.readListBegin();
        _etype411 = _rtmp3412.etype;
        _size408 = _rtmp3412.size;
        for (var _i413 = 0; _i413 < _size408; ++_i413)
        {
          var elem414 = null;
          elem414 = new RowEdit();
          elem414.read(input);
          this.rowEdits.push(elem414);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.throttled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditConsumeResult.prototype.write = function(output) {
  output.writeStructBegin('EditConsumeResult');
  if (this.nextConsumeOffset !== null && this.nextConsumeOffset !== undefined) {
    output.writeFieldBegin('nextConsumeOffset', Thrift.Type.I64, 1);
    output.writeI64(this.nextConsumeOffset);
    output.writeFieldEnd();
  }
  if (this.rowEdits !== null && this.rowEdits !== undefined) {
    output.writeFieldBegin('rowEdits', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowEdits.length);
    for (var iter415 in this.rowEdits)
    {
      if (this.rowEdits.hasOwnProperty(iter415))
      {
        iter415 = this.rowEdits[iter415];
        iter415.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.throttled !== null && this.throttled !== undefined) {
    output.writeFieldBegin('throttled', Thrift.Type.BOOL, 3);
    output.writeBool(this.throttled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataCommitRequest = function(args) {
  this.tableName = null;
  this.partitionId = null;
  this.subscriberName = null;
  this.lastConsumedOffset = null;
  this.commitNumber = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.partitionId !== undefined) {
      this.partitionId = args.partitionId;
    }
    if (args.subscriberName !== undefined) {
      this.subscriberName = args.subscriberName;
    }
    if (args.lastConsumedOffset !== undefined) {
      this.lastConsumedOffset = args.lastConsumedOffset;
    }
    if (args.commitNumber !== undefined) {
      this.commitNumber = args.commitNumber;
    }
  }
};
DataCommitRequest.prototype = {};
DataCommitRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.partitionId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subscriberName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size416 = 0;
        var _rtmp3420;
        this.lastConsumedOffset = {};
        var _ktype417 = 0;
        var _vtype418 = 0;
        _rtmp3420 = input.readMapBegin();
        _ktype417 = _rtmp3420.ktype;
        _vtype418 = _rtmp3420.vtype;
        _size416 = _rtmp3420.size;
        for (var _i421 = 0; _i421 < _size416; ++_i421)
        {
          if (_i421 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key422 = null;
          var val423 = null;
          key422 = input.readString().value;
          val423 = new Datum();
          val423.read(input);
          this.lastConsumedOffset[key422] = val423;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.commitNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataCommitRequest.prototype.write = function(output) {
  output.writeStructBegin('DataCommitRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.partitionId !== null && this.partitionId !== undefined) {
    output.writeFieldBegin('partitionId', Thrift.Type.I32, 2);
    output.writeI32(this.partitionId);
    output.writeFieldEnd();
  }
  if (this.subscriberName !== null && this.subscriberName !== undefined) {
    output.writeFieldBegin('subscriberName', Thrift.Type.STRING, 3);
    output.writeString(this.subscriberName);
    output.writeFieldEnd();
  }
  if (this.lastConsumedOffset !== null && this.lastConsumedOffset !== undefined) {
    output.writeFieldBegin('lastConsumedOffset', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.lastConsumedOffset));
    for (var kiter424 in this.lastConsumedOffset)
    {
      if (this.lastConsumedOffset.hasOwnProperty(kiter424))
      {
        var viter425 = this.lastConsumedOffset[kiter424];
        output.writeString(kiter424);
        viter425.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.commitNumber !== null && this.commitNumber !== undefined) {
    output.writeFieldBegin('commitNumber', Thrift.Type.I32, 5);
    output.writeI32(this.commitNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataCommitResult = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DataCommitResult.prototype = {};
DataCommitResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataCommitResult.prototype.write = function(output) {
  output.writeStructBegin('DataCommitResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EditCommitRequest = function(args) {
  this.tableName = null;
  this.partitionId = null;
  this.subscriberName = null;
  this.lastConsumedOffset = null;
  this.commitNumber = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.partitionId !== undefined) {
      this.partitionId = args.partitionId;
    }
    if (args.subscriberName !== undefined) {
      this.subscriberName = args.subscriberName;
    }
    if (args.lastConsumedOffset !== undefined) {
      this.lastConsumedOffset = args.lastConsumedOffset;
    }
    if (args.commitNumber !== undefined) {
      this.commitNumber = args.commitNumber;
    }
  }
};
EditCommitRequest.prototype = {};
EditCommitRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.partitionId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subscriberName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.lastConsumedOffset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.commitNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditCommitRequest.prototype.write = function(output) {
  output.writeStructBegin('EditCommitRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.partitionId !== null && this.partitionId !== undefined) {
    output.writeFieldBegin('partitionId', Thrift.Type.I32, 2);
    output.writeI32(this.partitionId);
    output.writeFieldEnd();
  }
  if (this.subscriberName !== null && this.subscriberName !== undefined) {
    output.writeFieldBegin('subscriberName', Thrift.Type.STRING, 3);
    output.writeString(this.subscriberName);
    output.writeFieldEnd();
  }
  if (this.lastConsumedOffset !== null && this.lastConsumedOffset !== undefined) {
    output.writeFieldBegin('lastConsumedOffset', Thrift.Type.I64, 4);
    output.writeI64(this.lastConsumedOffset);
    output.writeFieldEnd();
  }
  if (this.commitNumber !== null && this.commitNumber !== undefined) {
    output.writeFieldBegin('commitNumber', Thrift.Type.I32, 5);
    output.writeI32(this.commitNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EditCommitResult = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
EditCommitResult.prototype = {};
EditCommitResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditCommitResult.prototype.write = function(output) {
  output.writeStructBegin('EditCommitResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConsumedOffset = function(args) {
  this.consumedDataOffset = null;
  this.dataConsumeFinished = null;
  this.consumedEditOffset = null;
  if (args) {
    if (args.consumedDataOffset !== undefined) {
      this.consumedDataOffset = args.consumedDataOffset;
    }
    if (args.dataConsumeFinished !== undefined) {
      this.dataConsumeFinished = args.dataConsumeFinished;
    }
    if (args.consumedEditOffset !== undefined) {
      this.consumedEditOffset = args.consumedEditOffset;
    }
  }
};
ConsumedOffset.prototype = {};
ConsumedOffset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size426 = 0;
        var _rtmp3430;
        this.consumedDataOffset = {};
        var _ktype427 = 0;
        var _vtype428 = 0;
        _rtmp3430 = input.readMapBegin();
        _ktype427 = _rtmp3430.ktype;
        _vtype428 = _rtmp3430.vtype;
        _size426 = _rtmp3430.size;
        for (var _i431 = 0; _i431 < _size426; ++_i431)
        {
          if (_i431 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key432 = null;
          var val433 = null;
          key432 = input.readString().value;
          val433 = new Datum();
          val433.read(input);
          this.consumedDataOffset[key432] = val433;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.dataConsumeFinished = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.consumedEditOffset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConsumedOffset.prototype.write = function(output) {
  output.writeStructBegin('ConsumedOffset');
  if (this.consumedDataOffset !== null && this.consumedDataOffset !== undefined) {
    output.writeFieldBegin('consumedDataOffset', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.consumedDataOffset));
    for (var kiter434 in this.consumedDataOffset)
    {
      if (this.consumedDataOffset.hasOwnProperty(kiter434))
      {
        var viter435 = this.consumedDataOffset[kiter434];
        output.writeString(kiter434);
        viter435.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.dataConsumeFinished !== null && this.dataConsumeFinished !== undefined) {
    output.writeFieldBegin('dataConsumeFinished', Thrift.Type.BOOL, 2);
    output.writeBool(this.dataConsumeFinished);
    output.writeFieldEnd();
  }
  if (this.consumedEditOffset !== null && this.consumedEditOffset !== undefined) {
    output.writeFieldBegin('consumedEditOffset', Thrift.Type.I64, 3);
    output.writeI64(this.consumedEditOffset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommittedOffset = function(args) {
  this.committedDataOffset = null;
  this.dataCommitFinished = null;
  this.committedEditOffset = null;
  if (args) {
    if (args.committedDataOffset !== undefined) {
      this.committedDataOffset = args.committedDataOffset;
    }
    if (args.dataCommitFinished !== undefined) {
      this.dataCommitFinished = args.dataCommitFinished;
    }
    if (args.committedEditOffset !== undefined) {
      this.committedEditOffset = args.committedEditOffset;
    }
  }
};
CommittedOffset.prototype = {};
CommittedOffset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size436 = 0;
        var _rtmp3440;
        this.committedDataOffset = {};
        var _ktype437 = 0;
        var _vtype438 = 0;
        _rtmp3440 = input.readMapBegin();
        _ktype437 = _rtmp3440.ktype;
        _vtype438 = _rtmp3440.vtype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          if (_i441 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key442 = null;
          var val443 = null;
          key442 = input.readString().value;
          val443 = new Datum();
          val443.read(input);
          this.committedDataOffset[key442] = val443;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.dataCommitFinished = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.committedEditOffset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommittedOffset.prototype.write = function(output) {
  output.writeStructBegin('CommittedOffset');
  if (this.committedDataOffset !== null && this.committedDataOffset !== undefined) {
    output.writeFieldBegin('committedDataOffset', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.committedDataOffset));
    for (var kiter444 in this.committedDataOffset)
    {
      if (this.committedDataOffset.hasOwnProperty(kiter444))
      {
        var viter445 = this.committedDataOffset[kiter444];
        output.writeString(kiter444);
        viter445.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.dataCommitFinished !== null && this.dataCommitFinished !== undefined) {
    output.writeFieldBegin('dataCommitFinished', Thrift.Type.BOOL, 2);
    output.writeBool(this.dataCommitFinished);
    output.writeFieldEnd();
  }
  if (this.committedEditOffset !== null && this.committedEditOffset !== undefined) {
    output.writeFieldBegin('committedEditOffset', Thrift.Type.I64, 3);
    output.writeI64(this.committedEditOffset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

