//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


UserType = {
  'DEV_XIAOMI_SSO' : 1,
  'DEV_XIAOMI' : 2,
  'APP_SECRET' : 10,
  'APP_ACCESS_TOKEN' : 11,
  'APP_XIAOMI_SSO' : 12,
  'APP_ANONYMOUS' : 13
};
MacAlgorithm = {
  'HmacMD5' : 1,
  'HmacSHA1' : 2,
  'HmacSHA256' : 3
};
AppUserAuthProvider = {
  'XIAOMI_SSO' : 1,
  'XIAOMI_OAUTH' : 2,
  'QQ_OAUTH' : 3,
  'SINA_OAUTH' : 4,
  'RENREN_OAUTH' : 5
};
Credential = function(args) {
  this.type = null;
  this.secretKeyId = null;
  this.secretKey = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.secretKeyId !== undefined) {
      this.secretKeyId = args.secretKeyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field secretKeyId is unset!');
    }
    if (args.secretKey !== undefined) {
      this.secretKey = args.secretKey;
    }
  }
};
Credential.prototype = {};
Credential.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.secretKeyId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.secretKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Credential.prototype.write = function(output) {
  output.writeStructBegin('Credential');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.secretKeyId !== null && this.secretKeyId !== undefined) {
    output.writeFieldBegin('secretKeyId', Thrift.Type.STRING, 2);
    output.writeString(this.secretKeyId);
    output.writeFieldEnd();
  }
  if (this.secretKey !== null && this.secretKey !== undefined) {
    output.writeFieldBegin('secretKey', Thrift.Type.STRING, 3);
    output.writeString(this.secretKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HttpAuthorizationHeader = function(args) {
  this.version = 'SDS-V1';
  this.userType = 13;
  this.secretKeyId = null;
  this.secretKey = null;
  this.signature = null;
  this.algorithm = null;
  this.signedHeaders = [];
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
    if (args.secretKeyId !== undefined) {
      this.secretKeyId = args.secretKeyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field secretKeyId is unset!');
    }
    if (args.secretKey !== undefined) {
      this.secretKey = args.secretKey;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
    if (args.algorithm !== undefined) {
      this.algorithm = args.algorithm;
    }
    if (args.signedHeaders !== undefined) {
      this.signedHeaders = args.signedHeaders;
    }
  }
};
HttpAuthorizationHeader.prototype = {};
HttpAuthorizationHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.secretKeyId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.secretKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.algorithm = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.signedHeaders = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.signedHeaders.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HttpAuthorizationHeader.prototype.write = function(output) {
  output.writeStructBegin('HttpAuthorizationHeader');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 2);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.secretKeyId !== null && this.secretKeyId !== undefined) {
    output.writeFieldBegin('secretKeyId', Thrift.Type.STRING, 3);
    output.writeString(this.secretKeyId);
    output.writeFieldEnd();
  }
  if (this.secretKey !== null && this.secretKey !== undefined) {
    output.writeFieldBegin('secretKey', Thrift.Type.STRING, 4);
    output.writeString(this.secretKey);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 5);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.algorithm !== null && this.algorithm !== undefined) {
    output.writeFieldBegin('algorithm', Thrift.Type.I32, 6);
    output.writeI32(this.algorithm);
    output.writeFieldEnd();
  }
  if (this.signedHeaders !== null && this.signedHeaders !== undefined) {
    output.writeFieldBegin('signedHeaders', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.signedHeaders.length);
    for (var iter7 in this.signedHeaders)
    {
      if (this.signedHeaders.hasOwnProperty(iter7))
      {
        iter7 = this.signedHeaders[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SIGNATURE_SUPPORT = {1 : false,
2 : true,
10 : true,
11 : true,
12 : false,
13 : false
};
HK_HOST = 'Host';
HK_TIMESTAMP = 'X-Xiaomi-Timestamp';
HK_CONTENT_MD5 = 'X-Xiaomi-Content-MD5';
HK_AUTHORIZATION = 'Authorization';
SUGGESTED_SIGNATURE_HEADERS = ['Host','X-Xiaomi-Timestamp','X-Xiaomi-Content-MD5'];
MAX_CONTENT_SIZE = 524288;
