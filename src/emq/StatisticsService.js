//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

StatisticsService_setUserQuota_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_setUserQuota_args.prototype = {};
StatisticsService_setUserQuota_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new SetUserQuotaRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setUserQuota_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setUserQuota_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setUserQuota_result = function(args) {
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_setUserQuota_result.prototype = {};
StatisticsService_setUserQuota_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setUserQuota_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setUserQuota_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserQuota_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_getUserQuota_args.prototype = {};
StatisticsService_getUserQuota_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new GetUserQuotaRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserQuota_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserQuota_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserQuota_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_getUserQuota_result.prototype = {};
StatisticsService_getUserQuota_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetUserQuotaResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserQuota_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserQuota_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserUsedQuota_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_getUserUsedQuota_args.prototype = {};
StatisticsService_getUserUsedQuota_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new GetUserUsedQuotaRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserUsedQuota_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserUsedQuota_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserUsedQuota_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_getUserUsedQuota_result.prototype = {};
StatisticsService_getUserUsedQuota_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetUserQuotaResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserUsedQuota_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserUsedQuota_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setUserInfo_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_setUserInfo_args.prototype = {};
StatisticsService_setUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new SetUserInfoRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setUserInfo_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setUserInfo_result = function(args) {
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_setUserInfo_result.prototype = {};
StatisticsService_setUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setUserInfo_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserInfo_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_getUserInfo_args.prototype = {};
StatisticsService_getUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new GetUserInfoRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserInfo_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_getUserInfo_result.prototype = {};
StatisticsService_getUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetUserInfoResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_addQueueAlertPolicy_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_addQueueAlertPolicy_args.prototype = {};
StatisticsService_addQueueAlertPolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new AddAlertPolicyRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_addQueueAlertPolicy_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_addQueueAlertPolicy_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_addQueueAlertPolicy_result = function(args) {
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_addQueueAlertPolicy_result.prototype = {};
StatisticsService_addQueueAlertPolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_addQueueAlertPolicy_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_addQueueAlertPolicy_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_deleteQueueAlertPolicy_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_deleteQueueAlertPolicy_args.prototype = {};
StatisticsService_deleteQueueAlertPolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new DeleteAlertPolicyRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_deleteQueueAlertPolicy_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_deleteQueueAlertPolicy_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_deleteQueueAlertPolicy_result = function(args) {
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_deleteQueueAlertPolicy_result.prototype = {};
StatisticsService_deleteQueueAlertPolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_deleteQueueAlertPolicy_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_deleteQueueAlertPolicy_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_listQueueAlertPolicies_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_listQueueAlertPolicies_args.prototype = {};
StatisticsService_listQueueAlertPolicies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ListQueueAlertPoliciesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_listQueueAlertPolicies_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_listQueueAlertPolicies_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_listQueueAlertPolicies_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_listQueueAlertPolicies_result.prototype = {};
StatisticsService_listQueueAlertPolicies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ListQueueAlertPoliciesResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_listQueueAlertPolicies_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_listQueueAlertPolicies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setQueueDailyStatisticsState_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_setQueueDailyStatisticsState_args.prototype = {};
StatisticsService_setQueueDailyStatisticsState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new SetQueueDailyStatisticsStateRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setQueueDailyStatisticsState_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setQueueDailyStatisticsState_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setQueueDailyStatisticsState_result = function(args) {
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_setQueueDailyStatisticsState_result.prototype = {};
StatisticsService_setQueueDailyStatisticsState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setQueueDailyStatisticsState_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setQueueDailyStatisticsState_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getQueueDailyStatisticsState_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_getQueueDailyStatisticsState_args.prototype = {};
StatisticsService_getQueueDailyStatisticsState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new GetQueueDailyStatisticsStateRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getQueueDailyStatisticsState_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getQueueDailyStatisticsState_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getQueueDailyStatisticsState_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_getQueueDailyStatisticsState_result.prototype = {};
StatisticsService_getQueueDailyStatisticsState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetQueueDailyStatisticsStateResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getQueueDailyStatisticsState_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getQueueDailyStatisticsState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(StatisticsServiceClient, EMQBaseServiceClient);
StatisticsServiceClient.prototype.setUserQuota = function(request, callback) {
  if (callback === undefined) {
    this.send_setUserQuota(request);
    this.recv_setUserQuota();
  } else {
    var postData = this.send_setUserQuota(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setUserQuota);
  }
};

StatisticsServiceClient.prototype.send_setUserQuota = function(request, callback) {
  this.output.writeMessageBegin('setUserQuota', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_setUserQuota_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_setUserQuota = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_setUserQuota_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
StatisticsServiceClient.prototype.getUserQuota = function(request, callback) {
  if (callback === undefined) {
    this.send_getUserQuota(request);
    return this.recv_getUserQuota();
  } else {
    var postData = this.send_getUserQuota(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUserQuota);
  }
};

StatisticsServiceClient.prototype.send_getUserQuota = function(request, callback) {
  this.output.writeMessageBegin('getUserQuota', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_getUserQuota_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_getUserQuota = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_getUserQuota_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserQuota failed: unknown result';
};
StatisticsServiceClient.prototype.getUserUsedQuota = function(request, callback) {
  if (callback === undefined) {
    this.send_getUserUsedQuota(request);
    return this.recv_getUserUsedQuota();
  } else {
    var postData = this.send_getUserUsedQuota(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUserUsedQuota);
  }
};

StatisticsServiceClient.prototype.send_getUserUsedQuota = function(request, callback) {
  this.output.writeMessageBegin('getUserUsedQuota', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_getUserUsedQuota_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_getUserUsedQuota = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_getUserUsedQuota_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserUsedQuota failed: unknown result';
};
StatisticsServiceClient.prototype.setUserInfo = function(request, callback) {
  if (callback === undefined) {
    this.send_setUserInfo(request);
    this.recv_setUserInfo();
  } else {
    var postData = this.send_setUserInfo(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setUserInfo);
  }
};

StatisticsServiceClient.prototype.send_setUserInfo = function(request, callback) {
  this.output.writeMessageBegin('setUserInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_setUserInfo_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_setUserInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_setUserInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
StatisticsServiceClient.prototype.getUserInfo = function(request, callback) {
  if (callback === undefined) {
    this.send_getUserInfo(request);
    return this.recv_getUserInfo();
  } else {
    var postData = this.send_getUserInfo(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUserInfo);
  }
};

StatisticsServiceClient.prototype.send_getUserInfo = function(request, callback) {
  this.output.writeMessageBegin('getUserInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_getUserInfo_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_getUserInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_getUserInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserInfo failed: unknown result';
};
StatisticsServiceClient.prototype.addQueueAlertPolicy = function(request, callback) {
  if (callback === undefined) {
    this.send_addQueueAlertPolicy(request);
    this.recv_addQueueAlertPolicy();
  } else {
    var postData = this.send_addQueueAlertPolicy(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addQueueAlertPolicy);
  }
};

StatisticsServiceClient.prototype.send_addQueueAlertPolicy = function(request, callback) {
  this.output.writeMessageBegin('addQueueAlertPolicy', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_addQueueAlertPolicy_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_addQueueAlertPolicy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_addQueueAlertPolicy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
StatisticsServiceClient.prototype.deleteQueueAlertPolicy = function(request, callback) {
  if (callback === undefined) {
    this.send_deleteQueueAlertPolicy(request);
    this.recv_deleteQueueAlertPolicy();
  } else {
    var postData = this.send_deleteQueueAlertPolicy(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteQueueAlertPolicy);
  }
};

StatisticsServiceClient.prototype.send_deleteQueueAlertPolicy = function(request, callback) {
  this.output.writeMessageBegin('deleteQueueAlertPolicy', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_deleteQueueAlertPolicy_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_deleteQueueAlertPolicy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_deleteQueueAlertPolicy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
StatisticsServiceClient.prototype.listQueueAlertPolicies = function(request, callback) {
  if (callback === undefined) {
    this.send_listQueueAlertPolicies(request);
    return this.recv_listQueueAlertPolicies();
  } else {
    var postData = this.send_listQueueAlertPolicies(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listQueueAlertPolicies);
  }
};

StatisticsServiceClient.prototype.send_listQueueAlertPolicies = function(request, callback) {
  this.output.writeMessageBegin('listQueueAlertPolicies', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_listQueueAlertPolicies_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_listQueueAlertPolicies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_listQueueAlertPolicies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listQueueAlertPolicies failed: unknown result';
};
StatisticsServiceClient.prototype.setQueueDailyStatisticsState = function(request, callback) {
  if (callback === undefined) {
    this.send_setQueueDailyStatisticsState(request);
    this.recv_setQueueDailyStatisticsState();
  } else {
    var postData = this.send_setQueueDailyStatisticsState(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setQueueDailyStatisticsState);
  }
};

StatisticsServiceClient.prototype.send_setQueueDailyStatisticsState = function(request, callback) {
  this.output.writeMessageBegin('setQueueDailyStatisticsState', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_setQueueDailyStatisticsState_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_setQueueDailyStatisticsState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_setQueueDailyStatisticsState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
StatisticsServiceClient.prototype.getQueueDailyStatisticsState = function(request, callback) {
  if (callback === undefined) {
    this.send_getQueueDailyStatisticsState(request);
    return this.recv_getQueueDailyStatisticsState();
  } else {
    var postData = this.send_getQueueDailyStatisticsState(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getQueueDailyStatisticsState);
  }
};

StatisticsServiceClient.prototype.send_getQueueDailyStatisticsState = function(request, callback) {
  this.output.writeMessageBegin('getQueueDailyStatisticsState', Thrift.MessageType.CALL, this.seqid);
  var args = new StatisticsService_getQueueDailyStatisticsState_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StatisticsServiceClient.prototype.recv_getQueueDailyStatisticsState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StatisticsService_getQueueDailyStatisticsState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getQueueDailyStatisticsState failed: unknown result';
};
