//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


GalaxyEmqServiceException = function(args) {
  this.errorCode = null;
  this.errMsg = null;
  this.details = null;
  this.requestId = null;
  if (args) {
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.errMsg !== undefined) {
      this.errMsg = args.errMsg;
    }
    if (args.details !== undefined) {
      this.details = args.details;
    }
    if (args.requestId !== undefined) {
      this.requestId = args.requestId;
    }
  }
};
Thrift.inherits(GalaxyEmqServiceException, Thrift.TException);
GalaxyEmqServiceException.prototype.name = 'GalaxyEmqServiceException';
GalaxyEmqServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GalaxyEmqServiceException.prototype.write = function(output) {
  output.writeStructBegin('GalaxyEmqServiceException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 2);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 3);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 4);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Version = function(args) {
  this.major = 1;
  this.minor = 0;
  this.revision = 0;
  this.date = '19700101';
  this.details = '';
  if (args) {
    if (args.major !== undefined) {
      this.major = args.major;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field major is unset!');
    }
    if (args.minor !== undefined) {
      this.minor = args.minor;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field minor is unset!');
    }
    if (args.revision !== undefined) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
    if (args.date !== undefined) {
      this.date = args.date;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field date is unset!');
    }
    if (args.details !== undefined) {
      this.details = args.details;
    }
  }
};
Version.prototype = {};
Version.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.major = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.minor = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.revision = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Version.prototype.write = function(output) {
  output.writeStructBegin('Version');
  if (this.major !== null && this.major !== undefined) {
    output.writeFieldBegin('major', Thrift.Type.I32, 1);
    output.writeI32(this.major);
    output.writeFieldEnd();
  }
  if (this.minor !== null && this.minor !== undefined) {
    output.writeFieldBegin('minor', Thrift.Type.I32, 2);
    output.writeI32(this.minor);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I32, 3);
    output.writeI32(this.revision);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 4);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 5);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

