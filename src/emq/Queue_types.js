//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Permission = {
  'NONE' : 0,
  'SEND_MESSAGE' : 1,
  'RECEIVE_MESSAGE' : 2,
  'SEND_RECEIVE_MESSAGE' : 3,
  'HANDLE_MESSAGE' : 4,
  'SEND_HANDLE_MESSAGE' : 5,
  'GET_QUEUE_INFO' : 6,
  'USE_QUEUE' : 7,
  'ADMIN_QUEUE' : 8,
  'FULL_CONTROL' : 9
};
QueueAttribute = function(args) {
  this.delaySeconds = null;
  this.invisibilitySeconds = null;
  this.receiveMessageWaitSeconds = null;
  this.receiveMessageMaximumNumber = null;
  this.messageRetentionSeconds = null;
  this.messageMaximumBytes = null;
  this.partitionNumber = null;
  this.userAttributes = null;
  if (args) {
    if (args.delaySeconds !== undefined) {
      this.delaySeconds = args.delaySeconds;
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    }
    if (args.receiveMessageWaitSeconds !== undefined) {
      this.receiveMessageWaitSeconds = args.receiveMessageWaitSeconds;
    }
    if (args.receiveMessageMaximumNumber !== undefined) {
      this.receiveMessageMaximumNumber = args.receiveMessageMaximumNumber;
    }
    if (args.messageRetentionSeconds !== undefined) {
      this.messageRetentionSeconds = args.messageRetentionSeconds;
    }
    if (args.messageMaximumBytes !== undefined) {
      this.messageMaximumBytes = args.messageMaximumBytes;
    }
    if (args.partitionNumber !== undefined) {
      this.partitionNumber = args.partitionNumber;
    }
    if (args.userAttributes !== undefined) {
      this.userAttributes = args.userAttributes;
    }
  }
};
QueueAttribute.prototype = {};
QueueAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.delaySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.receiveMessageWaitSeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.receiveMessageMaximumNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.messageRetentionSeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.messageMaximumBytes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.partitionNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.userAttributes = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.userAttributes[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueAttribute.prototype.write = function(output) {
  output.writeStructBegin('QueueAttribute');
  if (this.delaySeconds !== null && this.delaySeconds !== undefined) {
    output.writeFieldBegin('delaySeconds', Thrift.Type.I32, 1);
    output.writeI32(this.delaySeconds);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 2);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  if (this.receiveMessageWaitSeconds !== null && this.receiveMessageWaitSeconds !== undefined) {
    output.writeFieldBegin('receiveMessageWaitSeconds', Thrift.Type.I32, 3);
    output.writeI32(this.receiveMessageWaitSeconds);
    output.writeFieldEnd();
  }
  if (this.receiveMessageMaximumNumber !== null && this.receiveMessageMaximumNumber !== undefined) {
    output.writeFieldBegin('receiveMessageMaximumNumber', Thrift.Type.I32, 4);
    output.writeI32(this.receiveMessageMaximumNumber);
    output.writeFieldEnd();
  }
  if (this.messageRetentionSeconds !== null && this.messageRetentionSeconds !== undefined) {
    output.writeFieldBegin('messageRetentionSeconds', Thrift.Type.I32, 5);
    output.writeI32(this.messageRetentionSeconds);
    output.writeFieldEnd();
  }
  if (this.messageMaximumBytes !== null && this.messageMaximumBytes !== undefined) {
    output.writeFieldBegin('messageMaximumBytes', Thrift.Type.I32, 6);
    output.writeI32(this.messageMaximumBytes);
    output.writeFieldEnd();
  }
  if (this.partitionNumber !== null && this.partitionNumber !== undefined) {
    output.writeFieldBegin('partitionNumber', Thrift.Type.I32, 7);
    output.writeI32(this.partitionNumber);
    output.writeFieldEnd();
  }
  if (this.userAttributes !== null && this.userAttributes !== undefined) {
    output.writeFieldBegin('userAttributes', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userAttributes));
    for (var kiter8 in this.userAttributes)
    {
      if (this.userAttributes.hasOwnProperty(kiter8))
      {
        var viter9 = this.userAttributes[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueState = function(args) {
  this.createTimestamp = null;
  this.lastModifiedTimestamp = null;
  this.approximateMessageNumber = null;
  this.approximateAvailableMessageNumber = null;
  this.approximateInvisibilityMessageNumber = null;
  if (args) {
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createTimestamp is unset!');
    }
    if (args.lastModifiedTimestamp !== undefined) {
      this.lastModifiedTimestamp = args.lastModifiedTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lastModifiedTimestamp is unset!');
    }
    if (args.approximateMessageNumber !== undefined) {
      this.approximateMessageNumber = args.approximateMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateMessageNumber is unset!');
    }
    if (args.approximateAvailableMessageNumber !== undefined) {
      this.approximateAvailableMessageNumber = args.approximateAvailableMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateAvailableMessageNumber is unset!');
    }
    if (args.approximateInvisibilityMessageNumber !== undefined) {
      this.approximateInvisibilityMessageNumber = args.approximateInvisibilityMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateInvisibilityMessageNumber is unset!');
    }
  }
};
QueueState.prototype = {};
QueueState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.approximateMessageNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.approximateAvailableMessageNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.approximateInvisibilityMessageNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueState.prototype.write = function(output) {
  output.writeStructBegin('QueueState');
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 1);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifiedTimestamp !== null && this.lastModifiedTimestamp !== undefined) {
    output.writeFieldBegin('lastModifiedTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.lastModifiedTimestamp);
    output.writeFieldEnd();
  }
  if (this.approximateMessageNumber !== null && this.approximateMessageNumber !== undefined) {
    output.writeFieldBegin('approximateMessageNumber', Thrift.Type.I64, 3);
    output.writeI64(this.approximateMessageNumber);
    output.writeFieldEnd();
  }
  if (this.approximateAvailableMessageNumber !== null && this.approximateAvailableMessageNumber !== undefined) {
    output.writeFieldBegin('approximateAvailableMessageNumber', Thrift.Type.I64, 4);
    output.writeI64(this.approximateAvailableMessageNumber);
    output.writeFieldEnd();
  }
  if (this.approximateInvisibilityMessageNumber !== null && this.approximateInvisibilityMessageNumber !== undefined) {
    output.writeFieldBegin('approximateInvisibilityMessageNumber', Thrift.Type.I64, 5);
    output.writeI64(this.approximateInvisibilityMessageNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateQueueRequest = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    }
  }
};
CreateQueueRequest.prototype = {};
CreateQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateQueueResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
  }
};
CreateQueueResponse.prototype = {};
CreateQueueResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQueueResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateQueueResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteQueueRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
DeleteQueueRequest.prototype = {};
DeleteQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PurgeQueueRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
PurgeQueueRequest.prototype = {};
PurgeQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PurgeQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('PurgeQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueAttributesRequest = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    }
  }
};
SetQueueAttributesRequest.prototype = {};
SetQueueAttributesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueAttributesRequest.prototype.write = function(output) {
  output.writeStructBegin('SetQueueAttributesRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueAttributesResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
  }
};
SetQueueAttributesResponse.prototype = {};
SetQueueAttributesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueAttributesResponse.prototype.write = function(output) {
  output.writeStructBegin('SetQueueAttributesResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetQueueInfoRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
GetQueueInfoRequest.prototype = {};
GetQueueInfoRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetQueueInfoRequest.prototype.write = function(output) {
  output.writeStructBegin('GetQueueInfoRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetQueueInfoResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  this.queueState = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
    if (args.queueState !== undefined) {
      this.queueState = args.queueState;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueState is unset!');
    }
  }
};
GetQueueInfoResponse.prototype = {};
GetQueueInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueState = new QueueState();
        this.queueState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetQueueInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetQueueInfoResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.queueState !== null && this.queueState !== undefined) {
    output.writeFieldBegin('queueState', Thrift.Type.STRUCT, 3);
    this.queueState.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListQueueRequest = function(args) {
  this.queueNamePrefix = '';
  if (args) {
    if (args.queueNamePrefix !== undefined) {
      this.queueNamePrefix = args.queueNamePrefix;
    }
  }
};
ListQueueRequest.prototype = {};
ListQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueNamePrefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('ListQueueRequest');
  if (this.queueNamePrefix !== null && this.queueNamePrefix !== undefined) {
    output.writeFieldBegin('queueNamePrefix', Thrift.Type.STRING, 1);
    output.writeString(this.queueNamePrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListQueueResponse = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
ListQueueResponse.prototype = {};
ListQueueResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.queueName = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString().value;
          this.queueName.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListQueueResponse.prototype.write = function(output) {
  output.writeStructBegin('ListQueueResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.queueName.length);
    for (var iter17 in this.queueName)
    {
      if (this.queueName.hasOwnProperty(iter17))
      {
        iter17 = this.queueName[iter17];
        output.writeString(iter17);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetPermissionRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  this.permission = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
SetPermissionRequest.prototype = {};
SetPermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetPermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('SetPermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 3);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RevokePermissionRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
  }
};
RevokePermissionRequest.prototype = {};
RevokePermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RevokePermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('RevokePermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
QueryPermissionRequest.prototype = {};
QueryPermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionResponse = function(args) {
  this.permission = null;
  if (args) {
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
QueryPermissionResponse.prototype = {};
QueryPermissionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionResponse.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionResponse');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionForIdRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
  }
};
QueryPermissionForIdRequest.prototype = {};
QueryPermissionForIdRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionForIdRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionForIdRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionForIdResponse = function(args) {
  this.permission = null;
  if (args) {
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
QueryPermissionForIdResponse.prototype = {};
QueryPermissionForIdResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionForIdResponse.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionForIdResponse');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListPermissionsRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
ListPermissionsRequest.prototype = {};
ListPermissionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListPermissionsRequest.prototype.write = function(output) {
  output.writeStructBegin('ListPermissionsRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListPermissionsResponse = function(args) {
  this.permissionList = null;
  if (args) {
    if (args.permissionList !== undefined) {
      this.permissionList = args.permissionList;
    }
  }
};
ListPermissionsResponse.prototype = {};
ListPermissionsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.permissionList = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          if (_i23 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key24 = null;
          var val25 = null;
          key24 = input.readString().value;
          val25 = input.readI32().value;
          this.permissionList[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListPermissionsResponse.prototype.write = function(output) {
  output.writeStructBegin('ListPermissionsResponse');
  if (this.permissionList !== null && this.permissionList !== undefined) {
    output.writeFieldBegin('permissionList', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.permissionList));
    for (var kiter26 in this.permissionList)
    {
      if (this.permissionList.hasOwnProperty(kiter26))
      {
        var viter27 = this.permissionList[kiter26];
        output.writeString(kiter26);
        output.writeI32(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

