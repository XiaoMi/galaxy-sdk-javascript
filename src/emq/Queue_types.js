//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Permission = {
  'NONE' : 0,
  'SEND_MESSAGE' : 1,
  'RECEIVE_MESSAGE' : 2,
  'SEND_RECEIVE_MESSAGE' : 3,
  'HANDLE_MESSAGE' : 4,
  'SEND_HANDLE_MESSAGE' : 5,
  'GET_QUEUE_INFO' : 6,
  'USE_QUEUE' : 7,
  'ADMIN_QUEUE' : 8,
  'FULL_CONTROL' : 9
};
QueueAttribute = function(args) {
  this.delaySeconds = null;
  this.invisibilitySeconds = null;
  this.receiveMessageWaitSeconds = null;
  this.receiveMessageMaximumNumber = null;
  this.messageRetentionSeconds = null;
  this.messageMaximumBytes = null;
  this.partitionNumber = null;
  this.userAttributes = null;
  if (args) {
    if (args.delaySeconds !== undefined) {
      this.delaySeconds = args.delaySeconds;
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    }
    if (args.receiveMessageWaitSeconds !== undefined) {
      this.receiveMessageWaitSeconds = args.receiveMessageWaitSeconds;
    }
    if (args.receiveMessageMaximumNumber !== undefined) {
      this.receiveMessageMaximumNumber = args.receiveMessageMaximumNumber;
    }
    if (args.messageRetentionSeconds !== undefined) {
      this.messageRetentionSeconds = args.messageRetentionSeconds;
    }
    if (args.messageMaximumBytes !== undefined) {
      this.messageMaximumBytes = args.messageMaximumBytes;
    }
    if (args.partitionNumber !== undefined) {
      this.partitionNumber = args.partitionNumber;
    }
    if (args.userAttributes !== undefined) {
      this.userAttributes = args.userAttributes;
    }
  }
};
QueueAttribute.prototype = {};
QueueAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.delaySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.receiveMessageWaitSeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.receiveMessageMaximumNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.messageRetentionSeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.messageMaximumBytes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.partitionNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.userAttributes = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.userAttributes[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueAttribute.prototype.write = function(output) {
  output.writeStructBegin('QueueAttribute');
  if (this.delaySeconds !== null && this.delaySeconds !== undefined) {
    output.writeFieldBegin('delaySeconds', Thrift.Type.I32, 1);
    output.writeI32(this.delaySeconds);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 2);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  if (this.receiveMessageWaitSeconds !== null && this.receiveMessageWaitSeconds !== undefined) {
    output.writeFieldBegin('receiveMessageWaitSeconds', Thrift.Type.I32, 3);
    output.writeI32(this.receiveMessageWaitSeconds);
    output.writeFieldEnd();
  }
  if (this.receiveMessageMaximumNumber !== null && this.receiveMessageMaximumNumber !== undefined) {
    output.writeFieldBegin('receiveMessageMaximumNumber', Thrift.Type.I32, 4);
    output.writeI32(this.receiveMessageMaximumNumber);
    output.writeFieldEnd();
  }
  if (this.messageRetentionSeconds !== null && this.messageRetentionSeconds !== undefined) {
    output.writeFieldBegin('messageRetentionSeconds', Thrift.Type.I32, 5);
    output.writeI32(this.messageRetentionSeconds);
    output.writeFieldEnd();
  }
  if (this.messageMaximumBytes !== null && this.messageMaximumBytes !== undefined) {
    output.writeFieldBegin('messageMaximumBytes', Thrift.Type.I32, 6);
    output.writeI32(this.messageMaximumBytes);
    output.writeFieldEnd();
  }
  if (this.partitionNumber !== null && this.partitionNumber !== undefined) {
    output.writeFieldBegin('partitionNumber', Thrift.Type.I32, 7);
    output.writeI32(this.partitionNumber);
    output.writeFieldEnd();
  }
  if (this.userAttributes !== null && this.userAttributes !== undefined) {
    output.writeFieldBegin('userAttributes', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userAttributes));
    for (var kiter8 in this.userAttributes)
    {
      if (this.userAttributes.hasOwnProperty(kiter8))
      {
        var viter9 = this.userAttributes[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueState = function(args) {
  this.createTimestamp = null;
  this.lastModifiedTimestamp = null;
  this.approximateMessageNumber = null;
  this.approximateAvailableMessageNumber = null;
  this.approximateInvisibilityMessageNumber = null;
  if (args) {
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createTimestamp is unset!');
    }
    if (args.lastModifiedTimestamp !== undefined) {
      this.lastModifiedTimestamp = args.lastModifiedTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lastModifiedTimestamp is unset!');
    }
    if (args.approximateMessageNumber !== undefined) {
      this.approximateMessageNumber = args.approximateMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateMessageNumber is unset!');
    }
    if (args.approximateAvailableMessageNumber !== undefined) {
      this.approximateAvailableMessageNumber = args.approximateAvailableMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateAvailableMessageNumber is unset!');
    }
    if (args.approximateInvisibilityMessageNumber !== undefined) {
      this.approximateInvisibilityMessageNumber = args.approximateInvisibilityMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateInvisibilityMessageNumber is unset!');
    }
  }
};
QueueState.prototype = {};
QueueState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.approximateMessageNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.approximateAvailableMessageNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.approximateInvisibilityMessageNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueState.prototype.write = function(output) {
  output.writeStructBegin('QueueState');
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 1);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifiedTimestamp !== null && this.lastModifiedTimestamp !== undefined) {
    output.writeFieldBegin('lastModifiedTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.lastModifiedTimestamp);
    output.writeFieldEnd();
  }
  if (this.approximateMessageNumber !== null && this.approximateMessageNumber !== undefined) {
    output.writeFieldBegin('approximateMessageNumber', Thrift.Type.I64, 3);
    output.writeI64(this.approximateMessageNumber);
    output.writeFieldEnd();
  }
  if (this.approximateAvailableMessageNumber !== null && this.approximateAvailableMessageNumber !== undefined) {
    output.writeFieldBegin('approximateAvailableMessageNumber', Thrift.Type.I64, 4);
    output.writeI64(this.approximateAvailableMessageNumber);
    output.writeFieldEnd();
  }
  if (this.approximateInvisibilityMessageNumber !== null && this.approximateInvisibilityMessageNumber !== undefined) {
    output.writeFieldBegin('approximateInvisibilityMessageNumber', Thrift.Type.I64, 5);
    output.writeI64(this.approximateInvisibilityMessageNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Throughput = function(args) {
  this.readQps = null;
  this.writeQps = null;
  if (args) {
    if (args.readQps !== undefined) {
      this.readQps = args.readQps;
    }
    if (args.writeQps !== undefined) {
      this.writeQps = args.writeQps;
    }
  }
};
Throughput.prototype = {};
Throughput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.readQps = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.writeQps = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Throughput.prototype.write = function(output) {
  output.writeStructBegin('Throughput');
  if (this.readQps !== null && this.readQps !== undefined) {
    output.writeFieldBegin('readQps', Thrift.Type.I64, 1);
    output.writeI64(this.readQps);
    output.writeFieldEnd();
  }
  if (this.writeQps !== null && this.writeQps !== undefined) {
    output.writeFieldBegin('writeQps', Thrift.Type.I64, 2);
    output.writeI64(this.writeQps);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueQuota = function(args) {
  this.throughput = null;
  if (args) {
    if (args.throughput !== undefined) {
      this.throughput = args.throughput;
    }
  }
};
QueueQuota.prototype = {};
QueueQuota.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.throughput = new Throughput();
        this.throughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueQuota.prototype.write = function(output) {
  output.writeStructBegin('QueueQuota');
  if (this.throughput !== null && this.throughput !== undefined) {
    output.writeFieldBegin('throughput', Thrift.Type.STRUCT, 2);
    this.throughput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateQueueRequest = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  this.queueQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
  }
};
CreateQueueRequest.prototype = {};
CreateQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 3);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateQueueResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  this.queueQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
  }
};
CreateQueueResponse.prototype = {};
CreateQueueResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQueueResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateQueueResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 3);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteQueueRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
DeleteQueueRequest.prototype = {};
DeleteQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PurgeQueueRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
PurgeQueueRequest.prototype = {};
PurgeQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PurgeQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('PurgeQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueAttributesRequest = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    }
  }
};
SetQueueAttributesRequest.prototype = {};
SetQueueAttributesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueAttributesRequest.prototype.write = function(output) {
  output.writeStructBegin('SetQueueAttributesRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueAttributesResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
  }
};
SetQueueAttributesResponse.prototype = {};
SetQueueAttributesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueAttributesResponse.prototype.write = function(output) {
  output.writeStructBegin('SetQueueAttributesResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueQuotaRequest = function(args) {
  this.queueName = null;
  this.queueQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
  }
};
SetQueueQuotaRequest.prototype = {};
SetQueueQuotaRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueQuotaRequest.prototype.write = function(output) {
  output.writeStructBegin('SetQueueQuotaRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 2);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueQuotaResponse = function(args) {
  this.queueName = null;
  this.queueQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
  }
};
SetQueueQuotaResponse.prototype = {};
SetQueueQuotaResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueQuotaResponse.prototype.write = function(output) {
  output.writeStructBegin('SetQueueQuotaResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 2);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetQueueInfoRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
GetQueueInfoRequest.prototype = {};
GetQueueInfoRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetQueueInfoRequest.prototype.write = function(output) {
  output.writeStructBegin('GetQueueInfoRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetQueueInfoResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  this.queueState = null;
  this.queueQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
    if (args.queueState !== undefined) {
      this.queueState = args.queueState;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueState is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
  }
};
GetQueueInfoResponse.prototype = {};
GetQueueInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueState = new QueueState();
        this.queueState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetQueueInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetQueueInfoResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.queueState !== null && this.queueState !== undefined) {
    output.writeFieldBegin('queueState', Thrift.Type.STRUCT, 3);
    this.queueState.write(output);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 4);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListQueueRequest = function(args) {
  this.queueNamePrefix = '';
  if (args) {
    if (args.queueNamePrefix !== undefined) {
      this.queueNamePrefix = args.queueNamePrefix;
    }
  }
};
ListQueueRequest.prototype = {};
ListQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueNamePrefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('ListQueueRequest');
  if (this.queueNamePrefix !== null && this.queueNamePrefix !== undefined) {
    output.writeFieldBegin('queueNamePrefix', Thrift.Type.STRING, 1);
    output.writeString(this.queueNamePrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListQueueResponse = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
ListQueueResponse.prototype = {};
ListQueueResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.queueName = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString().value;
          this.queueName.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListQueueResponse.prototype.write = function(output) {
  output.writeStructBegin('ListQueueResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.queueName.length);
    for (var iter17 in this.queueName)
    {
      if (this.queueName.hasOwnProperty(iter17))
      {
        iter17 = this.queueName[iter17];
        output.writeString(iter17);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetPermissionRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  this.permission = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
SetPermissionRequest.prototype = {};
SetPermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetPermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('SetPermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 3);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RevokePermissionRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
  }
};
RevokePermissionRequest.prototype = {};
RevokePermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RevokePermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('RevokePermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
QueryPermissionRequest.prototype = {};
QueryPermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionResponse = function(args) {
  this.permission = null;
  if (args) {
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
QueryPermissionResponse.prototype = {};
QueryPermissionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionResponse.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionResponse');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionForIdRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
  }
};
QueryPermissionForIdRequest.prototype = {};
QueryPermissionForIdRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionForIdRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionForIdRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionForIdResponse = function(args) {
  this.permission = null;
  if (args) {
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
QueryPermissionForIdResponse.prototype = {};
QueryPermissionForIdResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionForIdResponse.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionForIdResponse');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListPermissionsRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
ListPermissionsRequest.prototype = {};
ListPermissionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListPermissionsRequest.prototype.write = function(output) {
  output.writeStructBegin('ListPermissionsRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListPermissionsResponse = function(args) {
  this.permissionList = null;
  if (args) {
    if (args.permissionList !== undefined) {
      this.permissionList = args.permissionList;
    }
  }
};
ListPermissionsResponse.prototype = {};
ListPermissionsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.permissionList = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          if (_i23 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key24 = null;
          var val25 = null;
          key24 = input.readString().value;
          val25 = input.readI32().value;
          this.permissionList[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListPermissionsResponse.prototype.write = function(output) {
  output.writeStructBegin('ListPermissionsResponse');
  if (this.permissionList !== null && this.permissionList !== undefined) {
    output.writeFieldBegin('permissionList', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.permissionList));
    for (var kiter26 in this.permissionList)
    {
      if (this.permissionList.hasOwnProperty(kiter26))
      {
        var viter27 = this.permissionList[kiter26];
        output.writeString(kiter26);
        output.writeI32(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateTagRequest = function(args) {
  this.queueName = null;
  this.tagName = null;
  this.startTimestamp = null;
  this.readQPSQuota = null;
  this.attributeName = null;
  this.attributeValue = null;
  this.userAttributes = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
    if (args.startTimestamp !== undefined) {
      this.startTimestamp = args.startTimestamp;
    }
    if (args.readQPSQuota !== undefined) {
      this.readQPSQuota = args.readQPSQuota;
    }
    if (args.attributeName !== undefined) {
      this.attributeName = args.attributeName;
    }
    if (args.attributeValue !== undefined) {
      this.attributeValue = args.attributeValue;
    }
    if (args.userAttributes !== undefined) {
      this.userAttributes = args.userAttributes;
    }
  }
};
CreateTagRequest.prototype = {};
CreateTagRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.readQPSQuota = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributeValue = new MessageAttribute();
        this.attributeValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size28 = 0;
        var _rtmp332;
        this.userAttributes = {};
        var _ktype29 = 0;
        var _vtype30 = 0;
        _rtmp332 = input.readMapBegin();
        _ktype29 = _rtmp332.ktype;
        _vtype30 = _rtmp332.vtype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          if (_i33 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key34 = null;
          var val35 = null;
          key34 = input.readString().value;
          val35 = input.readString().value;
          this.userAttributes[key34] = val35;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateTagRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateTagRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.readQPSQuota !== null && this.readQPSQuota !== undefined) {
    output.writeFieldBegin('readQPSQuota', Thrift.Type.I64, 4);
    output.writeI64(this.readQPSQuota);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 5);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  if (this.attributeValue !== null && this.attributeValue !== undefined) {
    output.writeFieldBegin('attributeValue', Thrift.Type.STRUCT, 6);
    this.attributeValue.write(output);
    output.writeFieldEnd();
  }
  if (this.userAttributes !== null && this.userAttributes !== undefined) {
    output.writeFieldBegin('userAttributes', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userAttributes));
    for (var kiter36 in this.userAttributes)
    {
      if (this.userAttributes.hasOwnProperty(kiter36))
      {
        var viter37 = this.userAttributes[kiter36];
        output.writeString(kiter36);
        output.writeString(viter37);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateTagResponse = function(args) {
  this.queueName = null;
  this.tagName = null;
  this.startTimestamp = null;
  this.readQPSQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
    if (args.startTimestamp !== undefined) {
      this.startTimestamp = args.startTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTimestamp is unset!');
    }
    if (args.readQPSQuota !== undefined) {
      this.readQPSQuota = args.readQPSQuota;
    }
  }
};
CreateTagResponse.prototype = {};
CreateTagResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.readQPSQuota = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateTagResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateTagResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.readQPSQuota !== null && this.readQPSQuota !== undefined) {
    output.writeFieldBegin('readQPSQuota', Thrift.Type.I64, 4);
    output.writeI64(this.readQPSQuota);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteTagRequest = function(args) {
  this.queueName = null;
  this.tagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
  }
};
DeleteTagRequest.prototype = {};
DeleteTagRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteTagRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteTagRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetTagInfoRequest = function(args) {
  this.queueName = null;
  this.tagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
  }
};
GetTagInfoRequest.prototype = {};
GetTagInfoRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTagInfoRequest.prototype.write = function(output) {
  output.writeStructBegin('GetTagInfoRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetTagInfoResponse = function(args) {
  this.queueName = null;
  this.tagName = null;
  this.tagState = null;
  this.startTimestamp = null;
  this.readQPSQuota = null;
  this.attributeName = null;
  this.attributeValue = null;
  this.userAttributes = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
    if (args.tagState !== undefined) {
      this.tagState = args.tagState;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagState is unset!');
    }
    if (args.startTimestamp !== undefined) {
      this.startTimestamp = args.startTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTimestamp is unset!');
    }
    if (args.readQPSQuota !== undefined) {
      this.readQPSQuota = args.readQPSQuota;
    }
    if (args.attributeName !== undefined) {
      this.attributeName = args.attributeName;
    }
    if (args.attributeValue !== undefined) {
      this.attributeValue = args.attributeValue;
    }
    if (args.userAttributes !== undefined) {
      this.userAttributes = args.userAttributes;
    }
  }
};
GetTagInfoResponse.prototype = {};
GetTagInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tagState = new QueueState();
        this.tagState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.readQPSQuota = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributeValue = new MessageAttribute();
        this.attributeValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size38 = 0;
        var _rtmp342;
        this.userAttributes = {};
        var _ktype39 = 0;
        var _vtype40 = 0;
        _rtmp342 = input.readMapBegin();
        _ktype39 = _rtmp342.ktype;
        _vtype40 = _rtmp342.vtype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          if (_i43 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key44 = null;
          var val45 = null;
          key44 = input.readString().value;
          val45 = input.readString().value;
          this.userAttributes[key44] = val45;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTagInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetTagInfoResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  if (this.tagState !== null && this.tagState !== undefined) {
    output.writeFieldBegin('tagState', Thrift.Type.STRUCT, 3);
    this.tagState.write(output);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 4);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.readQPSQuota !== null && this.readQPSQuota !== undefined) {
    output.writeFieldBegin('readQPSQuota', Thrift.Type.I64, 5);
    output.writeI64(this.readQPSQuota);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 6);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  if (this.attributeValue !== null && this.attributeValue !== undefined) {
    output.writeFieldBegin('attributeValue', Thrift.Type.STRUCT, 7);
    this.attributeValue.write(output);
    output.writeFieldEnd();
  }
  if (this.userAttributes !== null && this.userAttributes !== undefined) {
    output.writeFieldBegin('userAttributes', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userAttributes));
    for (var kiter46 in this.userAttributes)
    {
      if (this.userAttributes.hasOwnProperty(kiter46))
      {
        var viter47 = this.userAttributes[kiter46];
        output.writeString(kiter46);
        output.writeString(viter47);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListTagRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
ListTagRequest.prototype = {};
ListTagRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListTagRequest.prototype.write = function(output) {
  output.writeStructBegin('ListTagRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListTagResponse = function(args) {
  this.queueName = null;
  this.tagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
  }
};
ListTagResponse.prototype = {};
ListTagResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.tagName = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString().value;
          this.tagName.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListTagResponse.prototype.write = function(output) {
  output.writeStructBegin('ListTagResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tagName.length);
    for (var iter55 in this.tagName)
    {
      if (this.tagName.hasOwnProperty(iter55))
      {
        iter55 = this.tagName[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryMetricRequest = function(args) {
  this.queueName = null;
  this.startTime = null;
  this.endTime = null;
  this.metrics = null;
  this.tags = null;
  this.aggregator = null;
  this.downsampleAggregator = null;
  this.downsampleInterval = null;
  this.downsampleTimeUnit = null;
  this.calRate = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.aggregator !== undefined) {
      this.aggregator = args.aggregator;
    }
    if (args.downsampleAggregator !== undefined) {
      this.downsampleAggregator = args.downsampleAggregator;
    }
    if (args.downsampleInterval !== undefined) {
      this.downsampleInterval = args.downsampleInterval;
    }
    if (args.downsampleTimeUnit !== undefined) {
      this.downsampleTimeUnit = args.downsampleTimeUnit;
    }
    if (args.calRate !== undefined) {
      this.calRate = args.calRate;
    }
  }
};
QueryMetricRequest.prototype = {};
QueryMetricRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.metrics = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size56 = 0;
        var _rtmp360;
        this.tags = {};
        var _ktype57 = 0;
        var _vtype58 = 0;
        _rtmp360 = input.readMapBegin();
        _ktype57 = _rtmp360.ktype;
        _vtype58 = _rtmp360.vtype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          if (_i61 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key62 = null;
          var val63 = null;
          key62 = input.readString().value;
          val63 = input.readString().value;
          this.tags[key62] = val63;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.aggregator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.downsampleAggregator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.downsampleInterval = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.downsampleTimeUnit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.calRate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryMetricRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryMetricRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 2);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 3);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.STRING, 4);
    output.writeString(this.metrics);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tags));
    for (var kiter64 in this.tags)
    {
      if (this.tags.hasOwnProperty(kiter64))
      {
        var viter65 = this.tags[kiter64];
        output.writeString(kiter64);
        output.writeString(viter65);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.aggregator !== null && this.aggregator !== undefined) {
    output.writeFieldBegin('aggregator', Thrift.Type.STRING, 6);
    output.writeString(this.aggregator);
    output.writeFieldEnd();
  }
  if (this.downsampleAggregator !== null && this.downsampleAggregator !== undefined) {
    output.writeFieldBegin('downsampleAggregator', Thrift.Type.STRING, 7);
    output.writeString(this.downsampleAggregator);
    output.writeFieldEnd();
  }
  if (this.downsampleInterval !== null && this.downsampleInterval !== undefined) {
    output.writeFieldBegin('downsampleInterval', Thrift.Type.I32, 8);
    output.writeI32(this.downsampleInterval);
    output.writeFieldEnd();
  }
  if (this.downsampleTimeUnit !== null && this.downsampleTimeUnit !== undefined) {
    output.writeFieldBegin('downsampleTimeUnit', Thrift.Type.STRING, 9);
    output.writeString(this.downsampleTimeUnit);
    output.writeFieldEnd();
  }
  if (this.calRate !== null && this.calRate !== undefined) {
    output.writeFieldBegin('calRate', Thrift.Type.BOOL, 10);
    output.writeBool(this.calRate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeSeriesData = function(args) {
  this.metric = null;
  this.tags = null;
  this.data = null;
  if (args) {
    if (args.metric !== undefined) {
      this.metric = args.metric;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TimeSeriesData.prototype = {};
TimeSeriesData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.metric = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size66 = 0;
        var _rtmp370;
        this.tags = {};
        var _ktype67 = 0;
        var _vtype68 = 0;
        _rtmp370 = input.readMapBegin();
        _ktype67 = _rtmp370.ktype;
        _vtype68 = _rtmp370.vtype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          if (_i71 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key72 = null;
          var val73 = null;
          key72 = input.readString().value;
          val73 = input.readString().value;
          this.tags[key72] = val73;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size74 = 0;
        var _rtmp378;
        this.data = {};
        var _ktype75 = 0;
        var _vtype76 = 0;
        _rtmp378 = input.readMapBegin();
        _ktype75 = _rtmp378.ktype;
        _vtype76 = _rtmp378.vtype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          if (_i79 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key80 = null;
          var val81 = null;
          key80 = input.readI64().value;
          val81 = input.readDouble().value;
          this.data[key80] = val81;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeSeriesData.prototype.write = function(output) {
  output.writeStructBegin('TimeSeriesData');
  if (this.metric !== null && this.metric !== undefined) {
    output.writeFieldBegin('metric', Thrift.Type.STRING, 1);
    output.writeString(this.metric);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tags));
    for (var kiter82 in this.tags)
    {
      if (this.tags.hasOwnProperty(kiter82))
      {
        var viter83 = this.tags[kiter82];
        output.writeString(kiter82);
        output.writeString(viter83);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.DOUBLE, Thrift.objectLength(this.data));
    for (var kiter84 in this.data)
    {
      if (this.data.hasOwnProperty(kiter84))
      {
        var viter85 = this.data[kiter84];
        output.writeI64(kiter84);
        output.writeDouble(viter85);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

