//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

EMQBaseService_getServiceVersion_args = function(args) {
};
EMQBaseService_getServiceVersion_args.prototype = {};
EMQBaseService_getServiceVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMQBaseService_getServiceVersion_args.prototype.write = function(output) {
  output.writeStructBegin('EMQBaseService_getServiceVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMQBaseService_getServiceVersion_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
EMQBaseService_getServiceVersion_result.prototype = {};
EMQBaseService_getServiceVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Version();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMQBaseService_getServiceVersion_result.prototype.write = function(output) {
  output.writeStructBegin('EMQBaseService_getServiceVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMQBaseService_validClientVersion_args = function(args) {
  this.clientVersion = null;
  if (args) {
    if (args.clientVersion !== undefined) {
      this.clientVersion = args.clientVersion;
    }
  }
};
EMQBaseService_validClientVersion_args.prototype = {};
EMQBaseService_validClientVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientVersion = new Version();
        this.clientVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMQBaseService_validClientVersion_args.prototype.write = function(output) {
  output.writeStructBegin('EMQBaseService_validClientVersion_args');
  if (this.clientVersion !== null && this.clientVersion !== undefined) {
    output.writeFieldBegin('clientVersion', Thrift.Type.STRUCT, 1);
    this.clientVersion.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMQBaseService_validClientVersion_result = function(args) {
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
EMQBaseService_validClientVersion_result.prototype = {};
EMQBaseService_validClientVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMQBaseService_validClientVersion_result.prototype.write = function(output) {
  output.writeStructBegin('EMQBaseService_validClientVersion_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EMQBaseServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
EMQBaseServiceClient.prototype = {};
EMQBaseServiceClient.prototype.getServiceVersion = function(callback) {
  if (callback === undefined) {
    this.send_getServiceVersion();
    return this.recv_getServiceVersion();
  } else {
    var postData = this.send_getServiceVersion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getServiceVersion);
  }
};

EMQBaseServiceClient.prototype.send_getServiceVersion = function(callback) {
  this.output.writeMessageBegin('getServiceVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new EMQBaseService_getServiceVersion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMQBaseServiceClient.prototype.recv_getServiceVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMQBaseService_getServiceVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getServiceVersion failed: unknown result';
};
EMQBaseServiceClient.prototype.validClientVersion = function(clientVersion, callback) {
  if (callback === undefined) {
    this.send_validClientVersion(clientVersion);
    this.recv_validClientVersion();
  } else {
    var postData = this.send_validClientVersion(clientVersion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_validClientVersion);
  }
};

EMQBaseServiceClient.prototype.send_validClientVersion = function(clientVersion, callback) {
  this.output.writeMessageBegin('validClientVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new EMQBaseService_validClientVersion_args();
  args.clientVersion = clientVersion;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EMQBaseServiceClient.prototype.recv_validClientVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EMQBaseService_validClientVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
