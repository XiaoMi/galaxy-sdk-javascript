//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


MessageAttribute = function(args) {
  this.type = null;
  this.stringValue = null;
  this.binaryValue = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
  }
};
MessageAttribute.prototype = {};
MessageAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageAttribute.prototype.write = function(output) {
  output.writeStructBegin('MessageAttribute');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 2);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 3);
    output.writeBinary(this.binaryValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageRequest = function(args) {
  this.queueName = null;
  this.messageBody = null;
  this.delaySeconds = null;
  this.invisibilitySeconds = null;
  this.messageAttributes = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.messageBody !== undefined) {
      this.messageBody = args.messageBody;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageBody is unset!');
    }
    if (args.delaySeconds !== undefined) {
      this.delaySeconds = args.delaySeconds;
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    }
    if (args.messageAttributes !== undefined) {
      this.messageAttributes = args.messageAttributes;
    }
  }
};
SendMessageRequest.prototype = {};
SendMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.delaySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.messageAttributes = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = new MessageAttribute();
          val7.read(input);
          this.messageAttributes[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('SendMessageRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.messageBody !== null && this.messageBody !== undefined) {
    output.writeFieldBegin('messageBody', Thrift.Type.STRING, 2);
    output.writeString(this.messageBody);
    output.writeFieldEnd();
  }
  if (this.delaySeconds !== null && this.delaySeconds !== undefined) {
    output.writeFieldBegin('delaySeconds', Thrift.Type.I32, 3);
    output.writeI32(this.delaySeconds);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 4);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  if (this.messageAttributes !== null && this.messageAttributes !== undefined) {
    output.writeFieldBegin('messageAttributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.messageAttributes));
    for (var kiter8 in this.messageAttributes)
    {
      if (this.messageAttributes.hasOwnProperty(kiter8))
      {
        var viter9 = this.messageAttributes[kiter8];
        output.writeString(kiter8);
        viter9.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageResponse = function(args) {
  this.messageID = null;
  this.bodyLength = null;
  this.bodyMd5 = null;
  this.sendTimestamp = null;
  if (args) {
    if (args.messageID !== undefined) {
      this.messageID = args.messageID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageID is unset!');
    }
    if (args.bodyLength !== undefined) {
      this.bodyLength = args.bodyLength;
    }
    if (args.bodyMd5 !== undefined) {
      this.bodyMd5 = args.bodyMd5;
    }
    if (args.sendTimestamp !== undefined) {
      this.sendTimestamp = args.sendTimestamp;
    }
  }
};
SendMessageResponse.prototype = {};
SendMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.bodyLength = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bodyMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.sendTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('SendMessageResponse');
  if (this.messageID !== null && this.messageID !== undefined) {
    output.writeFieldBegin('messageID', Thrift.Type.STRING, 1);
    output.writeString(this.messageID);
    output.writeFieldEnd();
  }
  if (this.bodyLength !== null && this.bodyLength !== undefined) {
    output.writeFieldBegin('bodyLength', Thrift.Type.I32, 2);
    output.writeI32(this.bodyLength);
    output.writeFieldEnd();
  }
  if (this.bodyMd5 !== null && this.bodyMd5 !== undefined) {
    output.writeFieldBegin('bodyMd5', Thrift.Type.STRING, 3);
    output.writeString(this.bodyMd5);
    output.writeFieldEnd();
  }
  if (this.sendTimestamp !== null && this.sendTimestamp !== undefined) {
    output.writeFieldBegin('sendTimestamp', Thrift.Type.I64, 4);
    output.writeI64(this.sendTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageBatchRequestEntry = function(args) {
  this.entryId = null;
  this.messageBody = null;
  this.delaySeconds = null;
  this.invisibilitySeconds = null;
  this.messageAttributes = null;
  if (args) {
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field entryId is unset!');
    }
    if (args.messageBody !== undefined) {
      this.messageBody = args.messageBody;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageBody is unset!');
    }
    if (args.delaySeconds !== undefined) {
      this.delaySeconds = args.delaySeconds;
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    }
    if (args.messageAttributes !== undefined) {
      this.messageAttributes = args.messageAttributes;
    }
  }
};
SendMessageBatchRequestEntry.prototype = {};
SendMessageBatchRequestEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.delaySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.messageAttributes = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          if (_i15 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key16 = null;
          var val17 = null;
          key16 = input.readString().value;
          val17 = new MessageAttribute();
          val17.read(input);
          this.messageAttributes[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageBatchRequestEntry.prototype.write = function(output) {
  output.writeStructBegin('SendMessageBatchRequestEntry');
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.STRING, 1);
    output.writeString(this.entryId);
    output.writeFieldEnd();
  }
  if (this.messageBody !== null && this.messageBody !== undefined) {
    output.writeFieldBegin('messageBody', Thrift.Type.STRING, 2);
    output.writeString(this.messageBody);
    output.writeFieldEnd();
  }
  if (this.delaySeconds !== null && this.delaySeconds !== undefined) {
    output.writeFieldBegin('delaySeconds', Thrift.Type.I32, 3);
    output.writeI32(this.delaySeconds);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 4);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  if (this.messageAttributes !== null && this.messageAttributes !== undefined) {
    output.writeFieldBegin('messageAttributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.messageAttributes));
    for (var kiter18 in this.messageAttributes)
    {
      if (this.messageAttributes.hasOwnProperty(kiter18))
      {
        var viter19 = this.messageAttributes[kiter18];
        output.writeString(kiter18);
        viter19.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageBatchRequest = function(args) {
  this.queueName = null;
  this.sendMessageBatchRequestEntryList = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.sendMessageBatchRequestEntryList !== undefined) {
      this.sendMessageBatchRequestEntryList = args.sendMessageBatchRequestEntryList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sendMessageBatchRequestEntryList is unset!');
    }
  }
};
SendMessageBatchRequest.prototype = {};
SendMessageBatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size20 = 0;
        var _rtmp324;
        this.sendMessageBatchRequestEntryList = [];
        var _etype23 = 0;
        _rtmp324 = input.readListBegin();
        _etype23 = _rtmp324.etype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var elem26 = null;
          elem26 = new SendMessageBatchRequestEntry();
          elem26.read(input);
          this.sendMessageBatchRequestEntryList.push(elem26);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageBatchRequest.prototype.write = function(output) {
  output.writeStructBegin('SendMessageBatchRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.sendMessageBatchRequestEntryList !== null && this.sendMessageBatchRequestEntryList !== undefined) {
    output.writeFieldBegin('sendMessageBatchRequestEntryList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sendMessageBatchRequestEntryList.length);
    for (var iter27 in this.sendMessageBatchRequestEntryList)
    {
      if (this.sendMessageBatchRequestEntryList.hasOwnProperty(iter27))
      {
        iter27 = this.sendMessageBatchRequestEntryList[iter27];
        iter27.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageBatchResponseEntry = function(args) {
  this.entryId = null;
  this.messageID = null;
  this.bodyLength = null;
  this.bodyMd5 = null;
  this.sendTimestamp = null;
  if (args) {
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field entryId is unset!');
    }
    if (args.messageID !== undefined) {
      this.messageID = args.messageID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageID is unset!');
    }
    if (args.bodyLength !== undefined) {
      this.bodyLength = args.bodyLength;
    }
    if (args.bodyMd5 !== undefined) {
      this.bodyMd5 = args.bodyMd5;
    }
    if (args.sendTimestamp !== undefined) {
      this.sendTimestamp = args.sendTimestamp;
    }
  }
};
SendMessageBatchResponseEntry.prototype = {};
SendMessageBatchResponseEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bodyLength = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.bodyMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.sendTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageBatchResponseEntry.prototype.write = function(output) {
  output.writeStructBegin('SendMessageBatchResponseEntry');
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.STRING, 1);
    output.writeString(this.entryId);
    output.writeFieldEnd();
  }
  if (this.messageID !== null && this.messageID !== undefined) {
    output.writeFieldBegin('messageID', Thrift.Type.STRING, 2);
    output.writeString(this.messageID);
    output.writeFieldEnd();
  }
  if (this.bodyLength !== null && this.bodyLength !== undefined) {
    output.writeFieldBegin('bodyLength', Thrift.Type.I32, 3);
    output.writeI32(this.bodyLength);
    output.writeFieldEnd();
  }
  if (this.bodyMd5 !== null && this.bodyMd5 !== undefined) {
    output.writeFieldBegin('bodyMd5', Thrift.Type.STRING, 4);
    output.writeString(this.bodyMd5);
    output.writeFieldEnd();
  }
  if (this.sendTimestamp !== null && this.sendTimestamp !== undefined) {
    output.writeFieldBegin('sendTimestamp', Thrift.Type.I64, 5);
    output.writeI64(this.sendTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageBatchErrorEntry = function(args) {
  this.id = null;
  this.reason = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.reason = args;
    return;
  }
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
MessageBatchErrorEntry.prototype = {};
MessageBatchErrorEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reason = new GalaxyEmqServiceException();
        this.reason.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageBatchErrorEntry.prototype.write = function(output) {
  output.writeStructBegin('MessageBatchErrorEntry');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRUCT, 2);
    this.reason.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageBatchResponse = function(args) {
  this.successful = null;
  this.failed = null;
  if (args) {
    if (args.successful !== undefined) {
      this.successful = args.successful;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
  }
};
SendMessageBatchResponse.prototype = {};
SendMessageBatchResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.successful = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new SendMessageBatchResponseEntry();
          elem34.read(input);
          this.successful.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.failed = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = new MessageBatchErrorEntry();
          elem41.read(input);
          this.failed.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageBatchResponse.prototype.write = function(output) {
  output.writeStructBegin('SendMessageBatchResponse');
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.successful.length);
    for (var iter42 in this.successful)
    {
      if (this.successful.hasOwnProperty(iter42))
      {
        iter42 = this.successful[iter42];
        iter42.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failed.length);
    for (var iter43 in this.failed)
    {
      if (this.failed.hasOwnProperty(iter43))
      {
        iter43 = this.failed[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReceiveMessageRequest = function(args) {
  this.queueName = null;
  this.maxReceiveMessageNumber = 100;
  this.maxReceiveMessageWaitSeconds = 0;
  this.attributeName = null;
  this.attributeValue = null;
  this.tagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.maxReceiveMessageNumber !== undefined) {
      this.maxReceiveMessageNumber = args.maxReceiveMessageNumber;
    }
    if (args.maxReceiveMessageWaitSeconds !== undefined) {
      this.maxReceiveMessageWaitSeconds = args.maxReceiveMessageWaitSeconds;
    }
    if (args.attributeName !== undefined) {
      this.attributeName = args.attributeName;
    }
    if (args.attributeValue !== undefined) {
      this.attributeValue = args.attributeValue;
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
  }
};
ReceiveMessageRequest.prototype = {};
ReceiveMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxReceiveMessageNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxReceiveMessageWaitSeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributeValue = new MessageAttribute();
        this.attributeValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReceiveMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('ReceiveMessageRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.maxReceiveMessageNumber !== null && this.maxReceiveMessageNumber !== undefined) {
    output.writeFieldBegin('maxReceiveMessageNumber', Thrift.Type.I32, 2);
    output.writeI32(this.maxReceiveMessageNumber);
    output.writeFieldEnd();
  }
  if (this.maxReceiveMessageWaitSeconds !== null && this.maxReceiveMessageWaitSeconds !== undefined) {
    output.writeFieldBegin('maxReceiveMessageWaitSeconds', Thrift.Type.I32, 3);
    output.writeI32(this.maxReceiveMessageWaitSeconds);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 4);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  if (this.attributeValue !== null && this.attributeValue !== undefined) {
    output.writeFieldBegin('attributeValue', Thrift.Type.STRUCT, 5);
    this.attributeValue.write(output);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 6);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReceiveMessageResponse = function(args) {
  this.messageID = null;
  this.receiptHandle = null;
  this.messageBody = null;
  this.attributes = null;
  this.messageAttributes = null;
  if (args) {
    if (args.messageID !== undefined) {
      this.messageID = args.messageID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageID is unset!');
    }
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
    if (args.messageBody !== undefined) {
      this.messageBody = args.messageBody;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageBody is unset!');
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.messageAttributes !== undefined) {
      this.messageAttributes = args.messageAttributes;
    }
  }
};
ReceiveMessageResponse.prototype = {};
ReceiveMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size44 = 0;
        var _rtmp348;
        this.attributes = {};
        var _ktype45 = 0;
        var _vtype46 = 0;
        _rtmp348 = input.readMapBegin();
        _ktype45 = _rtmp348.ktype;
        _vtype46 = _rtmp348.vtype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          if (_i49 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key50 = null;
          var val51 = null;
          key50 = input.readString().value;
          val51 = input.readString().value;
          this.attributes[key50] = val51;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size52 = 0;
        var _rtmp356;
        this.messageAttributes = {};
        var _ktype53 = 0;
        var _vtype54 = 0;
        _rtmp356 = input.readMapBegin();
        _ktype53 = _rtmp356.ktype;
        _vtype54 = _rtmp356.vtype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          if (_i57 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key58 = null;
          var val59 = null;
          key58 = input.readString().value;
          val59 = new MessageAttribute();
          val59.read(input);
          this.messageAttributes[key58] = val59;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReceiveMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('ReceiveMessageResponse');
  if (this.messageID !== null && this.messageID !== undefined) {
    output.writeFieldBegin('messageID', Thrift.Type.STRING, 1);
    output.writeString(this.messageID);
    output.writeFieldEnd();
  }
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 2);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  if (this.messageBody !== null && this.messageBody !== undefined) {
    output.writeFieldBegin('messageBody', Thrift.Type.STRING, 3);
    output.writeString(this.messageBody);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter60 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter60))
      {
        var viter61 = this.attributes[kiter60];
        output.writeString(kiter60);
        output.writeString(viter61);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.messageAttributes !== null && this.messageAttributes !== undefined) {
    output.writeFieldBegin('messageAttributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.messageAttributes));
    for (var kiter62 in this.messageAttributes)
    {
      if (this.messageAttributes.hasOwnProperty(kiter62))
      {
        var viter63 = this.messageAttributes[kiter62];
        output.writeString(kiter62);
        viter63.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeMessageVisibilityRequest = function(args) {
  this.queueName = null;
  this.receiptHandle = null;
  this.invisibilitySeconds = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invisibilitySeconds is unset!');
    }
  }
};
ChangeMessageVisibilityRequest.prototype = {};
ChangeMessageVisibilityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeMessageVisibilityRequest.prototype.write = function(output) {
  output.writeStructBegin('ChangeMessageVisibilityRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 2);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 3);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeMessageVisibilityBatchRequestEntry = function(args) {
  this.receiptHandle = null;
  this.invisibilitySeconds = null;
  if (args) {
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invisibilitySeconds is unset!');
    }
  }
};
ChangeMessageVisibilityBatchRequestEntry.prototype = {};
ChangeMessageVisibilityBatchRequestEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeMessageVisibilityBatchRequestEntry.prototype.write = function(output) {
  output.writeStructBegin('ChangeMessageVisibilityBatchRequestEntry');
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 1);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 2);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeMessageVisibilityBatchRequest = function(args) {
  this.queueName = null;
  this.changeMessageVisibilityRequestEntryList = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.changeMessageVisibilityRequestEntryList !== undefined) {
      this.changeMessageVisibilityRequestEntryList = args.changeMessageVisibilityRequestEntryList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field changeMessageVisibilityRequestEntryList is unset!');
    }
  }
};
ChangeMessageVisibilityBatchRequest.prototype = {};
ChangeMessageVisibilityBatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.changeMessageVisibilityRequestEntryList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ChangeMessageVisibilityBatchRequestEntry();
          elem70.read(input);
          this.changeMessageVisibilityRequestEntryList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeMessageVisibilityBatchRequest.prototype.write = function(output) {
  output.writeStructBegin('ChangeMessageVisibilityBatchRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.changeMessageVisibilityRequestEntryList !== null && this.changeMessageVisibilityRequestEntryList !== undefined) {
    output.writeFieldBegin('changeMessageVisibilityRequestEntryList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.changeMessageVisibilityRequestEntryList.length);
    for (var iter71 in this.changeMessageVisibilityRequestEntryList)
    {
      if (this.changeMessageVisibilityRequestEntryList.hasOwnProperty(iter71))
      {
        iter71 = this.changeMessageVisibilityRequestEntryList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeMessageVisibilityBatchResponse = function(args) {
  this.successful = null;
  this.failed = null;
  if (args) {
    if (args.successful !== undefined) {
      this.successful = args.successful;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
  }
};
ChangeMessageVisibilityBatchResponse.prototype = {};
ChangeMessageVisibilityBatchResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.successful = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readString().value;
          this.successful.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.failed = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = new MessageBatchErrorEntry();
          elem85.read(input);
          this.failed.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeMessageVisibilityBatchResponse.prototype.write = function(output) {
  output.writeStructBegin('ChangeMessageVisibilityBatchResponse');
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.successful.length);
    for (var iter86 in this.successful)
    {
      if (this.successful.hasOwnProperty(iter86))
      {
        iter86 = this.successful[iter86];
        output.writeString(iter86);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failed.length);
    for (var iter87 in this.failed)
    {
      if (this.failed.hasOwnProperty(iter87))
      {
        iter87 = this.failed[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageRequest = function(args) {
  this.queueName = null;
  this.receiptHandle = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
  }
};
DeleteMessageRequest.prototype = {};
DeleteMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 2);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageBatchRequestEntry = function(args) {
  this.receiptHandle = null;
  if (args) {
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
  }
};
DeleteMessageBatchRequestEntry.prototype = {};
DeleteMessageBatchRequestEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageBatchRequestEntry.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageBatchRequestEntry');
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 1);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageBatchRequest = function(args) {
  this.queueName = null;
  this.deleteMessageBatchRequestEntryList = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.deleteMessageBatchRequestEntryList !== undefined) {
      this.deleteMessageBatchRequestEntryList = args.deleteMessageBatchRequestEntryList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteMessageBatchRequestEntryList is unset!');
    }
  }
};
DeleteMessageBatchRequest.prototype = {};
DeleteMessageBatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.deleteMessageBatchRequestEntryList = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new DeleteMessageBatchRequestEntry();
          elem94.read(input);
          this.deleteMessageBatchRequestEntryList.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageBatchRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageBatchRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.deleteMessageBatchRequestEntryList !== null && this.deleteMessageBatchRequestEntryList !== undefined) {
    output.writeFieldBegin('deleteMessageBatchRequestEntryList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.deleteMessageBatchRequestEntryList.length);
    for (var iter95 in this.deleteMessageBatchRequestEntryList)
    {
      if (this.deleteMessageBatchRequestEntryList.hasOwnProperty(iter95))
      {
        iter95 = this.deleteMessageBatchRequestEntryList[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageBatchResponse = function(args) {
  this.successful = null;
  this.failed = null;
  if (args) {
    if (args.successful !== undefined) {
      this.successful = args.successful;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
  }
};
DeleteMessageBatchResponse.prototype = {};
DeleteMessageBatchResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.successful = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString().value;
          this.successful.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size103 = 0;
        var _rtmp3107;
        this.failed = [];
        var _etype106 = 0;
        _rtmp3107 = input.readListBegin();
        _etype106 = _rtmp3107.etype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          var elem109 = null;
          elem109 = new MessageBatchErrorEntry();
          elem109.read(input);
          this.failed.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageBatchResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageBatchResponse');
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.successful.length);
    for (var iter110 in this.successful)
    {
      if (this.successful.hasOwnProperty(iter110))
      {
        iter110 = this.successful[iter110];
        output.writeString(iter110);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failed.length);
    for (var iter111 in this.failed)
    {
      if (this.failed.hasOwnProperty(iter111))
      {
        iter111 = this.failed[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeadMessageRequest = function(args) {
  this.queueName = null;
  this.receiptHandle = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
  }
};
DeadMessageRequest.prototype = {};
DeadMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeadMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('DeadMessageRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 2);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeadMessageBatchRequestEntry = function(args) {
  this.receiptHandle = null;
  if (args) {
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
  }
};
DeadMessageBatchRequestEntry.prototype = {};
DeadMessageBatchRequestEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeadMessageBatchRequestEntry.prototype.write = function(output) {
  output.writeStructBegin('DeadMessageBatchRequestEntry');
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 1);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeadMessageBatchRequest = function(args) {
  this.queueName = null;
  this.deadMessageBatchRequestEntryList = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.deadMessageBatchRequestEntryList !== undefined) {
      this.deadMessageBatchRequestEntryList = args.deadMessageBatchRequestEntryList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deadMessageBatchRequestEntryList is unset!');
    }
  }
};
DeadMessageBatchRequest.prototype = {};
DeadMessageBatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.deadMessageBatchRequestEntryList = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new DeadMessageBatchRequestEntry();
          elem118.read(input);
          this.deadMessageBatchRequestEntryList.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeadMessageBatchRequest.prototype.write = function(output) {
  output.writeStructBegin('DeadMessageBatchRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.deadMessageBatchRequestEntryList !== null && this.deadMessageBatchRequestEntryList !== undefined) {
    output.writeFieldBegin('deadMessageBatchRequestEntryList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.deadMessageBatchRequestEntryList.length);
    for (var iter119 in this.deadMessageBatchRequestEntryList)
    {
      if (this.deadMessageBatchRequestEntryList.hasOwnProperty(iter119))
      {
        iter119 = this.deadMessageBatchRequestEntryList[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeadMessageBatchResponse = function(args) {
  this.successful = null;
  this.failed = null;
  if (args) {
    if (args.successful !== undefined) {
      this.successful = args.successful;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
  }
};
DeadMessageBatchResponse.prototype = {};
DeadMessageBatchResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.successful = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = input.readString().value;
          this.successful.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size127 = 0;
        var _rtmp3131;
        this.failed = [];
        var _etype130 = 0;
        _rtmp3131 = input.readListBegin();
        _etype130 = _rtmp3131.etype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var elem133 = null;
          elem133 = new MessageBatchErrorEntry();
          elem133.read(input);
          this.failed.push(elem133);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeadMessageBatchResponse.prototype.write = function(output) {
  output.writeStructBegin('DeadMessageBatchResponse');
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.successful.length);
    for (var iter134 in this.successful)
    {
      if (this.successful.hasOwnProperty(iter134))
      {
        iter134 = this.successful[iter134];
        output.writeString(iter134);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failed.length);
    for (var iter135 in this.failed)
    {
      if (this.failed.hasOwnProperty(iter135))
      {
        iter135 = this.failed[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

