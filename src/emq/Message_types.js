//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


MessageAttribute = function(args) {
  this.name = null;
  this.type = null;
  this.stringValue = null;
  this.binaryValue = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
  }
};
MessageAttribute.prototype = {};
MessageAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageAttribute.prototype.write = function(output) {
  output.writeStructBegin('MessageAttribute');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 3);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 4);
    output.writeBinary(this.binaryValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageRequest = function(args) {
  this.queueName = null;
  this.messageBody = null;
  this.delaySeconds = null;
  this.invisibilitySeconds = null;
  this.messageAttributes = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.messageBody !== undefined) {
      this.messageBody = args.messageBody;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageBody is unset!');
    }
    if (args.delaySeconds !== undefined) {
      this.delaySeconds = args.delaySeconds;
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    }
    if (args.messageAttributes !== undefined) {
      this.messageAttributes = args.messageAttributes;
    }
  }
};
SendMessageRequest.prototype = {};
SendMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.delaySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.messageAttributes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new MessageAttribute();
          elem6.read(input);
          this.messageAttributes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('SendMessageRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.messageBody !== null && this.messageBody !== undefined) {
    output.writeFieldBegin('messageBody', Thrift.Type.STRING, 2);
    output.writeString(this.messageBody);
    output.writeFieldEnd();
  }
  if (this.delaySeconds !== null && this.delaySeconds !== undefined) {
    output.writeFieldBegin('delaySeconds', Thrift.Type.I32, 3);
    output.writeI32(this.delaySeconds);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 4);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  if (this.messageAttributes !== null && this.messageAttributes !== undefined) {
    output.writeFieldBegin('messageAttributes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.messageAttributes.length);
    for (var iter7 in this.messageAttributes)
    {
      if (this.messageAttributes.hasOwnProperty(iter7))
      {
        iter7 = this.messageAttributes[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageResponse = function(args) {
  this.messageID = null;
  if (args) {
    if (args.messageID !== undefined) {
      this.messageID = args.messageID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageID is unset!');
    }
  }
};
SendMessageResponse.prototype = {};
SendMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('SendMessageResponse');
  if (this.messageID !== null && this.messageID !== undefined) {
    output.writeFieldBegin('messageID', Thrift.Type.STRING, 1);
    output.writeString(this.messageID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageBatchRequestEntry = function(args) {
  this.entryId = null;
  this.messageBody = null;
  this.delaySeconds = null;
  this.invisibilitySeconds = null;
  this.messageAttributes = null;
  if (args) {
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field entryId is unset!');
    }
    if (args.messageBody !== undefined) {
      this.messageBody = args.messageBody;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageBody is unset!');
    }
    if (args.delaySeconds !== undefined) {
      this.delaySeconds = args.delaySeconds;
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    }
    if (args.messageAttributes !== undefined) {
      this.messageAttributes = args.messageAttributes;
    }
  }
};
SendMessageBatchRequestEntry.prototype = {};
SendMessageBatchRequestEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.delaySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.messageAttributes = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new MessageAttribute();
          elem14.read(input);
          this.messageAttributes.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageBatchRequestEntry.prototype.write = function(output) {
  output.writeStructBegin('SendMessageBatchRequestEntry');
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.STRING, 1);
    output.writeString(this.entryId);
    output.writeFieldEnd();
  }
  if (this.messageBody !== null && this.messageBody !== undefined) {
    output.writeFieldBegin('messageBody', Thrift.Type.STRING, 2);
    output.writeString(this.messageBody);
    output.writeFieldEnd();
  }
  if (this.delaySeconds !== null && this.delaySeconds !== undefined) {
    output.writeFieldBegin('delaySeconds', Thrift.Type.I32, 3);
    output.writeI32(this.delaySeconds);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 4);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  if (this.messageAttributes !== null && this.messageAttributes !== undefined) {
    output.writeFieldBegin('messageAttributes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.messageAttributes.length);
    for (var iter15 in this.messageAttributes)
    {
      if (this.messageAttributes.hasOwnProperty(iter15))
      {
        iter15 = this.messageAttributes[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageBatchRequest = function(args) {
  this.queueName = null;
  this.sendMessageBatchRequestEntryList = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.sendMessageBatchRequestEntryList !== undefined) {
      this.sendMessageBatchRequestEntryList = args.sendMessageBatchRequestEntryList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sendMessageBatchRequestEntryList is unset!');
    }
  }
};
SendMessageBatchRequest.prototype = {};
SendMessageBatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.sendMessageBatchRequestEntryList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new SendMessageBatchRequestEntry();
          elem22.read(input);
          this.sendMessageBatchRequestEntryList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageBatchRequest.prototype.write = function(output) {
  output.writeStructBegin('SendMessageBatchRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.sendMessageBatchRequestEntryList !== null && this.sendMessageBatchRequestEntryList !== undefined) {
    output.writeFieldBegin('sendMessageBatchRequestEntryList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sendMessageBatchRequestEntryList.length);
    for (var iter23 in this.sendMessageBatchRequestEntryList)
    {
      if (this.sendMessageBatchRequestEntryList.hasOwnProperty(iter23))
      {
        iter23 = this.sendMessageBatchRequestEntryList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageBatchResponseEntry = function(args) {
  this.entryId = null;
  this.messageID = null;
  if (args) {
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field entryId is unset!');
    }
    if (args.messageID !== undefined) {
      this.messageID = args.messageID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageID is unset!');
    }
  }
};
SendMessageBatchResponseEntry.prototype = {};
SendMessageBatchResponseEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageBatchResponseEntry.prototype.write = function(output) {
  output.writeStructBegin('SendMessageBatchResponseEntry');
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.STRING, 1);
    output.writeString(this.entryId);
    output.writeFieldEnd();
  }
  if (this.messageID !== null && this.messageID !== undefined) {
    output.writeFieldBegin('messageID', Thrift.Type.STRING, 2);
    output.writeString(this.messageID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageBatchErrorEntry = function(args) {
  this.id = null;
  this.reason = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.reason = args;
    return;
  }
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
MessageBatchErrorEntry.prototype = {};
MessageBatchErrorEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reason = new GalaxyEmqServiceException();
        this.reason.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageBatchErrorEntry.prototype.write = function(output) {
  output.writeStructBegin('MessageBatchErrorEntry');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRUCT, 2);
    this.reason.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageBatchResponse = function(args) {
  this.successful = null;
  this.failed = null;
  if (args) {
    if (args.successful !== undefined) {
      this.successful = args.successful;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
  }
};
SendMessageBatchResponse.prototype = {};
SendMessageBatchResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.successful = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new SendMessageBatchResponseEntry();
          elem30.read(input);
          this.successful.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.failed = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new MessageBatchErrorEntry();
          elem37.read(input);
          this.failed.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageBatchResponse.prototype.write = function(output) {
  output.writeStructBegin('SendMessageBatchResponse');
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.successful.length);
    for (var iter38 in this.successful)
    {
      if (this.successful.hasOwnProperty(iter38))
      {
        iter38 = this.successful[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failed.length);
    for (var iter39 in this.failed)
    {
      if (this.failed.hasOwnProperty(iter39))
      {
        iter39 = this.failed[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReceiveMessageRequest = function(args) {
  this.queueName = null;
  this.maxReceiveMessageNumber = 100;
  this.maxReceiveMessageWaitSeconds = 0;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.maxReceiveMessageNumber !== undefined) {
      this.maxReceiveMessageNumber = args.maxReceiveMessageNumber;
    }
    if (args.maxReceiveMessageWaitSeconds !== undefined) {
      this.maxReceiveMessageWaitSeconds = args.maxReceiveMessageWaitSeconds;
    }
  }
};
ReceiveMessageRequest.prototype = {};
ReceiveMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxReceiveMessageNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxReceiveMessageWaitSeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReceiveMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('ReceiveMessageRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.maxReceiveMessageNumber !== null && this.maxReceiveMessageNumber !== undefined) {
    output.writeFieldBegin('maxReceiveMessageNumber', Thrift.Type.I32, 2);
    output.writeI32(this.maxReceiveMessageNumber);
    output.writeFieldEnd();
  }
  if (this.maxReceiveMessageWaitSeconds !== null && this.maxReceiveMessageWaitSeconds !== undefined) {
    output.writeFieldBegin('maxReceiveMessageWaitSeconds', Thrift.Type.I32, 3);
    output.writeI32(this.maxReceiveMessageWaitSeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReceiveMessageResponse = function(args) {
  this.messageID = null;
  this.receiptHandle = null;
  this.messageBody = null;
  this.messageAttributes = null;
  if (args) {
    if (args.messageID !== undefined) {
      this.messageID = args.messageID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageID is unset!');
    }
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
    if (args.messageBody !== undefined) {
      this.messageBody = args.messageBody;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageBody is unset!');
    }
    if (args.messageAttributes !== undefined) {
      this.messageAttributes = args.messageAttributes;
    }
  }
};
ReceiveMessageResponse.prototype = {};
ReceiveMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.messageAttributes = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new MessageAttribute();
          elem46.read(input);
          this.messageAttributes.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReceiveMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('ReceiveMessageResponse');
  if (this.messageID !== null && this.messageID !== undefined) {
    output.writeFieldBegin('messageID', Thrift.Type.STRING, 1);
    output.writeString(this.messageID);
    output.writeFieldEnd();
  }
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 2);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  if (this.messageBody !== null && this.messageBody !== undefined) {
    output.writeFieldBegin('messageBody', Thrift.Type.STRING, 3);
    output.writeString(this.messageBody);
    output.writeFieldEnd();
  }
  if (this.messageAttributes !== null && this.messageAttributes !== undefined) {
    output.writeFieldBegin('messageAttributes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.messageAttributes.length);
    for (var iter47 in this.messageAttributes)
    {
      if (this.messageAttributes.hasOwnProperty(iter47))
      {
        iter47 = this.messageAttributes[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeMessageVisibilityRequest = function(args) {
  this.queueName = null;
  this.receiptHandle = null;
  this.invisibilitySeconds = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invisibilitySeconds is unset!');
    }
  }
};
ChangeMessageVisibilityRequest.prototype = {};
ChangeMessageVisibilityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeMessageVisibilityRequest.prototype.write = function(output) {
  output.writeStructBegin('ChangeMessageVisibilityRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 2);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 3);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeMessageVisibilityBatchRequestEntry = function(args) {
  this.receiptHandle = null;
  this.invisibilitySeconds = null;
  if (args) {
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invisibilitySeconds is unset!');
    }
  }
};
ChangeMessageVisibilityBatchRequestEntry.prototype = {};
ChangeMessageVisibilityBatchRequestEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeMessageVisibilityBatchRequestEntry.prototype.write = function(output) {
  output.writeStructBegin('ChangeMessageVisibilityBatchRequestEntry');
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 1);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 2);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeMessageVisibilityBatchRequest = function(args) {
  this.queueName = null;
  this.changeMessageVisibilityRequestEntryList = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.changeMessageVisibilityRequestEntryList !== undefined) {
      this.changeMessageVisibilityRequestEntryList = args.changeMessageVisibilityRequestEntryList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field changeMessageVisibilityRequestEntryList is unset!');
    }
  }
};
ChangeMessageVisibilityBatchRequest.prototype = {};
ChangeMessageVisibilityBatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.changeMessageVisibilityRequestEntryList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ChangeMessageVisibilityBatchRequestEntry();
          elem54.read(input);
          this.changeMessageVisibilityRequestEntryList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeMessageVisibilityBatchRequest.prototype.write = function(output) {
  output.writeStructBegin('ChangeMessageVisibilityBatchRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.changeMessageVisibilityRequestEntryList !== null && this.changeMessageVisibilityRequestEntryList !== undefined) {
    output.writeFieldBegin('changeMessageVisibilityRequestEntryList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.changeMessageVisibilityRequestEntryList.length);
    for (var iter55 in this.changeMessageVisibilityRequestEntryList)
    {
      if (this.changeMessageVisibilityRequestEntryList.hasOwnProperty(iter55))
      {
        iter55 = this.changeMessageVisibilityRequestEntryList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeMessageVisibilityBatchResponse = function(args) {
  this.successful = null;
  this.failed = null;
  if (args) {
    if (args.successful !== undefined) {
      this.successful = args.successful;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
  }
};
ChangeMessageVisibilityBatchResponse.prototype = {};
ChangeMessageVisibilityBatchResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.successful = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString().value;
          this.successful.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.failed = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new MessageBatchErrorEntry();
          elem69.read(input);
          this.failed.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeMessageVisibilityBatchResponse.prototype.write = function(output) {
  output.writeStructBegin('ChangeMessageVisibilityBatchResponse');
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.successful.length);
    for (var iter70 in this.successful)
    {
      if (this.successful.hasOwnProperty(iter70))
      {
        iter70 = this.successful[iter70];
        output.writeString(iter70);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failed.length);
    for (var iter71 in this.failed)
    {
      if (this.failed.hasOwnProperty(iter71))
      {
        iter71 = this.failed[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageRequest = function(args) {
  this.queueName = null;
  this.receiptHandle = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
  }
};
DeleteMessageRequest.prototype = {};
DeleteMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 2);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageBatchRequestEntry = function(args) {
  this.receiptHandle = null;
  if (args) {
    if (args.receiptHandle !== undefined) {
      this.receiptHandle = args.receiptHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field receiptHandle is unset!');
    }
  }
};
DeleteMessageBatchRequestEntry.prototype = {};
DeleteMessageBatchRequestEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.receiptHandle = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageBatchRequestEntry.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageBatchRequestEntry');
  if (this.receiptHandle !== null && this.receiptHandle !== undefined) {
    output.writeFieldBegin('receiptHandle', Thrift.Type.STRING, 1);
    output.writeString(this.receiptHandle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageBatchRequest = function(args) {
  this.queueName = null;
  this.deleteMessageBatchRequestEntryList = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.deleteMessageBatchRequestEntryList !== undefined) {
      this.deleteMessageBatchRequestEntryList = args.deleteMessageBatchRequestEntryList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteMessageBatchRequestEntryList is unset!');
    }
  }
};
DeleteMessageBatchRequest.prototype = {};
DeleteMessageBatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.deleteMessageBatchRequestEntryList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new DeleteMessageBatchRequestEntry();
          elem78.read(input);
          this.deleteMessageBatchRequestEntryList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageBatchRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageBatchRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.deleteMessageBatchRequestEntryList !== null && this.deleteMessageBatchRequestEntryList !== undefined) {
    output.writeFieldBegin('deleteMessageBatchRequestEntryList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.deleteMessageBatchRequestEntryList.length);
    for (var iter79 in this.deleteMessageBatchRequestEntryList)
    {
      if (this.deleteMessageBatchRequestEntryList.hasOwnProperty(iter79))
      {
        iter79 = this.deleteMessageBatchRequestEntryList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageBatchResponse = function(args) {
  this.successful = null;
  this.failed = null;
  if (args) {
    if (args.successful !== undefined) {
      this.successful = args.successful;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
  }
};
DeleteMessageBatchResponse.prototype = {};
DeleteMessageBatchResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.successful = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readString().value;
          this.successful.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size87 = 0;
        var _rtmp391;
        this.failed = [];
        var _etype90 = 0;
        _rtmp391 = input.readListBegin();
        _etype90 = _rtmp391.etype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var elem93 = null;
          elem93 = new MessageBatchErrorEntry();
          elem93.read(input);
          this.failed.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageBatchResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageBatchResponse');
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.successful.length);
    for (var iter94 in this.successful)
    {
      if (this.successful.hasOwnProperty(iter94))
      {
        iter94 = this.successful[iter94];
        output.writeString(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failed.length);
    for (var iter95 in this.failed)
    {
      if (this.failed.hasOwnProperty(iter95))
      {
        iter95 = this.failed[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

