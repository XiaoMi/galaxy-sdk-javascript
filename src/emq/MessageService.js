//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MessageService_sendMessage_args = function(args) {
  this.sendMessageRequest = null;
  if (args) {
    if (args.sendMessageRequest !== undefined) {
      this.sendMessageRequest = args.sendMessageRequest;
    }
  }
};
MessageService_sendMessage_args.prototype = {};
MessageService_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendMessageRequest = new SendMessageRequest();
        this.sendMessageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessage_args');
  if (this.sendMessageRequest !== null && this.sendMessageRequest !== undefined) {
    output.writeFieldBegin('sendMessageRequest', Thrift.Type.STRUCT, 1);
    this.sendMessageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_sendMessage_result.prototype = {};
MessageService_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendMessageResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessageBatch_args = function(args) {
  this.sendMessageBatchRequest = null;
  if (args) {
    if (args.sendMessageBatchRequest !== undefined) {
      this.sendMessageBatchRequest = args.sendMessageBatchRequest;
    }
  }
};
MessageService_sendMessageBatch_args.prototype = {};
MessageService_sendMessageBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendMessageBatchRequest = new SendMessageBatchRequest();
        this.sendMessageBatchRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessageBatch_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessageBatch_args');
  if (this.sendMessageBatchRequest !== null && this.sendMessageBatchRequest !== undefined) {
    output.writeFieldBegin('sendMessageBatchRequest', Thrift.Type.STRUCT, 1);
    this.sendMessageBatchRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessageBatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_sendMessageBatch_result.prototype = {};
MessageService_sendMessageBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendMessageBatchResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessageBatch_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessageBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_receiveMessage_args = function(args) {
  this.receiveMessageRequest = null;
  if (args) {
    if (args.receiveMessageRequest !== undefined) {
      this.receiveMessageRequest = args.receiveMessageRequest;
    }
  }
};
MessageService_receiveMessage_args.prototype = {};
MessageService_receiveMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.receiveMessageRequest = new ReceiveMessageRequest();
        this.receiveMessageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_receiveMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_receiveMessage_args');
  if (this.receiveMessageRequest !== null && this.receiveMessageRequest !== undefined) {
    output.writeFieldBegin('receiveMessageRequest', Thrift.Type.STRUCT, 1);
    this.receiveMessageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_receiveMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_receiveMessage_result.prototype = {};
MessageService_receiveMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ReceiveMessageResponse();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_receiveMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_receiveMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_changeMessageVisibilitySeconds_args = function(args) {
  this.changeMessageVisibilityRequest = null;
  if (args) {
    if (args.changeMessageVisibilityRequest !== undefined) {
      this.changeMessageVisibilityRequest = args.changeMessageVisibilityRequest;
    }
  }
};
MessageService_changeMessageVisibilitySeconds_args.prototype = {};
MessageService_changeMessageVisibilitySeconds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeMessageVisibilityRequest = new ChangeMessageVisibilityRequest();
        this.changeMessageVisibilityRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_changeMessageVisibilitySeconds_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_changeMessageVisibilitySeconds_args');
  if (this.changeMessageVisibilityRequest !== null && this.changeMessageVisibilityRequest !== undefined) {
    output.writeFieldBegin('changeMessageVisibilityRequest', Thrift.Type.STRUCT, 1);
    this.changeMessageVisibilityRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_changeMessageVisibilitySeconds_result = function(args) {
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_changeMessageVisibilitySeconds_result.prototype = {};
MessageService_changeMessageVisibilitySeconds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_changeMessageVisibilitySeconds_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_changeMessageVisibilitySeconds_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_changeMessageVisibilitySecondsBatch_args = function(args) {
  this.changeMessageVisibilityBatchRequest = null;
  if (args) {
    if (args.changeMessageVisibilityBatchRequest !== undefined) {
      this.changeMessageVisibilityBatchRequest = args.changeMessageVisibilityBatchRequest;
    }
  }
};
MessageService_changeMessageVisibilitySecondsBatch_args.prototype = {};
MessageService_changeMessageVisibilitySecondsBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeMessageVisibilityBatchRequest = new ChangeMessageVisibilityBatchRequest();
        this.changeMessageVisibilityBatchRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_changeMessageVisibilitySecondsBatch_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_changeMessageVisibilitySecondsBatch_args');
  if (this.changeMessageVisibilityBatchRequest !== null && this.changeMessageVisibilityBatchRequest !== undefined) {
    output.writeFieldBegin('changeMessageVisibilityBatchRequest', Thrift.Type.STRUCT, 1);
    this.changeMessageVisibilityBatchRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_changeMessageVisibilitySecondsBatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_changeMessageVisibilitySecondsBatch_result.prototype = {};
MessageService_changeMessageVisibilitySecondsBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChangeMessageVisibilityBatchResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_changeMessageVisibilitySecondsBatch_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_changeMessageVisibilitySecondsBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deleteMessage_args = function(args) {
  this.deleteMessageRequest = null;
  if (args) {
    if (args.deleteMessageRequest !== undefined) {
      this.deleteMessageRequest = args.deleteMessageRequest;
    }
  }
};
MessageService_deleteMessage_args.prototype = {};
MessageService_deleteMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteMessageRequest = new DeleteMessageRequest();
        this.deleteMessageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteMessage_args');
  if (this.deleteMessageRequest !== null && this.deleteMessageRequest !== undefined) {
    output.writeFieldBegin('deleteMessageRequest', Thrift.Type.STRUCT, 1);
    this.deleteMessageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deleteMessage_result = function(args) {
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_deleteMessage_result.prototype = {};
MessageService_deleteMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deleteMessageBatch_args = function(args) {
  this.deleteMessageBatchRequest = null;
  if (args) {
    if (args.deleteMessageBatchRequest !== undefined) {
      this.deleteMessageBatchRequest = args.deleteMessageBatchRequest;
    }
  }
};
MessageService_deleteMessageBatch_args.prototype = {};
MessageService_deleteMessageBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteMessageBatchRequest = new DeleteMessageBatchRequest();
        this.deleteMessageBatchRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteMessageBatch_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteMessageBatch_args');
  if (this.deleteMessageBatchRequest !== null && this.deleteMessageBatchRequest !== undefined) {
    output.writeFieldBegin('deleteMessageBatchRequest', Thrift.Type.STRUCT, 1);
    this.deleteMessageBatchRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deleteMessageBatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_deleteMessageBatch_result.prototype = {};
MessageService_deleteMessageBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeleteMessageBatchResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteMessageBatch_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteMessageBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(MessageServiceClient, EMQBaseServiceClient);
MessageServiceClient.prototype.sendMessage = function(sendMessageRequest, callback) {
  if (callback === undefined) {
    this.send_sendMessage(sendMessageRequest);
    return this.recv_sendMessage();
  } else {
    var postData = this.send_sendMessage(sendMessageRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_sendMessage);
  }
};

MessageServiceClient.prototype.send_sendMessage = function(sendMessageRequest, callback) {
  this.output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_sendMessage_args();
  args.sendMessageRequest = sendMessageRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MessageServiceClient.prototype.recv_sendMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_sendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessage failed: unknown result';
};
MessageServiceClient.prototype.sendMessageBatch = function(sendMessageBatchRequest, callback) {
  if (callback === undefined) {
    this.send_sendMessageBatch(sendMessageBatchRequest);
    return this.recv_sendMessageBatch();
  } else {
    var postData = this.send_sendMessageBatch(sendMessageBatchRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_sendMessageBatch);
  }
};

MessageServiceClient.prototype.send_sendMessageBatch = function(sendMessageBatchRequest, callback) {
  this.output.writeMessageBegin('sendMessageBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_sendMessageBatch_args();
  args.sendMessageBatchRequest = sendMessageBatchRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MessageServiceClient.prototype.recv_sendMessageBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_sendMessageBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessageBatch failed: unknown result';
};
MessageServiceClient.prototype.receiveMessage = function(receiveMessageRequest, callback) {
  if (callback === undefined) {
    this.send_receiveMessage(receiveMessageRequest);
    return this.recv_receiveMessage();
  } else {
    var postData = this.send_receiveMessage(receiveMessageRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_receiveMessage);
  }
};

MessageServiceClient.prototype.send_receiveMessage = function(receiveMessageRequest, callback) {
  this.output.writeMessageBegin('receiveMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_receiveMessage_args();
  args.receiveMessageRequest = receiveMessageRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MessageServiceClient.prototype.recv_receiveMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_receiveMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'receiveMessage failed: unknown result';
};
MessageServiceClient.prototype.changeMessageVisibilitySeconds = function(changeMessageVisibilityRequest, callback) {
  if (callback === undefined) {
    this.send_changeMessageVisibilitySeconds(changeMessageVisibilityRequest);
    this.recv_changeMessageVisibilitySeconds();
  } else {
    var postData = this.send_changeMessageVisibilitySeconds(changeMessageVisibilityRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeMessageVisibilitySeconds);
  }
};

MessageServiceClient.prototype.send_changeMessageVisibilitySeconds = function(changeMessageVisibilityRequest, callback) {
  this.output.writeMessageBegin('changeMessageVisibilitySeconds', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_changeMessageVisibilitySeconds_args();
  args.changeMessageVisibilityRequest = changeMessageVisibilityRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MessageServiceClient.prototype.recv_changeMessageVisibilitySeconds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_changeMessageVisibilitySeconds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MessageServiceClient.prototype.changeMessageVisibilitySecondsBatch = function(changeMessageVisibilityBatchRequest, callback) {
  if (callback === undefined) {
    this.send_changeMessageVisibilitySecondsBatch(changeMessageVisibilityBatchRequest);
    return this.recv_changeMessageVisibilitySecondsBatch();
  } else {
    var postData = this.send_changeMessageVisibilitySecondsBatch(changeMessageVisibilityBatchRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeMessageVisibilitySecondsBatch);
  }
};

MessageServiceClient.prototype.send_changeMessageVisibilitySecondsBatch = function(changeMessageVisibilityBatchRequest, callback) {
  this.output.writeMessageBegin('changeMessageVisibilitySecondsBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_changeMessageVisibilitySecondsBatch_args();
  args.changeMessageVisibilityBatchRequest = changeMessageVisibilityBatchRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MessageServiceClient.prototype.recv_changeMessageVisibilitySecondsBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_changeMessageVisibilitySecondsBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeMessageVisibilitySecondsBatch failed: unknown result';
};
MessageServiceClient.prototype.deleteMessage = function(deleteMessageRequest, callback) {
  if (callback === undefined) {
    this.send_deleteMessage(deleteMessageRequest);
    this.recv_deleteMessage();
  } else {
    var postData = this.send_deleteMessage(deleteMessageRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteMessage);
  }
};

MessageServiceClient.prototype.send_deleteMessage = function(deleteMessageRequest, callback) {
  this.output.writeMessageBegin('deleteMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_deleteMessage_args();
  args.deleteMessageRequest = deleteMessageRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MessageServiceClient.prototype.recv_deleteMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_deleteMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
MessageServiceClient.prototype.deleteMessageBatch = function(deleteMessageBatchRequest, callback) {
  if (callback === undefined) {
    this.send_deleteMessageBatch(deleteMessageBatchRequest);
    return this.recv_deleteMessageBatch();
  } else {
    var postData = this.send_deleteMessageBatch(deleteMessageBatchRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteMessageBatch);
  }
};

MessageServiceClient.prototype.send_deleteMessageBatch = function(deleteMessageBatchRequest, callback) {
  this.output.writeMessageBegin('deleteMessageBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_deleteMessageBatch_args();
  args.deleteMessageBatchRequest = deleteMessageBatchRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MessageServiceClient.prototype.recv_deleteMessageBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MessageService_deleteMessageBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteMessageBatch failed: unknown result';
};
